{"version":3,"sources":["lib/types/atoms.ts","lib/Math.ts","Store.tsx","lib/AtomsFunctions.ts","lib/types/interactions.ts","lib/NucleicAcids.ts","lib/InteractionsFinder.ts","lib/viz/ForceGraph.ts","components/Viewer.tsx","lib/PDBHandler.ts","components/DataFetcher.tsx","components/Spinner.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AtomRemoteness","Vector","x","y","z","this","v","Math","sqrt","dot","length","divide","min","max","theta","atan2","phi","asin","a","acos","n","slice","Coord","unit","i","val","pow","b","c","cos","sin","fromAngles","random","PI","fraction","subtract","multiply","add","angleTo","Infinity","fromArray","toArray","DNAResidues","RNAResidues","ProteinResidues","PolymerKind","ResidueImplementation","center","interactions","atoms","o","hash","name","sequenceNumber","polymerChainIdentifier","infinity","names","ret","forEach","indexOf","push","sort","initialState","polymers","pdb","undefined","isLoading","simpleStuffy","hashedNucleicAcidResidues","viz","chain1","chain2","currentPDBId","selectedResidue","error","context","createContext","reducer","state","type","payload","Error","StoreComponent","children","useReducer","dispatch","Provider","value","calculateCenters","p","residues","residue","coordinate","atom","coords","distanceBetween2Points","p1","p2","InteractionType","calculateNucleotidePlaneVectors","DNA","RNA","kind","cNames","cAtoms","findAtomsByNames","c2","c4","c6","cross","normalize","isWatsonCrickPair","r1","r2","pairs","DA","DT","U","A","DC","DG","G","C","LinkType","InteractionsFinder","nucleicAcids","proteins","hasValidDNA","hasValidRNA","visualization","prepareObjects","pairs1","calculateWatsonCrickPairs","pairs2","reverse","completePairs","pair","pairFoundIn1","console","log","allPairs","j","generatePairs","generateWatsonCrickPairs","bestR2","smallestDistance","r1Cs","r1DistToR2VO","abs","toVec","r2Cs","r2DistToR1VO","distanceTo","findNucleicAcids","findProteins","polymer","filter","Protein","nacid","nacidI","nacidResidue","nacidResidueI","pResidue","THRESHOLD_DISTANCE","nacidAtom","pAtom","r","distanceAtoms","Threshold","polymerKind","meta","distance","Letters","ColorMap","I","AT_LINK","GC_LINK","LinkColorMap","Viewer","useContext","ref","React","createRef","tooltip","containerRef","useRef","useEffect","time","iFinder","watsonCrickPairs","e","toString","nodes","links","resToId","chain","DNAResidueIndexes","Object","values","index","id","color","group","source","target","linkType","Backbone","CollectNodes","Pair","current","offsetWidth","offsetHeight","w","h","opts","svgRef","nodeId","d","nodeTitle","nodeGroups","nodeFill","nodeStroke","nodeStrokeWidth","nodeStrokeOpacity","nodeRadius","nodeStrength","linkStroke","linkStrokeOpacity","linkStrokeWidth","linkStrokeLinecap","linkStrength","width","height","invalidation","initialNodes","initialLinks","N","d3","map","valueOf","_","W","forceNode","forceLink","strength","simulation","force","on","link","attr","nodeGs","svg","html","g","append","selectAll","data","join","enter","call","event","active","alphaTarget","restart","subject","fx","fy","drag","node","lastEvent","Date","select","transformAdjusted","getTime","letters","text","then","stop","transformK","transform","zoom","k","style","assign","scales","ForceGraph","timeEnd","className","position","opacity","background","PDBHandler","file","format","raw","formatText","formatPolymers","split","line","currentTransformation","result","newPolymer","chainIdentifier","Unknown","newResidue","pushResidue","currentResidue","currentPolymer","determinePolymerKindAndReset","obj","keys","reduce","currentPolymerKindCounter","transformations","remark350TransformLines","resetTransformation","chains","rotations","translations","startsWith","parseFloat","trim","residueName","element","residueSequenceNumber","parseInt","polymerKindFromAtom","transformPrefix","replaceAll","matchArray","replace","match","RegExp","nthTransformation","nthRow","rotationRow","translation","setIndex","Array","isArray","transformation","chainsToTransform","rs","ts","rotation","rotationIndex","chainClone","clone","includeNonEnumerable","generatedFromTransform","rindex","newAtom","aindex","oldCoords","newCoords","t","toCoord","fetchPDBFile","fetch","response","pdbText","DataFetcher","startLoading","stopLoading","updatePDBState","updateCurrentPDBId","updatePolymers","resetState","loadPDBID","URLSearchParams","window","location","search","get","handleFileChange","f","files","item","readData","setTimeout","readOnly","pdbIdRef","handlePDBIdChange","pdbId","toUpperCase","onKeyPress","key","placeholder","onClick","onChange","Spinner","App","backgroundColor","AppWrapper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yJAgDYA,E,8ECzCCC,EAAb,WACC,WAAmBC,EAAkBC,EAAkBC,GAAY,yBAAhDF,IAA+C,KAA7BC,IAA6B,KAAXC,IACtDC,KAAKH,EAAIA,GAAK,EACdG,KAAKF,EAAIA,GAAK,EACdE,KAAKD,EAAIA,GAAK,EAJhB,4CAMC,WACC,OAAO,IAAIH,GAAQI,KAAKH,GAAIG,KAAKF,GAAIE,KAAKD,KAP5C,iBASC,SAAIE,GACH,OAAIA,aAAaL,EAAe,IAAIA,EAAOI,KAAKH,EAAII,EAAEJ,EAAGG,KAAKF,EAAIG,EAAEH,EAAGE,KAAKD,EAAIE,EAAEF,GACtE,IAAIH,EAAOI,KAAKH,EAAII,EAAGD,KAAKF,EAAIG,EAAGD,KAAKD,EAAIE,KAX1D,sBAaC,SAASA,GACR,OAAIA,aAAaL,EAAe,IAAIA,EAAOI,KAAKH,EAAII,EAAEJ,EAAGG,KAAKF,EAAIG,EAAEH,EAAGE,KAAKD,EAAIE,EAAEF,GACtE,IAAIH,EAAOI,KAAKH,EAAII,EAAGD,KAAKF,EAAIG,EAAGD,KAAKD,EAAIE,KAf1D,sBAiBC,SAASA,GACR,OAAIA,aAAaL,EAAe,IAAIA,EAAOI,KAAKH,EAAII,EAAEJ,EAAGG,KAAKF,EAAIG,EAAEH,EAAGE,KAAKD,EAAIE,EAAEF,GACtE,IAAIH,EAAOI,KAAKH,EAAII,EAAGD,KAAKF,EAAIG,EAAGD,KAAKD,EAAIE,KAnB1D,oBAqBC,SAAOA,GACN,OAAIA,aAAaL,EAAe,IAAIA,EAAOI,KAAKH,EAAII,EAAEJ,EAAGG,KAAKF,EAAIG,EAAEH,EAAGE,KAAKD,EAAIE,EAAEF,GACtE,IAAIH,EAAOI,KAAKH,EAAII,EAAGD,KAAKF,EAAIG,EAAGD,KAAKD,EAAIE,KAvB1D,oBAyBC,SAAOA,GACN,OAAOD,KAAKH,GAAKI,EAAEJ,GAAKG,KAAKF,GAAKG,EAAEH,GAAKE,KAAKD,GAAKE,EAAEF,IA1BvD,iBA4BC,SAAIE,GACH,OAAOD,KAAKH,EAAII,EAAEJ,EAAIG,KAAKF,EAAIG,EAAEH,EAAIE,KAAKD,EAAIE,EAAEF,IA7BlD,mBA+BC,SAAME,GACL,OAAO,IAAIL,EACVI,KAAKF,EAAIG,EAAEF,EAAIC,KAAKD,EAAIE,EAAEH,EAC1BE,KAAKD,EAAIE,EAAEJ,EAAIG,KAAKH,EAAII,EAAEF,EAC1BC,KAAKH,EAAII,EAAEH,EAAIE,KAAKF,EAAIG,EAAEJ,KAnC7B,oBAsCC,WACC,OAAOK,KAAKC,KAAKH,KAAKI,IAAIJ,SAvC5B,uBA0CC,WACC,OAAOA,KAAKK,WA3Cd,kBA6CC,WACC,OAAOL,KAAKM,OAAON,KAAKK,YA9C1B,iBAgDC,WACC,OAAOH,KAAKK,IAAIL,KAAKK,IAAIP,KAAKH,EAAGG,KAAKF,GAAIE,KAAKD,KAjDjD,iBAmDC,WACC,OAAOG,KAAKM,IAAIN,KAAKM,IAAIR,KAAKH,EAAGG,KAAKF,GAAIE,KAAKD,KApDjD,sBAsDC,WACC,MAAO,CACNU,MAAOP,KAAKQ,MAAMV,KAAKD,EAAGC,KAAKH,GAC/Bc,IAAKT,KAAKU,KAAKZ,KAAKF,EAAIE,KAAKK,aAzDhC,qBA4DC,SAAQQ,GACP,OAAOX,KAAKY,KAAKd,KAAKI,IAAIS,IAAMb,KAAKK,SAAWQ,EAAER,aA7DpD,qBA+DC,SAAQU,GACP,MAAO,CAACf,KAAKH,EAAGG,KAAKF,EAAGE,KAAKD,GAAGiB,MAAM,EAAGD,GAAK,KAhEhD,qBAkEC,WACC,OAAO,IAAIE,EAAMjB,KAAKH,EAAGG,KAAKF,EAAGE,KAAKD,KAnExC,mBAqEC,WACC,OAAO,IAAIH,EAAOI,KAAKH,EAAGG,KAAKF,EAAGE,KAAKD,KAtEzC,kBAwEC,SAAKF,EAAWC,EAAWC,GAI1B,OAHAC,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EACFC,OA5ET,uBA8EC,WACC,OAAOA,KAAKkB,SA/Ed,sBAmFC,SAASC,EAAWC,GACnB,OAAQD,GACP,KAAK,EACJnB,KAAKH,EAAIuB,EACT,MACD,KAAK,EACJpB,KAAKF,EAAIsB,EACT,MACD,KAAK,EACJpB,KAAKD,EAAIqB,KA5Fb,wBAkGC,SAAWnB,GACV,OAAOC,KAAKC,KACXD,KAAKmB,IAAIrB,KAAKH,EAAII,EAAEJ,EAAG,GAAKK,KAAKmB,IAAIrB,KAAKF,EAAIG,EAAEH,EAAG,GAAKI,KAAKmB,IAAIrB,KAAKD,EAAIE,EAAEF,EAAG,OApGlF,uBAwGC,SAAgBc,EAAWS,EAAWC,GAIrC,OAHAD,EAAEzB,GAAKgB,EAAEhB,EACTyB,EAAExB,GAAKe,EAAEf,EACTwB,EAAEvB,GAAKc,EAAEd,EACFuB,IA5GT,iBA8GC,SAAWT,EAAWS,EAAWC,GAUhC,OATID,aAAa1B,GAChB2B,EAAE1B,EAAIgB,EAAEhB,EAAIyB,EAAEzB,EACd0B,EAAEzB,EAAIe,EAAEf,EAAIwB,EAAExB,EACdyB,EAAExB,EAAIc,EAAEd,EAAIuB,EAAEvB,IAEdwB,EAAE1B,EAAIgB,EAAEhB,EAAIyB,EACZC,EAAEzB,EAAIe,EAAEf,EAAIwB,EACZC,EAAExB,EAAIc,EAAEd,EAAIuB,GAENC,IAxHT,sBA0HC,SAAgBV,EAAWS,EAAWC,GAUrC,OATID,aAAa1B,GAChB2B,EAAE1B,EAAIgB,EAAEhB,EAAIyB,EAAEzB,EACd0B,EAAEzB,EAAIe,EAAEf,EAAIwB,EAAExB,EACdyB,EAAExB,EAAIc,EAAEd,EAAIuB,EAAEvB,IAEdwB,EAAE1B,EAAIgB,EAAEhB,EAAIyB,EACZC,EAAEzB,EAAIe,EAAEf,EAAIwB,EACZC,EAAExB,EAAIc,EAAEd,EAAIuB,GAENC,IApIT,sBAsIC,SAAgBV,EAAWS,EAAWC,GAUrC,OATID,aAAa1B,GAChB2B,EAAE1B,EAAIgB,EAAEhB,EAAIyB,EAAEzB,EACd0B,EAAEzB,EAAIe,EAAEf,EAAIwB,EAAExB,EACdyB,EAAExB,EAAIc,EAAEd,EAAIuB,EAAEvB,IAEdwB,EAAE1B,EAAIgB,EAAEhB,EAAIyB,EACZC,EAAEzB,EAAIe,EAAEf,EAAIwB,EACZC,EAAExB,EAAIc,EAAEd,EAAIuB,GAENC,IAhJT,oBAkJC,SAAcV,EAAWS,EAAWC,GAUnC,OATID,aAAa1B,GAChB2B,EAAE1B,EAAIgB,EAAEhB,EAAIyB,EAAEzB,EACd0B,EAAEzB,EAAIe,EAAEf,EAAIwB,EAAExB,EACdyB,EAAExB,EAAIc,EAAEd,EAAIuB,EAAEvB,IAEdwB,EAAE1B,EAAIgB,EAAEhB,EAAIyB,EACZC,EAAEzB,EAAIe,EAAEf,EAAIwB,EACZC,EAAExB,EAAIc,EAAEd,EAAIuB,GAENC,IA5JT,mBA8JC,SAAaV,EAAWS,EAAWC,GAIlC,OAHAA,EAAE1B,EAAIgB,EAAEf,EAAIwB,EAAEvB,EAAIc,EAAEd,EAAIuB,EAAExB,EAC1ByB,EAAEzB,EAAIe,EAAEd,EAAIuB,EAAEzB,EAAIgB,EAAEhB,EAAIyB,EAAEvB,EAC1BwB,EAAExB,EAAIc,EAAEhB,EAAIyB,EAAExB,EAAIe,EAAEf,EAAIwB,EAAEzB,EACnB0B,IAlKT,kBAoKC,SAAYV,EAAWS,EAAWC,GACjC,IAAIlB,EAASQ,EAAER,SAIf,OAHAiB,EAAEzB,EAAIgB,EAAEhB,EAAIQ,EACZiB,EAAExB,EAAIe,EAAEf,EAAIO,EACZiB,EAAEvB,EAAIc,EAAEd,EAAIM,EACLiB,IAzKT,wBA2KC,SAAkBb,EAAeE,GAChC,OAAO,IAAIf,EACVM,KAAKsB,IAAIf,GAASP,KAAKsB,IAAIb,GAC3BT,KAAKuB,IAAId,GACTT,KAAKuB,IAAIhB,GAASP,KAAKsB,IAAIb,MA/K9B,6BAkLC,WACC,OAAOf,EAAO8B,WAAWxB,KAAKyB,SAAWzB,KAAK0B,GAAK,EAAG1B,KAAKU,KAAqB,EAAhBV,KAAKyB,SAAe,MAnLtF,iBAqLC,SAAWd,EAAWS,EAAWC,GAChC,OAAO,IAAI3B,EAAOM,KAAKK,IAAIM,EAAEhB,EAAGyB,EAAEzB,GAAIK,KAAKK,IAAIM,EAAEf,EAAGwB,EAAExB,GAAII,KAAKK,IAAIM,EAAEd,EAAGuB,EAAEvB,MAtL5E,iBAwLC,SAAWc,EAAWS,EAAWC,GAChC,OAAO,IAAI3B,EAAOM,KAAKM,IAAIK,EAAEhB,EAAGyB,EAAEzB,GAAIK,KAAKM,IAAIK,EAAEf,EAAGwB,EAAExB,GAAII,KAAKM,IAAIK,EAAEd,EAAGuB,EAAEvB,MAzL5E,kBA2LC,SAAYc,EAAWS,EAAWO,GACjC,OAAOP,EAAEQ,SAASjB,GAAGkB,SAASF,GAAUG,IAAInB,KA5L9C,uBA8LC,SAAiBA,GAChB,OAAO,IAAIjB,EAAOiB,EAAE,GAAIA,EAAE,GAAIA,EAAE,MA/LlC,0BAiMC,SAAoBA,EAAWS,EAAWC,GACzC,OAAOV,EAAEoB,QAAQX,KAlMnB,sBAsMC,WACC,OAAO,IAAI1B,EAAOsC,IAAUA,IAAUA,SAvMxC,KDYajB,EAAb,WACC,WAAmBpB,EAAkBC,EAAkBC,GAAY,yBAAhDF,IAA+C,KAA7BC,IAA6B,KAAXC,IADxD,yCAGC,WACC,OAAOH,EAAOuC,UAAUnC,KAAKoC,aAJ/B,qBAOC,WACC,MAAO,CAACpC,KAAKH,EAAGG,KAAKF,EAAGE,KAAKD,OAR/B,M,SA6BYJ,K,WAAAA,E,WAAAA,E,WAAAA,E,WAAAA,E,WAAAA,E,WAAAA,E,YAAAA,M,KAuDL,IA6CK0C,EAOAC,EAOAC,EA0BAC,EArFCC,EAAb,WAWC,aAAe,yBAVRC,YAUO,OATPC,kBASO,OARPC,WAQO,OAPP3C,OAOO,OANP4C,OAMO,OALPC,UAKO,OAJPC,UAIO,OAHPC,oBAGO,OAFPC,4BAEO,EACbjD,KAAK4C,MAAQ,GACb5C,KAAK+C,KAAO,GACZ/C,KAAKgD,gBAAkB,EACvBhD,KAAK0C,OAAS,IAAIzB,GAAO,GAAI,GAAI,GACjCjB,KAAK8C,KAAO,GACZ9C,KAAK2C,aAAe,GACpB3C,KAAKiD,uBAAyB,GAC9BjD,KAAKC,EAAIL,EAAOsD,WAChBlD,KAAK6C,EAAIjD,EAAOsD,WApBlB,oDAuBC,SAAiBC,GAChB,IAAIC,EAAa,GAajB,OAXApD,KAAK4C,MAAMS,SAAQ,SAACxC,IACY,IAA3BsC,EAAMG,QAAQzC,EAAEkC,OACnBK,EAAIG,KAAK1C,MAKXuC,EAAII,MAAK,SAAC3C,EAAGS,GACZ,OAAO6B,EAAMG,QAAQzC,EAAEkC,MAAQI,EAAMG,QAAQhC,EAAEyB,SAGzCK,MArCT,M,SA6CYf,K,QAAAA,E,QAAAA,E,QAAAA,E,SAAAA,M,cAOAC,K,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,OAAAA,M,cAOAC,O,aAAAA,I,aAAAA,I,aAAAA,I,aAAAA,I,aAAAA,I,aAAAA,I,aAAAA,I,aAAAA,I,aAAAA,I,aAAAA,I,cAAAA,I,cAAAA,I,cAAAA,I,cAAAA,I,cAAAA,I,cAAAA,I,cAAAA,I,cAAAA,I,cAAAA,I,eAAAA,M,cA0BAC,K,UAAAA,E,UAAAA,E,kBAAAA,E,mBAAAA,M,gBEpLNiB,EAAsB,CAC3BC,SAAU,GACVC,SAAKC,EACLC,WAAW,EACXC,aAAc,GACdC,0BAA2B,GAC3BC,IAAK,CAAEC,OAAQ,KAAMC,OAAQ,MAC7BC,aAAc,GACdC,qBAAiBR,EACjBS,MAAO,IA2CFC,EAAUC,wBAA+C,CAC9Dd,EACA,eAIKe,EAAU,SAACC,EAAD,GAAqD,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,QACtC,OAAQD,GACP,IAAK,aACJ,OAAO,eAAKjB,GAEb,QACC,KAAIiB,KAAQD,GAGX,MAAM,IAAIG,MAAJ,UAAaF,EAAb,wBAFLD,EAAcC,GAAQC,EAO1B,OAAO,eAAKF,IAOPI,EAAiB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAsB,EACrBC,qBAAWP,EAASf,GADC,mBACxCgB,EADwC,KACjCO,EADiC,KAE/C,OACC,cAACV,EAAQW,SAAT,CAAkBC,MAAO,CAACT,EAAOO,GAAjC,SAA6CF,K,QC3ExC,SAASK,EAAiBC,GAchC,OAbAA,EAAEC,SAAShC,SAAQ,SAACiC,EAASnE,GAC5B,IAAMoE,EAAyB,IAAItE,EAAM,EAAG,EAAG,GAC/CqE,EAAQ1C,MAAMS,SAAQ,SAACmC,GACtBD,EAAW1F,GAAK2F,EAAKC,OAAO5F,EAC5B0F,EAAWzF,GAAK0F,EAAKC,OAAO3F,EAC5ByF,EAAWxF,GAAKyF,EAAKC,OAAO1F,KAE7BwF,EAAW1F,EAAI0F,EAAW1F,EAAIyF,EAAQ1C,MAAMvC,OAC5CkF,EAAWzF,EAAIyF,EAAWzF,EAAIwF,EAAQ1C,MAAMvC,OAC5CkF,EAAWxF,EAAIwF,EAAWxF,EAAIuF,EAAQ1C,MAAMvC,OAE5C+E,EAAEC,SAASlE,GAAGuB,OAAS6C,KAEjBH,EAID,SAASM,EAAuBC,EAAgBC,GACtD,OAAO1F,KAAKC,KACXD,KAAKmB,IAAIsE,EAAG9F,EAAI+F,EAAG/F,EAAG,GACrBK,KAAKmB,IAAIsE,EAAG7F,EAAI8F,EAAG9F,EAAG,GACtBI,KAAKmB,IAAIsE,EAAG5F,EAAI6F,EAAG7F,EAAG,IClClB,IAEK8F,G,SAAAA,O,yBAAAA,I,kBAAAA,M,KCCL,IAMMC,EAA2D,SAACV,GAExE,IAA2D,GAAvD,CAAC5C,EAAYuD,IAAKvD,EAAYwD,KAAK1C,QAAQ8B,EAAEa,MAAa,CAG7D,IAAIC,EAAS,CAAC,KAAM,KAAM,MAE1Bd,EAAEC,SAAShC,SAAQ,SAACiC,GAEnB,IAAIa,EAAuB,GAQ3B,GANcb,EAAQc,iBAAiBF,GACjC7C,SAAQ,SAACxC,EAAGM,GACjBgF,EAAOhF,GAAKN,EAAE4E,UAIO,IAAlBU,EAAO9F,OAAc,CACxB,IAAMgG,EAAKzG,EAAOuC,UAAUgE,EAAO,GAAG/D,WAChCkE,EAAK1G,EAAOuC,UAAUgE,EAAO,GAAG/D,WAChCmE,EAAK3G,EAAOuC,UAAUgE,EAAO,GAAG/D,WAChCnC,EAAIqG,EAAGxE,SAASuE,GAAIG,MAAMD,EAAGzE,SAASuE,IAAKI,YAE3C5D,EAAIwD,EAAGrE,IAAIsE,GAAItE,IAAIuE,GAAIjG,OAAO,GACpCgF,EAAQrF,EAAIA,EACZqF,EAAQzC,EAAIA,MAIf,OAAOuC,GAOD,SAASsB,EAAkBC,EAAaC,GAkB9C,IAhBA,IAAMC,EAAQ,CACb,CAACxE,EAAYyE,GAAIzE,EAAY0E,IAC7B,CAAC1E,EAAYyE,GAAIxE,EAAY0E,GAC7B,CAAC3E,EAAY0E,GAAIzE,EAAY2E,GAE7B,CAAC5E,EAAY6E,GAAI7E,EAAY8E,IAC7B,CAAC9E,EAAY6E,GAAI5E,EAAY8E,GAE7B,CAAC/E,EAAY8E,GAAI9E,EAAY6E,IAC7B,CAAC7E,EAAY8E,GAAI7E,EAAY+E,GAE7B,CAAC/E,EAAY+E,EAAG/E,EAAY8E,GAC5B,CAAC9E,EAAY2E,EAAG3E,EAAY0E,IAIpB7F,EAAI,EAAGA,EAAI0F,EAAMxG,OAAQc,IACjC,GACEwF,EAAG5D,OAAS8D,EAAM1F,GAAG,IAAMyF,EAAG7D,OAAS8D,EAAM1F,GAAG,IAChDwF,EAAG5D,OAAS8D,EAAM1F,GAAG,IAAMyF,EAAG7D,OAAS8D,EAAM1F,GAAG,GAEjD,OAAO,EAIT,OAAO,ECpED,ICIKmG,EDJCC,EAAb,WAUC,WAAmB7D,GAAsB,yBAAtBA,WAAqB,KATxC8D,aAA0B,GASc,KARxCC,SAAsB,GAQkB,KANjCC,aAAuB,EAMU,KALjCC,aAAuB,EAKU,KAFxCC,cAA+B,CAAE3D,OAAQ,KAAMC,OAAQ,MAGtDlE,KAAK6H,iBAXP,4DAiBC,SAAyB5D,EAAiBC,GAIzC,IAAI4D,EAAS9H,KAAK+H,0BAA0B9D,EAAQC,GAKhD8D,EAAShI,KAAK+H,0BAA0B7D,EAAQD,GACpD+D,EAAOC,UAMP,IAAIC,EAAkCJ,EAgCtC,OA/BAE,EAAO3E,SAAQ,SAAC8E,GAGf,GAAoB,IAAhBA,EAAK9H,OACR6H,EAAc3E,KAAK4E,QACb,GAAoB,IAAhBA,EAAK9H,OAAc,CAI7B,IADA,IAAI+H,GAAe,EACVjH,EAAI,EAAGA,EAAI2G,EAAOzH,OAAQc,IAAK,CACvC,IAAIwE,EAAKmC,EAAO3G,GAChB,GAAkB,IAAdwE,EAAGtF,QACFsF,EAAG,GAAG7C,OAASqF,EAAK,GAAGrF,MAAQ6C,EAAG,GAAG7C,OAASqF,EAAK,GAAGrF,KAAM,CAC/DsF,GAAe,EACf,OAQEA,GACJC,QAAQC,IAAR,wDACkDH,EAAK,GAAGlF,uBAD1D,YACoFkF,EAAK,GAAGnF,gBAD5F,OAC6GmF,EAAK,GAAGpF,KADrH,cAC+HoF,EAAK,GAAGlF,uBADvI,YACiKkF,EAAK,GAAGnF,gBADzK,OAC0LmF,EAAK,GAAGpF,MACjMoF,OAMGD,IAjET,8BAwEC,WACC,GAAIlI,KAAKwH,aAAanH,QAAU,EAC/B,MAAMuE,MAAM,qCAMb,IAHA,IAAI2D,EAAwB,GAGnBpH,EAAI,EAAGA,EAAInB,KAAKwH,aAAanH,OAAQc,IAAK,CAClD,IAAK,IAAIqH,EAAIrH,EAAI,EAAGqH,EAAIxI,KAAKwH,aAAanH,OAAQmI,IAAK,CACtD,IAAMC,EAAgBzI,KAAK0I,yBAC1B1I,KAAKwH,aAAarG,GAClBnB,KAAKwH,aAAagB,IAEnBD,EAAShF,KAAT,MAAAgF,EAAQ,YAASE,IAKlB,GAAIzI,KAAKwH,aAAarG,GAAG8E,OAASzD,EAAYwD,IAAK,CAClD,IAAMyC,EAAgBzI,KAAK0I,yBAC1B1I,KAAKwH,aAAarG,GAClBnB,KAAKwH,aAAarG,IAEnBkH,QAAQC,IAAI,gBAAiBG,GAC7BF,EAAShF,KAAT,MAAAgF,EAAQ,YAASE,KAGnB,OAAOF,IApGT,uCA8GC,SAA0BtE,EAAiBC,GAC1C,IAAI2C,EAA0B,GA6D9B,OA5DA5C,EAAOoB,SAAShC,SAAQ,SAACsD,GACxB,IACIgC,EADAC,EAAmB1G,IA6BvB,GA1BAgC,EAAOmB,SAAShC,SAAQ,SAACuD,GAExB,IAAMiC,EAAOlC,EAAGP,iBAAiB,CAAC,KAAM,KAAM,OACxC0C,EAAe,CACpB5I,KAAK6I,IAAIF,EAAK,GAAGpD,OAAOuD,QAAQlH,SAAS8E,EAAG/D,GAAGzC,IAAIwG,EAAG3G,IACtDC,KAAK6I,IAAIF,EAAK,GAAGpD,OAAOuD,QAAQlH,SAAS8E,EAAG/D,GAAGzC,IAAIwG,EAAG3G,IACtDC,KAAK6I,IAAIF,EAAK,GAAGpD,OAAOuD,QAAQlH,SAAS8E,EAAG/D,GAAGzC,IAAIwG,EAAG3G,KAGjDgJ,EAAOrC,EAAGR,iBAAiB,CAAC,KAAM,KAAM,OACxC8C,EAAe,CACpBhJ,KAAK6I,IAAIE,EAAK,GAAGxD,OAAOuD,QAAQlH,SAAS6E,EAAG9D,GAAGzC,IAAIuG,EAAG1G,IACtDC,KAAK6I,IAAIE,EAAK,GAAGxD,OAAOuD,QAAQlH,SAAS6E,EAAG9D,GAAGzC,IAAIuG,EAAG1G,IACtDC,KAAK6I,IAAIE,EAAK,GAAGxD,OAAOuD,QAAQlH,SAAS6E,EAAG9D,GAAGzC,IAAIuG,EAAG1G,KAGjDO,EAAMN,KAAKM,IAAL,MAAAN,KAAYgJ,EAAP,OAAwBJ,IAIrCtI,EAAMoI,GAAoBjC,EAAG7D,OAAS8D,EAAG9D,OAC5C8F,EAAmBpI,EACnBmI,EAAS/B,WAKChD,IAAX+E,GAEAC,GDlJmD,KCkJW1I,KAAKyB,UACnE+E,EAAkBiC,EAAQhC,IAO1BA,EAAGjE,OAAOsG,QAAQG,WAAWR,EAAOjG,OAAOsG,SAAW,GACrD,CACDnC,EAAMtD,KAAK,CAACoD,EAAIgC,IAChB,IAAM/B,EAAK+B,EACXN,QAAQC,IACP,sBADD,UAEIrE,EAAOgC,KAFX,YAEmBU,EAAG1D,uBAFtB,YAEgD0D,EAAG3D,gBAFnD,OAEoE2D,EAAG5D,MAFvE,UAGImB,EAAO+B,KAHX,YAGmBW,EAAG3D,uBAHtB,YAGgD2D,EAAG5D,gBAHnD,OAGoE4D,EAAG7D,MACtE6F,EACAlC,EAAkBiC,EAAQhC,SAG3BE,EAAMtD,KAAK,CAACoD,IACZ0B,QAAQC,IAAR,uBACiBrE,EAAOgC,KADxB,YACgCU,EAAG1D,uBADnC,YAC6D0D,EAAG3D,gBADhE,OACiF2D,EAAG5D,KADpF,gCACgH6F,GAC/GD,MAII9B,IA5KT,4BAgLC,WACC7G,KAAKwH,aAAexH,KAAKoJ,mBACzBpJ,KAAKyH,SAAWzH,KAAKqJ,eAErBrJ,KAAKwH,aAAanE,SAAQ,SAACiG,GAAD,OAAanE,EAAiBmE,MACxDtJ,KAAKyH,SAASpE,SAAQ,SAACiG,GAAD,OAAanE,EAAiBmE,QArLtD,0BAwLC,WACC,OAAOtJ,KAAK0D,SAAS6F,QAAO,SAACnE,GAC5B,OAAkD,IAA3C,CAAC5C,EAAYgH,SAASlG,QAAQ8B,EAAEa,WA1L1C,8BA8LC,WACC,OAAOjG,KAAK0D,SAAS6F,QAAO,SAACnE,GAC5B,OAA+D,IAAxD,CAAC5C,EAAYuD,IAAKvD,EAAYwD,KAAK1C,QAAQ8B,EAAEa,WAhMvD,mCAwMC,WAAyB,IAAD,OACvBjG,KAAKwH,aAAanE,SAAQ,SAACoG,EAAOC,GACjCD,EAAMpE,SAAShC,SAAQ,SAACsG,EAAcC,GACrC,EAAKnC,SAASpE,SAAQ,SAAC+B,GACtBA,EAAEC,SAAShC,SAAQ,SAACwG,GACMnE,EAAuBiE,EAAajH,OAAQmH,EAASnH,SAKtDoH,IACvBH,EAAa/G,MAAMS,SAAQ,SAAC0G,GAC3BF,EAASjH,MAAMS,SAAQ,SAAC2G,GACvB,IHlL8BC,EGkLxBC,EAAgBxE,EAAuBqE,EAAUtE,OAAQuE,EAAMvE,QACjEyE,GF1N6B,GE2NhC,EAAK1C,aAAakC,GAAQrE,SAASuE,GAAejH,aAAaY,KAAK,CACnE+B,SHrL4B2E,EGqLIJ,EHnLnC,CAAE7G,eADmEiH,EAApEjH,eACiBF,KADmDmH,EAApDnH,KACOC,KAD6CkH,EAA9ClH,KACOE,uBADuCgH,EAAxChH,yBGqL1ByB,KAAMmB,EAAgBsE,UACtBC,YAAahF,EAAEa,KACfoE,KAAM,CAAEC,SAAUJ,2BA3N7B,K,iBCIY5C,K,YAAAA,E,qBAAAA,M,KA4CZ,I,IAAMiD,EACC,GADDA,EAEF,ECrCJ,IAAMC,GAAc,mBAClBnI,EAAYyE,GAAK,WADC,cAElBzE,EAAY0E,GAAK,WAFC,cAGlB1E,EAAY8E,GAAK,WAHC,cAIlB9E,EAAY6E,GAAK,WAJC,cAMlB5E,EAAY2E,EAAI,WANE,cAOlB3E,EAAY0E,EAAI,WAPE,cAQlB1E,EAAY8E,EAAI,WARE,cASlB9E,EAAY+E,EAAI,WATE,cAUlB/E,EAAYmI,EAAI,WAVE,GAadC,EAAU,MACVC,EAAU,OACVC,GAAkB,mBACtBvI,EAAYyE,GAAK4D,GADK,cAEtBrI,EAAY0E,GAAK2D,GAFK,cAGtBrI,EAAY8E,GAAKwD,GAHK,cAItBtI,EAAY6E,GAAKyD,GAJK,cAMtBrI,EAAY2E,EAAIyD,GANM,cAOtBpI,EAAY0E,EAAI0D,GAPM,cAQtBpI,EAAY8E,EAAIuD,GARM,cAStBrI,EAAY+E,EAAIsD,GATM,cAUtBrI,EAAYmI,EAAIE,GAVM,GAgBjB,SAASE,IAAU,IAAD,EACEC,qBAAWxG,GADb,mBACjBG,EADiB,KACVO,EADU,KAElBtB,EAAWe,EAAMf,SAEnBqH,EAAMC,IAAMC,YACZC,EAAUF,IAAMC,YAEhBE,EAAeC,iBAAuB,MAoG1C,OAFAC,qBA/FA,WACC,GAAKN,KAAOrH,EAASrD,QAAU,GAA/B,CAGAgI,QAAQiD,KAAK,oBACb,IACIzE,EADE0E,EAAU,IAAIhE,EAAmB7D,GAEvC,IACCmD,EAAQ0E,EAAQC,mBACf,MAAOC,GAMR,OALApD,QAAQC,IAAImD,QACZzG,EAAS,CACRN,KAAM,QACNC,QAAU8G,EAAUC,aAKtB,IAAIC,EAAgB,GAChBC,EAAgB,GAEdC,EAAkC,SAAC5B,GACxC,MAAM,GAAN,OAAUA,EAAEhH,uBAAZ,YAAsCgH,EAAElH,MAAxC,OAA+CkH,EAAEjH,iBA+BlDuI,EAAQ/D,aAAanE,SAAQ,SAACyI,GAAD,OA7BR,SAACA,GACrB,IAAMC,EAAoBC,OAAOC,OAAO5J,GACxCyJ,EAAMzG,SAAShC,SAAQ,SAAC4G,EAAGiC,GAC1BP,EAAMpI,KAAN,2BACI0G,GADJ,IAECnH,KAAMmH,EAAEnH,KACRC,KAAMkH,EAAElH,KAAK2I,WAAW1K,OAAO,GAC/BmL,GAAIN,EAAQ5B,GACZmC,MAAO5B,EAASP,EAAElH,MAClBsJ,MAAON,EAAkBzI,QAAQ2G,EAAElH,MAAuB,KAI3D,IAAIsC,EAAWyG,EAAMzG,SACjB6G,EAAQ,GAAKA,EAAQ7G,EAAShF,QACjCuL,EAAMrI,KAAK,CACV+I,OAAQT,EAAQxG,EAAS6G,EAAQ,IACjCK,OAAQV,EAAQ5B,GAChB/E,MAAO,EACPkH,MAvDmB,UAwDnBI,SAAUlF,EAASmF,cASiBC,CAAaZ,MAGrDjF,EAAMxD,SAAQ,SAAC+B,GACd,IAAMuB,EAAKvB,EAAE,GACb,GAAiB,IAAbA,EAAE/E,OAAc,CACnB,IAAMuG,EAAKxB,EAAE,GACbwG,EAAMrI,KAAK,CACV+I,OAAQT,EAAQjF,GAChB2F,OAAQV,EAAQlF,GAChBzB,MAAO,EACPkH,MAAOxB,EAAajE,EAAG5D,MACvByJ,SAAUlF,EAASqF,WAKtBtE,QAAQC,IAAI,sBAAuBqD,EAAOC,GAtEzB,MAyEJ,CACXT,EAAayB,QAA2BC,YACxC1B,EAAayB,QAA2BE,cAFrCC,EAzEY,KAyETC,EAzES,MDAZ,WAONC,GACE,IANDtB,EAMA,EANAA,MACAC,EAKA,EALAA,MACAsB,EAIA,EAJAA,OACAlI,EAGA,EAHAA,SAGA,EAuBGiI,EArBHE,cAFA,MAES,SAACC,GAAD,OAAYA,EAAEjB,IAFvB,EAIAkB,GAmBGJ,EApBHK,WAoBGL,EAnBHI,WAJA,EAuBGJ,EAlBHM,gBALA,MAKW,SAACH,GACX,YAAmBxJ,IAAZwJ,EAAEhB,MAAsBgB,EAAEhB,MAAQ,gBAN1C,IAuBGa,EAfHO,kBARA,MAQa,OARb,IAuBGP,EAdHQ,uBATA,MASkB,IATlB,IAuBGR,EAbHS,yBAVA,MAUoB,EAVpB,IAuBGT,EAZHU,kBAXA,MAWa,GAXb,EAYAC,EAWGX,EAXHW,aAZA,EAuBGX,EAVHY,kBAbA,MAaa,SAACT,GACb,YAAmBxJ,IAAZwJ,EAAEhB,MAAsBgB,EAAEhB,MAAQ,QAd1C,IAuBGa,EAPHa,yBAhBA,MAgBoB,GAhBpB,IAuBGb,EANHc,uBAjBA,MAiBkB,IAjBlB,IAuBGd,EALHe,yBAlBA,MAkBoB,QAlBpB,IAuBGf,EAJHgB,oBAnBA,MAmBe,EAnBf,IAuBGhB,EAHHiB,aApBA,MAoBQ,IApBR,IAuBGjB,EAFHkB,cArBA,MAqBS,IArBT,EAsBAC,EACGnB,EADHmB,aAIKC,EAAe1C,EACf2C,EAAe1C,EAGf2C,EAAIC,IAAO7C,EAAOwB,GAAQsB,KA4HhC,SAAgBvJ,GACf,OAAiB,OAAVA,GAAmC,kBAAVA,EAAqBA,EAAMwJ,UAAYxJ,UA5HtDtB,IAAdyJ,IAAyBA,EAAY,SAACsB,EAAUxN,GAAX,OAAyBoN,EAAEpN,KACpE,IAAMyN,EAA+B,oBAApBb,EAAiC,KAAOS,IAAO5C,EAAOmC,GAIvEpC,EAAQ0C,EACRzC,EAAQ0C,EAGR,IAAMO,EAAYL,MAEZM,EAAYN,IACN5C,GACVO,IAAG,gBAAUhL,EAAV,EAAG+K,MAAH,OAAkBqC,EAAEpN,MACvBmJ,UAAS,SAAC8C,EAAGjM,GAGb,OAAImN,EAAanN,GAAGqL,WAAalF,EAASmF,SAClC,EAED,MAEPsC,UAAS,SAAC3B,EAAGjM,GAGb,OAAImN,EAAanN,GAAGqL,WAAalF,EAASmF,SAClC,IAED,UAEY7I,IAAjBgK,GAA4BiB,EAAUE,SAASnB,QAC9BhK,IAAjBqK,GAA4Ba,EAAUC,SAASd,GAEnD,IAAMe,EAAaR,IACD7C,GAChBsD,MAAM,OAAQH,GACdG,MAAM,SAAUJ,GAChBK,GAAG,QA0FL,WACCC,EACEC,KAAK,MAAM,SAAChC,GAAD,OAAYA,EAAEd,OAAOzM,KAChCuP,KAAK,MAAM,SAAChC,GAAD,OAAYA,EAAEd,OAAOxM,KAChCsP,KAAK,MAAM,SAAChC,GAAD,OAAYA,EAAEb,OAAO1M,KAChCuP,KAAK,MAAM,SAAChC,GAAD,OAAYA,EAAEb,OAAOzM,KAElCuP,EAAOD,KAAK,aAAa,SAAChC,GAAD,0BAAyBA,EAAEvN,EAA3B,aAAiCuN,EAAEtN,EAAnC,WA/FpBwP,EAAMd,IACHtB,GACPkC,KAAK,QAASlB,GACdkB,KAAK,SAAUjB,GACfiB,KAAK,UAAW,EAAElB,EAAQ,GAAIC,EAAS,EAAGD,EAAOC,IACjDiB,KAAK,QAAS,qDAGhBE,EAAIC,KAAK,IAET,IAAMC,EAAIF,EAAIG,OAAO,KAEfN,EAAOK,EACXC,OAAO,KACPL,KAAK,iBAAkBtB,GACvBsB,KAAK,eAA2C,oBAApBrB,EAAiCA,EAAkB,MAC/EqB,KAAK,iBAAkBpB,GACvB0B,UAAU,QACVC,KAAK/D,GACLgE,KAAK,QACLR,KAAK,oBAAoB,SAAChC,GAC1B,MAAmB,SAAfA,EAAEZ,SACE,IAED,QAEP4C,KAAK,SAAUvB,GAEXwB,EAASG,EACbC,OAAO,KACPC,UAAU,KACVC,KAAKhE,GACLkE,QACAJ,OAAO,KACPK,KAgEF,SAAcd,GAkBb,OAAOR,MAAUU,GAAG,SAjBpB,SAAqBa,GACfA,EAAMC,QAAQhB,EAAWiB,YAAY,IAAKC,UAC/CH,EAAMI,QAAQC,GAAKL,EAAMI,QAAQtQ,EACjCkQ,EAAMI,QAAQE,GAAKN,EAAMI,QAAQrQ,KAcQoP,GAAG,QAX7C,SAAiBa,GAChBA,EAAMI,QAAQC,GAAKL,EAAMlQ,EACzBkQ,EAAMI,QAAQE,GAAKN,EAAMjQ,KASoCoP,GAAG,OANjE,SAAmBa,GACbA,EAAMC,QAAQhB,EAAWiB,YAAY,GAC1CF,EAAMI,QAAQC,GAAK,KACnBL,EAAMI,QAAQE,GAAK,QA/EdC,CAAKtB,IAENuB,EAAOlB,EACXI,OAAO,UACPL,KAAK,SAAU5B,GACf4B,KAAK,iBAAkB1B,GACvB0B,KAAK,eAAgB3B,GACrB2B,KAAK,OAAQ7B,GACb6B,KAAK,IAAKzB,GAGR6C,EAAY,IAAIC,KACpBpB,EACEH,GAAG,aAAa,SAAUa,EAAO3C,GACjCoB,IAAUxO,MACR0Q,OAAO,UACPtB,KAAK,IAAKuB,EAA+B,EAAbhD,KAC1B,IAAI8C,MAAOG,UAAYJ,EAAUI,UAAY,MAChD5L,EAAS,CACRN,KAAM,kBACNC,QAASyI,IAEVoD,EAAY,IAAIC,SAGjBvB,GAAG,YAAY,SAAUa,EAAO3C,GAEhCoB,IAAUxO,MAAM0Q,OAAO,UAAUtB,KAAK,IAAKuB,EAAkBhD,KAEzD,IAAI8C,MAAOG,UAAYJ,EAAUI,UAAY,IAChD5L,EAAS,CACRN,KAAM,kBACNC,aAASf,OAMb,IAAMiN,EAAUxB,EACdI,OAAO,QACPqB,MAAK,SAAC1D,GAAD,OAAOA,EAAErK,QACdqM,KAAK,cAAe,UACpBA,KAAK,YAAa7E,GAClB6E,KAAK,IAAK7E,GACV6E,KAAK,QAAS,kBAEZR,GAAGO,EAAKC,KAAK,gBAAgB,SAAChC,GAAD,OAAYwB,EAAExB,EAAElB,UAE7B,MAAhBkC,GAAsBA,EAAa2C,MAAK,kBAAM/B,EAAWgC,UAsC7D,IAAML,EAA6C,SAACvP,GACnD,OAAI6P,GACI7P,EAAM6P,GAEP7P,GAEJ8P,QAAYtN,EACZqN,QAAiCrN,EAC/BuN,GAAO3C,MAAUU,GAAG,QAAQ,SAACzD,GAClC+D,EAAEJ,KAAK,YAAc8B,GAAYzF,EAAEyF,WAC/BA,KACHD,GAAa/Q,KAAKC,KAAK+Q,GAAUE,GACjC5B,EAAE6B,MAAM,eAAgB,EAAIJ,IAC5BV,EAAKnB,KAAK,IAAKzB,EAAasD,IAAY7B,KAAK,eAAgB3B,EAAkBwD,IAC/EJ,EAAQzB,KAAK,YAAa7E,EAAe0G,IAAY7B,KAAK,IAAK7E,EAAY0G,QAI7E3B,EAAIQ,KAAKqB,IAAarB,KAAKqB,GAAKD,UAAkB1C,KAE3CxC,OAAOsF,OAAOhC,EAAIiB,OAAQ,CAAEgB,OAAQ,CAAEnF,MAAO,QC3InDoF,CACC,CACC7F,QACAC,QACAsB,OAAQnC,EAAI6B,QACZ5H,YAED,CACCkJ,MAAOnB,EACPoB,OAAQnB,IAIV3E,QAAQoJ,QAAQ,uBAGC,CAAC/N,IAGlB,qCACC,8BAAMe,EAAMX,eACZ,sBAAK4N,UAAU,wCAAwC3G,IAAKI,EAA5D,UACC,sBAAKuG,UAAU,6BAAf,UACC,qBAAK3G,IAAKA,IACTtG,EAAML,iBACN,sBACCsN,UAAU,kIADX,UAQC,0CAAajN,EAAML,gBAAgBnB,0BACnC,4CACWwB,EAAML,gBAAgBrB,KADjC,IACwC0B,EAAML,gBAAgBpB,kBAE9D,gDACe,IACbyB,EAAML,gBAAgBzB,aAAa8L,KAAI,SAACtN,GAAD,OACvC,gCACEA,EAAEiJ,YADJ,MACoBjJ,EAAEmE,uBAO3B,qBAAKyF,IAAKG,EAASmG,MAAO,CAAEM,SAAU,WAAYC,QAAS,EAAGC,WAAY,gB,8DC5KjEC,EAAb,WAGC,WAAYC,GAAc,yBAF1BA,UAEyB,OACXnO,IAATmO,IACH/R,KAAK+R,KAAOA,GALf,mFASC,4BAAAlR,EAAA,8DACkB+C,GAAb5D,KAAK+R,KADV,sBAEQnN,MAAM,qBAFd,uBAIkB5E,KAAK+R,KAAKjB,OAJ5B,cAIKA,EAJL,yBAKQ9Q,KAAKgS,OAAOlB,IALpB,gDATD,0EAiBC,SAAOA,GACN,MAAO,CACNmB,IAAKjS,KAAKkS,WAAWpB,GACrBpN,SAAU1D,KAAKmS,eAAerB,MApBjC,wBAwBC,SAAWA,GACV,OAAOA,EACLsB,MAAM,MACN3D,KAAI,SAAC4D,EAAMnG,GAAP,OAAiBA,EAAMR,WAAa,KAAO2G,KAC/CzC,KAAK,QA5BT,4BAwCC,SAAekB,GACd,IAsDIwB,EAtDAC,EAAoB,GAGlBC,EAAa,WAClB,MAAO,CACNC,gBAAiB,GACjBpN,SAAU,GACVY,KAAMzD,EAAYkQ,UAGdC,EAAa,WAClB,OAAO,IAAIlQ,GAGNmQ,EAAc,WAEnBC,EAAe/P,KAAOA,IAAK+P,GAC3BC,EAAezN,SAAS9B,KAAKsP,IAG1BC,EAAiBN,IACjBK,EAAiBF,IASfI,EAA+B,SACpCxR,GAC6D,IAAD,EACxDyR,GAAG,mBACLxQ,EAAYuD,IAAM,GADb,cAELvD,EAAYwD,IAAM,GAFb,cAGLxD,EAAYgH,QAAU,GAHjB,GAKP,YAAU5F,IAANrC,EACIyR,EAED,CACNA,EAGAhH,OAAOiH,KAAK1R,GAAG2R,QAAO,SAACrS,EAAQS,GAAT,OAAqBC,EAAEV,GAAKU,EAAED,GAAKT,EAAIS,OAG3D6R,EAA4BJ,IAG5BK,EAA8C,GAM9CC,GAA0B,EAExBC,EAAsB,WAC3BhB,EAAwB,CACvBiB,OAAQ,GACRC,UAAW,GACXC,aAAc,CAAC7T,EAAOsD,cAoOxB,OA/NA4N,EAAKsB,MAAM,MAAM/O,SAAQ,SAACgP,GAEzB,GAAIA,EAAKqB,WAAW,SAAWrB,EAAKqB,WAAW,UAAW,CAEzD,IAAI7T,EAAI8T,WAAWtB,EAAKrR,MAAM,GAAI,IAAI4S,QAClC9T,EAAI6T,WAAWtB,EAAKrR,MAAM,GAAI,IAAI4S,QAClC7T,EAAI4T,WAAWtB,EAAKrR,MAAM,GAAI,IAAI4S,QAElC7Q,EAAOsP,EAAKrR,MAAM,GAAI,IAAI4S,OAC1BC,EAAcxB,EAAKrR,MAAM,GAAI,IAAI4S,OACjCE,EAAUzB,EAAKrR,MAAM,GAAI,IAAI4S,OAC7BG,EAAwBC,SAAS3B,EAAKrR,MAAM,GAAI,IAAI4S,QAGpDnB,EAAkBJ,EAAKrR,MAAM,GAAI,IACrC8R,EAAeL,gBAAkBA,EAGjC,IAAMjN,EAAa,CAClBC,OAAQ,IAAIxE,EAAMpB,EAAGC,EAAGC,GACxBgD,OACA+Q,UACAD,cACAE,yBAIDZ,ETsFG,SAA6B3N,GACnC,QAAQ,GACP,KAAKA,EAAKqO,eAAexR,EACxB,OAAOG,EAAYuD,IACpB,KAAKP,EAAKqO,eAAevR,EACxB,OAAOE,EAAYwD,IACpB,QACC,OAAOxD,EAAYgH,SS7FQyK,CAAoBzO,OAIP,IAAnCqN,EAAe7P,iBAClB6P,EAAe9P,KAAOyC,EAAKqO,YAC3BhB,EAAe7P,eAAiB+Q,EAChClB,EAAe5P,uBAAyBwP,GAMrCsB,IAA0BlB,EAAe7P,iBAC5C4P,KACAC,EAAiBF,KACF5P,KAAOyC,EAAKqO,YAC3BhB,EAAe7P,eAAiB+Q,EAChClB,EAAe5P,uBAAyBwP,GAGzCI,EAAejQ,MAAMW,KAAKiC,GAI3B,GAAI6M,EAAKqB,WAAW,OAAQ,CAE3Bd,IAF2B,MAKXG,EAA6BI,GALlB,mBAKtB5R,EALsB,KAKnB0E,EALmB,KAS3BkN,EAA4B5R,EAC5BuR,EAAe7M,KAAOA,EAItB6M,EAAiBhN,EAAgCgN,GAGjDP,EAAOhP,KAAKuP,GAGZA,EAAiBN,IACjBK,EAAiBF,IAIlB,GAAIN,EAAKqB,WAAW,cAAe,CAClCL,GAA0B,EAmC1B,GAhC0B,CACzB,6CACA,6CAEiBhQ,SAAQ,SAAC6Q,EAAiB/S,GAC3C,GAAIkR,EAAKqB,WAAWQ,GAAkB,CACrC,IAmBuB,EAnBnBX,EAASlB,EACXuB,OACA5S,MAAMkT,EAAgB7T,OAAS,EAAGgS,EAAKhS,QACvCqL,WACAyI,WAAW,IAAK,IAChB/B,MAAM,KAcR,GAXU,IAANjR,IACHmS,IAIIhB,EAAsBiB,OAAOlT,OAAS,GACzC+S,EAAgB7P,KAAK+O,IAKnBiB,EAAOlT,OAAS,GACnB,EAAAiS,EAAsBiB,QAAOhQ,KAA7B,oBAAqCgQ,QAMpClB,EAAKqB,WAAW,sBAAuB,CAC1C,IACIU,EADW/B,EAAKgC,QAAQ,qBAAsB,IACxBC,MACzB,IAAIC,OAEH,8HAGF,GAAkB,MAAdH,GAA4C,IAAtBA,EAAW/T,OAAkB,CACtD+T,EAAaA,EAAWpT,MAAM,GAC9B,IAAIwT,EAAoBR,SAASI,EAAW,IAAM,EAC9CK,EAAST,SAASI,EAAW,IAAM,EACnCM,EAAc,CACjBf,WAAWS,EAAW,IACtBT,WAAWS,EAAW,IACtBT,WAAWS,EAAW,KAEnBO,EAAchB,WAAWS,EAAW,IAG6B,qBAA1D9B,EAAsBmB,aAAae,KAC7ClC,EAAsBmB,aAAae,GAAqB5U,EAAOsD,YAGhEoP,EAAsBmB,aAAae,GAAmBI,SAASH,EAAQE,GAGlEE,MAAMC,QAAQxC,EAAsBkB,UAAUgB,MAClDlC,EAAsBkB,UAAUgB,GAAqB,IAEtDlC,EAAsBkB,UAAUgB,GAAmBC,GAAUC,SAK3DrB,IACHD,EAAgB7P,KAAK+O,GACrBgB,KAGDD,GAA0B,KAK5BD,EAAgB/P,SAAQ,SAAC0R,GACxB,IAAMC,EAAoBzC,EAAOhJ,QAAO,SAACnE,GACxC,OAA6D,IAAtD2P,EAAexB,OAAOjQ,QAAQ8B,EAAEqN,oBAIlCwC,EAAKF,EAAevB,UAAUxS,MAAM,GACpCkU,EAAKH,EAAetB,aAAazS,MAAM,GAG7CiU,EAAG5R,SAAQ,SAAC8R,EAAUC,GACrBJ,EAAkB3R,SAAQ,SAACyI,GAC1B,IAAIuJ,EAAaC,IAAMxJ,EAAO,CAAEyJ,sBAAsB,IACtDF,EAAW5C,gBAAkB4C,EAAW5C,iBAAmB2C,EAAgB,GAAG1J,WAC9E2J,EAAWG,wBAAyB,EACpCH,EAAWhQ,SAAShC,SAAQ,SAACsP,EAAY8C,GACxC9C,EAAW1P,uBAAyBoS,EAAW5C,gBAC/CE,EAAW/P,MAAMS,SAAQ,SAACqS,EAASC,GAClC,IAAIC,EAAYF,EAAQjQ,OAAOuD,QAC3B6M,EAAYjW,EAAOsD,WAIvBmF,QAAQC,IAAI,qBAAsBsN,GAClCC,EAAUhW,EACT+V,EAAU/V,EAAIsV,EAAS,GAAG,GAC1BS,EAAU9V,EAAIqV,EAAS,GAAG,GAC1BS,EAAU7V,EAAIoV,EAAS,GAAG,GAC3BU,EAAU/V,EACT8V,EAAU/V,EAAIsV,EAAS,GAAG,GAC1BS,EAAU9V,EAAIqV,EAAS,GAAG,GAC1BS,EAAU7V,EAAIoV,EAAS,GAAG,GAC3BU,EAAU9V,EACT6V,EAAU/V,EAAIsV,EAAS,GAAG,GAC1BS,EAAU9V,EAAIqV,EAAS,GAAG,GAC1BS,EAAU7V,EAAIoV,EAAS,GAAG,GAI3B,IAAMW,EAAIZ,EAAGE,GACbS,EAAYA,EAAU7T,IAAI8T,GAE1BzN,QAAQC,IAAI,gBAAiBuN,GAC7BxN,QAAQC,IAAI,2BAA4BuN,EAAU1M,WAAWyM,IAG7DF,EAAQjQ,OAASoQ,EAAUE,UAC3BpD,EAAW/P,MAAM+S,GAAUD,KAG5B/C,EAAW7P,KAAOA,IAAK6P,GACvB0C,EAAWhQ,SAASoQ,GAAU9C,KAK/B0C,EAAavP,EAAgCuP,GAC7C9C,EAAOhP,KAAK8R,YAKfhN,QAAQC,IAAI,mBAAoB8K,GAChC/K,QAAQC,IAAI,2BAA4BiK,GAEjCA,MA5UT,KCVMyD,EAAY,uCAAG,WAAO7J,GAAP,iBAAAtL,EAAA,sEACGoV,MAAM,mCAAD,OAAoC9J,EAApC,SADR,cACd+J,EADc,gBAEEA,EAASpF,OAFX,cAEdqF,EAFc,yBAGbA,GAHa,2CAAH,sDAMX,SAASC,IAAe,IAAD,EACHtL,qBAAWxG,GADR,mBACtBG,EADsB,KACfO,EADe,KAGvBqR,EAAe,WACpBrR,EAAS,CACRN,KAAM,YACNC,SAAS,KAGL2R,EAAc,WACnBtR,EAAS,CACRN,KAAM,YACNC,SAAS,KAGL4R,EAAiB,SAAC5S,GACvBqB,EAAS,CACRN,KAAM,MACNC,QAAShB,KAGL6S,EAAqB,SAACrK,GAC3BnH,EAAS,CACRN,KAAM,eACNC,QAASwH,KAILsK,EAAiB,SAAC/S,GACvBsB,EAAS,CACRN,KAAM,WACNC,QAASjB,KAGLgT,EAAa,WAClB1R,EAAS,CACRN,KAAM,aACNC,QAAS,QAKLgS,EAAS,uCAAG,WAAOxK,GAAP,eAAAtL,EAAA,6DACjB6V,IACAL,IAFiB,KAGL,IAAIvE,EAHC,SAGyBkE,EAAa7J,GAHtC,mBAGXxI,EAHW,KAGYqO,OAHZ,gBAIjBuE,EAAe5S,GACf8S,EAAe9S,EAAID,UACnB8S,EAAmBrK,GACnBmK,IAPiB,4CAAH,sDAWfjL,qBAAU,WACT,IACMc,EADM,IAAIyK,gBAAgBC,OAAOC,SAASC,QACjCC,IAAI,MACnB3O,QAAQC,IAAI,KAAM6D,GACP,OAAPA,GACHwK,EAAUxK,KAET,IAGH,IAuBIgK,EAC2B,EAxBzBc,EAAsD,uCAAG,WAAOlH,GAAP,mBAAAlP,EAAA,yDAEpD,QADNqW,EAD0D,UACrDnH,EAAMxD,OAA4B4K,aADmB,aACtD,EAA0CC,KAAK,IADO,wBAG7DV,IAEAL,IAGAhO,QAAQiD,KAAK,4BACbjD,QAAQiD,KAAK,qBATgD,SAU3C,IAAIwG,EAAWoF,GAAWG,WAViB,OAUvD1T,EAVuD,OAW7D0E,QAAQoJ,QAAQ,qBAGhB8E,EAAe5S,GACf8S,EAAe9S,EAAID,UAGnB2E,QAAQoJ,QAAQ,4BAChB6F,WAAWhB,EAAa,KAnBqC,4CAAH,sDAwBxD7R,EAAMf,SAASrD,OAAS,IAC3B8V,EACC,sBAAKzE,UAAU,OAAf,UACC,qBAAKA,UAAU,OAAf,iCACA,0BACCA,UAAU,6CACVxM,MAAK,UAAET,EAAMd,WAAR,aAAE,EAAWsO,IAClBsF,UAAQ,QAMZ,IAAMC,EAAWpM,iBAAyB,MACpCqM,EAAoB,WAAO,IAAD,EACzBC,EAAK,UAAGF,EAAS5K,eAAZ,aAAG,EAAkB1H,MAC5BwS,GACHf,EAAUe,IAKZ,OACC,sBAAKhG,UAAU,6CAAf,WACGjN,EAAMZ,WACP,gCACEY,EAAMJ,MAAMhE,OAAS,GACrB,qBAAKqR,UAAU,OAAf,SACC,sBAAKA,UAAU,iCAAf,mCACwBjN,EAAMJ,gBAIjBT,IAAda,EAAMd,KACN,qBAAK+N,UAAU,4CAAf,oEAID,gCACEjN,EAAMN,aAAa9D,OAAS,GAC5B,sBAAKqR,UAAU,OAAf,uCAEC,4BAAIjN,EAAMN,aAAawT,mBAGzB,sBAAKjG,UAAU,OAAf,UACC,sBAAKA,UAAU,2CAAf,+BAEC,sBAAKA,UAAU,sBAAf,qCACyB,wCADzB,oBAID,sBAAKA,UAAU,2BAAf,UACC,uBACCkG,WAAY,SAACnM,GACE,UAAVA,EAAEoM,KACLJ,KAGF1M,IAAKyM,EACLM,YAAY,OACZpG,UAAU,mKAEX,wBACCqG,QAASN,EACT/F,UAAU,0MAFX,sBAQF,sBAAKA,UAAU,2CAAf,6CAEC,sBAAKA,UAAU,sBAAf,qCACyB,wCADzB,oBAID,uBAAOhN,KAAK,OAAOsT,SAAUf,EAAkBvF,UAAU,qBAI3DyE,EACA1R,EAAMd,KACN,uDAEEc,EAAMf,SAAS+K,KAAI,WAAsC2C,GAAtC,IAAG/L,EAAH,EAAGA,SAAUoN,EAAb,EAAaA,gBAAiBxM,EAA9B,EAA8BA,KAA9B,OACnB,sBAAKyL,UAAU,OAAf,mBACQ,IACP,8BACEe,EADF,KACqBxM,EADrB,OAGA,qBAAKyL,UAAU,OAAf,SACErM,EAASoJ,KAAI,SAACnJ,EAASuS,GACvB,OAAO,iCAAiBvS,EAAQvC,KAAzB,UAAW8U,UAPMzG,Y,WCrKlB6G,EAlBC,WACf,OACC,sBAAKvG,UAAU,mCAAf,UACC,qBAAKA,UAAU,uBAAf,qBACA,sBAAKA,UAAU,aAAf,UACC,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,+BCRG,SAASwG,KACf,IAAMzT,EAAQqG,qBAAWxG,GAAS,GAElC,OACC,sBAAKoN,UAAU,uBAAf,WACsB,IAApBjN,EAAMZ,WACN,qBACC6N,UAAU,yFACVL,MAAO,CAAE8G,gBAAiB,oBAF3B,SAIC,cAAC,EAAD,MAGF,qBAAKzG,UAAU,gDAAf,SACC,cAAC7G,EAAD,MAED,qBAAK6G,UAAU,cAAf,SACC,cAAC0E,EAAD,SAYG,SAASgC,GAAT,GAA0C,IAApBtT,EAAmB,EAAnBA,SAC5B,OAAO,cAAC,EAAD,UAAiBA,IClCzB,IAYeuT,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxH,MAAK,YAAkD,IAA/CyH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAACX,GAAD,UACC,cAACF,GAAD,QAGFc,SAASC,eAAe,SAMzBZ,O","file":"static/js/main.7fc1736e.chunk.js","sourcesContent":["/**\r\n * Formats of spatial data for visualization\r\n */\r\n\r\nimport { Vector } from \"../Math\";\r\nimport { Interaction } from \"./interactions\";\r\n\r\n// Coordinate represents a 3-dimensional coordinate set\r\nexport interface Coordinate {\r\n\tx: number;\r\n\ty: number;\r\n\tz: number;\r\n\r\n\t// Converts coordinate to vector\r\n\ttoVec: () => Vector;\r\n\r\n\ttoArray: () => number[];\r\n}\r\n\r\nexport class Coord implements Coordinate {\r\n\tconstructor(public x: number, public y: number, public z: number) {}\r\n\r\n\ttoVec(): Vector {\r\n\t\treturn Vector.fromArray(this.toArray());\r\n\t}\r\n\r\n\ttoArray(): number[] {\r\n\t\treturn [this.x, this.y, this.z];\r\n\t}\r\n}\r\n\r\n// Structure for ATOM records in pdb file\r\nexport interface Atom {\r\n\tcoords: Coordinate;\r\n\tname: string;\r\n\tresidueName: ResidueName;\r\n\telement: string;\r\n\tresidueSequenceNumber: number;\r\n}\r\n\r\nexport type Atoms = Atom[];\r\n\r\n/**\r\n * Atom names might contain remoteness symbols. Here is a small mapping up\r\n * to H\r\n *\r\n * @example AtomRemoteness[\"A\"]\r\n */\r\nexport enum AtomRemoteness {\r\n\tA = \"α\",\r\n\tB = \"β\",\r\n\tG = \"γ\",\r\n\tD = \"δ\",\r\n\tE = \"ε\",\r\n\tZ = \"ζ\",\r\n\tH = \"η\",\r\n}\r\n\r\nexport type ResidueName = string | DNAResidues | RNAResidues | ProteinResidues;\r\n\r\n// Met information about residue, not helpful for calculations\r\nexport interface ResidueMeta {\r\n\t// hash allows to uniquely identify each residue\r\n\thash: string;\r\n\tname: ResidueName;\r\n\tsequenceNumber: number;\r\n\tpolymerChainIdentifier: string;\r\n\t// polymerKind: PolymerKind,\r\n\r\n\tmeta?: any;\r\n}\r\n\r\n/**\r\n *  @see https://proteopedia.org/wiki/index.php/Standard_Residues\r\n */\r\nexport interface Residue extends ResidueMeta {\r\n\t// Center defines the arithmetic average of all atoms coordinates in\r\n\t// residue All coordinates are set to -1 if center is not calculated\r\n\tcenter: Coordinate;\r\n\r\n\t// List of interactions with this residue\r\n\tinteractions: Interaction[];\r\n\r\n\t// Residue atoms\r\n\tatoms: Atom[];\r\n\r\n\t// For non nucleotides these values will be empty. v and o vectors\r\n\t// that define the plane of DNA/RNA nucleotide v is normalized (v =\r\n\t// v/|v|) v is calculated as following: v=(C4-C2)x(C6-C2), where Cx is\r\n\t// the xth C atom in nucleotide o is simply the average of C2, C4, C6:\r\n\t// o=(C2+C4+C6)/3\r\n\tv: Vector;\r\n\to: Vector;\r\n\r\n\t/**\r\n\t * Finds all atoms of this residue which match the given names. Atoms\r\n\t * are returned as array in the order the names were provided. Only\r\n\t * exact name matches are compared.\r\n\t */\r\n\tfindAtomsByNames: (names: string[]) => Atom[];\r\n}\r\n\r\n// Generic residue implementation\r\nexport class ResidueImplementation implements Residue {\r\n\tpublic center: Coordinate;\r\n\tpublic interactions: Interaction[];\r\n\tpublic atoms: Atom[];\r\n\tpublic v: Vector;\r\n\tpublic o: Vector;\r\n\tpublic hash: string;\r\n\tpublic name: ResidueName;\r\n\tpublic sequenceNumber: number;\r\n\tpublic polymerChainIdentifier: string;\r\n\r\n\tconstructor() {\r\n\t\tthis.atoms = [];\r\n\t\tthis.name = \"\";\r\n\t\tthis.sequenceNumber = -1;\r\n\t\tthis.center = new Coord(-1, -1, -1);\r\n\t\tthis.hash = \"\";\r\n\t\tthis.interactions = [];\r\n\t\tthis.polymerChainIdentifier = \"\";\r\n\t\tthis.v = Vector.infinity();\r\n\t\tthis.o = Vector.infinity();\r\n\t}\r\n\r\n\tfindAtomsByNames(names: string[]): Atom[] {\r\n\t\tlet ret: Atoms = [];\r\n\r\n\t\tthis.atoms.forEach((a) => {\r\n\t\t\tif (names.indexOf(a.name) !== -1) {\r\n\t\t\t\tret.push(a);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Reorder based on names\r\n\t\tret.sort((a, b) => {\r\n\t\t\treturn names.indexOf(a.name) - names.indexOf(b.name);\r\n\t\t});\r\n\r\n\t\treturn ret;\r\n\t}\r\n}\r\n\r\n/**\r\n * Residue types for DNA, RNA and Proteins DNA - deoxynucleotides RNA -\r\n * nucleotides PROTEIN - standard amino acids\r\n */\r\nexport enum DNAResidues {\r\n\tDA = \"DA\",\r\n\tDG = \"DG\",\r\n\tDC = \"DC\",\r\n\tDT = \"DT\",\r\n}\r\n\r\nexport enum RNAResidues {\r\n\tA = \"A\",\r\n\tC = \"C\",\r\n\tG = \"G\",\r\n\tI = \"I\",\r\n\tU = \"U\",\r\n}\r\nexport enum ProteinResidues {\r\n\tAla,\r\n\tArg,\r\n\tAsn,\r\n\tAsp,\r\n\tCys,\r\n\tGlu,\r\n\tGln,\r\n\tGly,\r\n\tHis,\r\n\tIle,\r\n\tLeu,\r\n\tLys,\r\n\tMet,\r\n\tPhe,\r\n\tPro,\r\n\tSer,\r\n\tThr,\r\n\tTrp,\r\n\tTyr,\r\n\tVal,\r\n}\r\n\r\n/**\r\n * Type of polymer\r\n */\r\nexport enum PolymerKind {\r\n\tDNA = \"DNA\",\r\n\tRNA = \"RNA\",\r\n\tProtein = \"Protein\",\r\n\r\n\t// Undefined polymer kind\r\n\tUnknown = \"Unknown\",\r\n}\r\n\r\nexport interface AsymetricUnitTransformation {\r\n\tmatrix: Array<Array<number>>;\r\n}\r\n\r\n/**\r\n * Polymer contains all residues until a TER in PDB is found\r\n */\r\nexport interface Polymer {\r\n\tresidues: Residue[];\r\n\tkind: PolymerKind;\r\n\tchainIdentifier: string; // Name of the chain (A,B,C, ... <etc>)\r\n\r\n\t// if true - chain was generated from remark 350 transformation\r\n\tgeneratedFromTransform?: boolean;\r\n}\r\n\r\nexport interface Remark350Transformations {\r\n\t// Chain identifiers that should apply this transformation\r\n\tchains: string[];\r\n\r\n\t// Array of rotation matrices (3x3)\r\n\trotations: Array<Array<number>>[];\r\n\r\n\t// Array of translation vectors (3x1)\r\n\ttranslations: Vector[];\r\n}\r\n\r\n/**\r\n * File formats below\r\n */\r\nexport interface PDBFile {\r\n\tpolymers: Polymer[];\r\n\traw: string;\r\n}\r\n\r\n/**\r\n * Determines polymer kind from atom's residue name\r\n *\r\n * @param atom\r\n * @returns\r\n */\r\nexport function polymerKindFromAtom(atom: Atom): PolymerKind {\r\n\tswitch (true) {\r\n\t\tcase atom.residueName in DNAResidues:\r\n\t\t\treturn PolymerKind.DNA;\r\n\t\tcase atom.residueName in RNAResidues:\r\n\t\t\treturn PolymerKind.RNA;\r\n\t\tdefault:\r\n\t\t\treturn PolymerKind.Protein;\r\n\t}\r\n}\r\n","// Credit: https://github.com/evanw/lightgl.js\r\n// Provides a simple 3D vector class. Vector operations can be done using member\r\n// functions, which return new vectors, or static functions, which reuse\r\n\r\nimport { Coord, Coordinate } from \"./types/atoms\";\r\n\r\n// existing vectors to avoid generating garbage.\r\nexport class Vector {\r\n\tconstructor(public x: number, public y: number, public z: number) {\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.z = z || 0;\r\n\t}\r\n\tnegative() {\r\n\t\treturn new Vector(-this.x, -this.y, -this.z);\r\n\t}\r\n\tadd(v: Vector | number) {\r\n\t\tif (v instanceof Vector) return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);\r\n\t\telse return new Vector(this.x + v, this.y + v, this.z + v);\r\n\t}\r\n\tsubtract(v: Vector | number) {\r\n\t\tif (v instanceof Vector) return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);\r\n\t\telse return new Vector(this.x - v, this.y - v, this.z - v);\r\n\t}\r\n\tmultiply(v: Vector | number) {\r\n\t\tif (v instanceof Vector) return new Vector(this.x * v.x, this.y * v.y, this.z * v.z);\r\n\t\telse return new Vector(this.x * v, this.y * v, this.z * v);\r\n\t}\r\n\tdivide(v: Vector | number) {\r\n\t\tif (v instanceof Vector) return new Vector(this.x / v.x, this.y / v.y, this.z / v.z);\r\n\t\telse return new Vector(this.x / v, this.y / v, this.z / v);\r\n\t}\r\n\tequals(v: Vector) {\r\n\t\treturn this.x == v.x && this.y == v.y && this.z == v.z;\r\n\t}\r\n\tdot(v: Vector) {\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\t}\r\n\tcross(v: Vector) {\r\n\t\treturn new Vector(\r\n\t\t\tthis.y * v.z - this.z * v.y,\r\n\t\t\tthis.z * v.x - this.x * v.z,\r\n\t\t\tthis.x * v.y - this.y * v.x,\r\n\t\t);\r\n\t}\r\n\tlength() {\r\n\t\treturn Math.sqrt(this.dot(this));\r\n\t}\r\n\t// Alias for length\r\n\tmagnitude() {\r\n\t\treturn this.length();\r\n\t}\r\n\tunit() {\r\n\t\treturn this.divide(this.length());\r\n\t}\r\n\tmin() {\r\n\t\treturn Math.min(Math.min(this.x, this.y), this.z);\r\n\t}\r\n\tmax() {\r\n\t\treturn Math.max(Math.max(this.x, this.y), this.z);\r\n\t}\r\n\ttoAngles() {\r\n\t\treturn {\r\n\t\t\ttheta: Math.atan2(this.z, this.x),\r\n\t\t\tphi: Math.asin(this.y / this.length()),\r\n\t\t};\r\n\t}\r\n\tangleTo(a: Vector) {\r\n\t\treturn Math.acos(this.dot(a) / (this.length() * a.length()));\r\n\t}\r\n\ttoArray(n: number) {\r\n\t\treturn [this.x, this.y, this.z].slice(0, n || 3);\r\n\t}\r\n\ttoCoord(): Coordinate {\r\n\t\treturn new Coord(this.x, this.y, this.z);\r\n\t}\r\n\tclone() {\r\n\t\treturn new Vector(this.x, this.y, this.z);\r\n\t}\r\n\tinit(x: number, y: number, z: number) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\treturn this;\r\n\t}\r\n\tnormalize() {\r\n\t\treturn this.unit();\r\n\t}\r\n\r\n\t// Index\r\n\tsetIndex(i: number, val: number) {\r\n\t\tswitch (i) {\r\n\t\t\tcase 0:\r\n\t\t\t\tthis.x = val;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tthis.y = val;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tthis.z = val;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t// Distance to given vector\r\n\tdistanceTo(v: Vector): number {\r\n\t\treturn Math.sqrt(\r\n\t\t\tMath.pow(this.x - v.x, 2) + Math.pow(this.y - v.y, 2) + Math.pow(this.z - v.z, 2),\r\n\t\t);\r\n\t}\r\n\r\n\tstatic negative(a: Vector, b: Vector, c: Vector) {\r\n\t\tb.x = -a.x;\r\n\t\tb.y = -a.y;\r\n\t\tb.z = -a.z;\r\n\t\treturn b;\r\n\t}\r\n\tstatic add(a: Vector, b: Vector, c: Vector) {\r\n\t\tif (b instanceof Vector) {\r\n\t\t\tc.x = a.x + b.x;\r\n\t\t\tc.y = a.y + b.y;\r\n\t\t\tc.z = a.z + b.z;\r\n\t\t} else {\r\n\t\t\tc.x = a.x + b;\r\n\t\t\tc.y = a.y + b;\r\n\t\t\tc.z = a.z + b;\r\n\t\t}\r\n\t\treturn c;\r\n\t}\r\n\tstatic subtract(a: Vector, b: Vector, c: Vector) {\r\n\t\tif (b instanceof Vector) {\r\n\t\t\tc.x = a.x - b.x;\r\n\t\t\tc.y = a.y - b.y;\r\n\t\t\tc.z = a.z - b.z;\r\n\t\t} else {\r\n\t\t\tc.x = a.x - b;\r\n\t\t\tc.y = a.y - b;\r\n\t\t\tc.z = a.z - b;\r\n\t\t}\r\n\t\treturn c;\r\n\t}\r\n\tstatic multiply(a: Vector, b: Vector, c: Vector) {\r\n\t\tif (b instanceof Vector) {\r\n\t\t\tc.x = a.x * b.x;\r\n\t\t\tc.y = a.y * b.y;\r\n\t\t\tc.z = a.z * b.z;\r\n\t\t} else {\r\n\t\t\tc.x = a.x * b;\r\n\t\t\tc.y = a.y * b;\r\n\t\t\tc.z = a.z * b;\r\n\t\t}\r\n\t\treturn c;\r\n\t}\r\n\tstatic divide(a: Vector, b: Vector, c: Vector) {\r\n\t\tif (b instanceof Vector) {\r\n\t\t\tc.x = a.x / b.x;\r\n\t\t\tc.y = a.y / b.y;\r\n\t\t\tc.z = a.z / b.z;\r\n\t\t} else {\r\n\t\t\tc.x = a.x / b;\r\n\t\t\tc.y = a.y / b;\r\n\t\t\tc.z = a.z / b;\r\n\t\t}\r\n\t\treturn c;\r\n\t}\r\n\tstatic cross(a: Vector, b: Vector, c: Vector) {\r\n\t\tc.x = a.y * b.z - a.z * b.y;\r\n\t\tc.y = a.z * b.x - a.x * b.z;\r\n\t\tc.z = a.x * b.y - a.y * b.x;\r\n\t\treturn c;\r\n\t}\r\n\tstatic unit(a: Vector, b: Vector, c: Vector) {\r\n\t\tvar length = a.length();\r\n\t\tb.x = a.x / length;\r\n\t\tb.y = a.y / length;\r\n\t\tb.z = a.z / length;\r\n\t\treturn b;\r\n\t}\r\n\tstatic fromAngles(theta: number, phi: number): Vector {\r\n\t\treturn new Vector(\r\n\t\t\tMath.cos(theta) * Math.cos(phi),\r\n\t\t\tMath.sin(phi),\r\n\t\t\tMath.sin(theta) * Math.cos(phi),\r\n\t\t);\r\n\t}\r\n\tstatic randomDirection() {\r\n\t\treturn Vector.fromAngles(Math.random() * Math.PI * 2, Math.asin(Math.random() * 2 - 1));\r\n\t}\r\n\tstatic min(a: Vector, b: Vector, c: Vector) {\r\n\t\treturn new Vector(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));\r\n\t}\r\n\tstatic max(a: Vector, b: Vector, c: Vector) {\r\n\t\treturn new Vector(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));\r\n\t}\r\n\tstatic lerp(a: Vector, b: Vector, fraction: number) {\r\n\t\treturn b.subtract(a).multiply(fraction).add(a);\r\n\t}\r\n\tstatic fromArray(a: number[]) {\r\n\t\treturn new Vector(a[0], a[1], a[2]);\r\n\t}\r\n\tstatic angleBetween(a: Vector, b: Vector, c: Vector) {\r\n\t\treturn a.angleTo(b);\r\n\t}\r\n\r\n\t// Invalid value\r\n\tstatic infinity() {\r\n\t\treturn new Vector(Infinity, Infinity, Infinity);\r\n\t}\r\n}\r\n","import React, { createContext, useReducer, ReactElement } from \"react\";\r\nimport { Polymer, Residue } from \"./lib/types/atoms\";\r\nimport { PDBFile } from \"./lib/types/atoms\";\r\nimport { Visualization } from \"./lib/types/visualization\";\r\n\r\n/**\r\n * Initial State object structure\r\n */\r\nconst initialState: State = {\r\n\tpolymers: [],\r\n\tpdb: undefined,\r\n\tisLoading: false,\r\n\tsimpleStuffy: \"\",\r\n\thashedNucleicAcidResidues: {},\r\n\tviz: { chain1: null, chain2: null },\r\n\tcurrentPDBId: \"\",\r\n\tselectedResidue: undefined,\r\n\terror: \"\",\r\n};\r\n\r\nexport type HashedResidue = {\r\n\t[key: string]: Residue;\r\n};\r\n\r\n// State structure\r\nexport interface State {\r\n\tpolymers: Polymer[];\r\n\tpdb: PDBFile | undefined;\r\n\r\n\t// Determine if process is currently loading or not\r\n\tisLoading: boolean;\r\n\r\n\tsimpleStuffy: string;\r\n\r\n\t// This is used for faster lookups of nucleic acid residues.\r\n\t// Since nucleic acids are the central parts of visualization,\r\n\t// we might need to do many lookups, when searching for interactions.\r\n\thashedNucleicAcidResidues: HashedResidue;\r\n\r\n\t// Data to be visualized\r\n\tviz: Visualization;\r\n\r\n\t// Currently displayed pdb id\r\n\tcurrentPDBId: string;\r\n\r\n\t// Currently displayed residue information\r\n\tselectedResidue?: Residue;\r\n\r\n\t// Error text to display\r\n\terror: string;\r\n}\r\n\r\n/**\r\n * Actions structure\r\n */\r\nexport interface Action {\r\n\ttype: keyof State | \"resetState\";\r\n\tpayload: any;\r\n}\r\n\r\nconst context = createContext<[State, React.Dispatch<Action>]>([\r\n\tinitialState,\r\n\t() => {},\r\n]);\r\n\r\n// Reducer mutates the state\r\nconst reducer = (state: State, { type, payload }: Action): State => {\r\n\tswitch (type) {\r\n\t\tcase \"resetState\":\r\n\t\t\treturn { ...initialState };\r\n\t\t// Default case works when type is equal state property name\r\n\t\tdefault:\r\n\t\t\tif (type in state) {\r\n\t\t\t\t(state as any)[type] = payload;\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`${type} not found in state`);\r\n\t\t\t}\r\n\t}\r\n\r\n\t// We must return new object, otherwise update won't be triggered\r\n\treturn { ...state };\r\n};\r\n\r\ninterface Props {\r\n\tchildren: ReactElement;\r\n}\r\n\r\nconst StoreComponent = ({ children }: Props) => {\r\n\tconst [state, dispatch] = useReducer(reducer, initialState);\r\n\treturn (\r\n\t\t<context.Provider value={[state, dispatch]}>{children}</context.Provider>\r\n\t);\r\n};\r\n\r\nexport { context, StoreComponent };\r\n","/**\r\n * This file defines some helper functions which are used to\r\n * process atoms, residues, polymers and related functionality.\r\n */\r\n\r\nimport {\r\n\tCoordinate,\r\n\tCoord,\r\n\tPolymer,\r\n\tResidue,\r\n\tResidueMeta,\r\n} from './types/atoms';\r\n\r\n// Calculate centers for residues and returns same polymer with\r\n// calculated center coordinates\r\nexport function calculateCenters(p: Polymer): Polymer {\r\n\tp.residues.forEach((residue, i) => {\r\n\t\tconst coordinate: Coordinate = new Coord(0, 0, 0);\r\n\t\tresidue.atoms.forEach((atom) => {\r\n\t\t\tcoordinate.x += atom.coords.x;\r\n\t\t\tcoordinate.y += atom.coords.y;\r\n\t\t\tcoordinate.z += atom.coords.z;\r\n\t\t});\r\n\t\tcoordinate.x = coordinate.x / residue.atoms.length;\r\n\t\tcoordinate.y = coordinate.y / residue.atoms.length;\r\n\t\tcoordinate.z = coordinate.z / residue.atoms.length;\r\n\r\n\t\tp.residues[i].center = coordinate;\r\n\t});\r\n\treturn p;\r\n}\r\n\r\n// Calculates arithmetic distance between 2 coordinates\r\nexport function distanceBetween2Points(p1: Coordinate, p2: Coordinate): number {\r\n\treturn Math.sqrt(\r\n\t\tMath.pow(p1.x - p2.x, 2) +\r\n\t\t\tMath.pow(p1.y - p2.y, 2) +\r\n\t\t\tMath.pow(p1.z - p2.z, 2)\r\n\t);\r\n}\r\n\r\n// Helper function, since I could not find a Typescript'y way to do this\r\nexport function ResidueMetaFromResidue(r: Residue): ResidueMeta {\r\n\tconst { sequenceNumber, hash, name, polymerChainIdentifier }: ResidueMeta = r;\r\n\treturn { sequenceNumber, hash, name, polymerChainIdentifier };\r\n}\r\n","import { PolymerKind, Residue, ResidueMeta } from \"./atoms\";\r\n\r\n// Defines the distance threshold value for Threshold interaction type\r\nexport const THRESHOLD_DISTANCE: number = 5;\r\n\r\nexport enum InteractionType{\r\n    // Threshold based interaction. Distance is the only factor\r\n    Threshold,\r\n\r\n    // Hydrogen bond interactions\r\n    HBond,\r\n\r\n    // Watson crick pair interactions, primarily between DNA, RNA\r\n    // nucleotides (Defined by VisualizationResidue.index)\r\n    // WatsonCrickPair,\r\n}\r\n\r\n// Interaction interface defines an interaction that the residue\r\n// containing the interaction object has.\r\nexport interface Interaction{\r\n    // The residue that Interaction holder interacts with\r\n    residue: ResidueMeta,\r\n    polymerKind: PolymerKind,\r\n    type: InteractionType,\r\n\r\n    // Any additional data\r\n    meta: any\r\n}\r\n\r\n","import { Coordinate, DNAResidues, Polymer, PolymerKind, Residue, RNAResidues } from \"./types/atoms\";\r\nimport { Vector } from \"./Math\";\r\n\r\n/**\r\n * A value that is used to check watson-crick pairs distance\r\n */\r\nexport const WATSON_CRICK_PAIR_CALCULATION_THRESHOLD = 1.42;\r\n\r\n/**\r\n * Calculates and populates vectors v and o which define the plane of\r\n * single nucleotide.\r\n */\r\nexport const calculateNucleotidePlaneVectors: (p: Polymer) => Polymer = (p) => {\r\n\t// Only DNA or RNA have nucleotides\r\n\tif ([PolymerKind.DNA, PolymerKind.RNA].indexOf(p.kind) != -1) {\r\n\t\t// Dna/Rna residue atoms containing these names will be selected as c2, c4, c6\r\n\t\t// C's with single quote ' are of ribose so we only want specifically these.\r\n\t\tlet cNames = [\"C2\", \"C4\", \"C6\"];\r\n\r\n\t\tp.residues.forEach((residue) => {\r\n\t\t\t// Find C2, C4, C6 coordinates\r\n\t\t\tlet cAtoms: Coordinate[] = [];\r\n\r\n\t\t\tconst atoms = residue.findAtomsByNames(cNames);\r\n\t\t\tatoms.forEach((a, i) => {\r\n\t\t\t\tcAtoms[i] = a.coords;\r\n\t\t\t});\r\n\r\n\t\t\t// Calculate plane vector v and point o\r\n\t\t\tif (cAtoms.length === 3) {\r\n\t\t\t\tconst c2 = Vector.fromArray(cAtoms[0].toArray());\r\n\t\t\t\tconst c4 = Vector.fromArray(cAtoms[1].toArray());\r\n\t\t\t\tconst c6 = Vector.fromArray(cAtoms[2].toArray());\r\n\t\t\t\tconst v = c4.subtract(c2).cross(c6.subtract(c2)).normalize();\r\n\r\n\t\t\t\tconst o = c2.add(c4).add(c6).divide(3);\r\n\t\t\t\tresidue.v = v;\r\n\t\t\t\tresidue.o = o;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\treturn p;\r\n};\r\n\r\n/**\r\n *  Check if given residues can be treated as watson-crick pairs. Works on\r\n *  both RNA and DNA residues.\r\n */\r\nexport function isWatsonCrickPair(r1: Residue, r2: Residue): boolean {\r\n\t// All possible pairs\r\n\tconst pairs = [\r\n\t\t[DNAResidues.DA, DNAResidues.DT],\r\n\t\t[DNAResidues.DA, RNAResidues.U],\r\n\t\t[DNAResidues.DT, RNAResidues.A],\r\n\r\n\t\t[DNAResidues.DC, DNAResidues.DG],\r\n\t\t[DNAResidues.DC, RNAResidues.G],\r\n\r\n\t\t[DNAResidues.DG, DNAResidues.DC],\r\n\t\t[DNAResidues.DG, RNAResidues.C],\r\n\r\n\t\t[RNAResidues.C, RNAResidues.G],\r\n\t\t[RNAResidues.A, RNAResidues.U],\r\n\t];\r\n\r\n\t// Check if given residues can be w-c pairs\r\n\tfor (let i = 0; i < pairs.length; i++) {\r\n\t\tif (\r\n\t\t\t(r1.name === pairs[i][0] && r2.name === pairs[i][1]) ||\r\n\t\t\t(r1.name === pairs[i][1] && r2.name === pairs[i][0])\r\n\t\t) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n","import { Polymer, PolymerKind, Residue } from \"./types/atoms\";\r\nimport { Action } from \"../Store\";\r\nimport { calculateCenters, distanceBetween2Points, ResidueMetaFromResidue } from \"./AtomsFunctions\";\r\nimport { InteractionType, THRESHOLD_DISTANCE } from \"./types/interactions\";\r\nimport { Visualization } from \"./types/visualization\";\r\nimport { isWatsonCrickPair, WATSON_CRICK_PAIR_CALCULATION_THRESHOLD } from \"./NucleicAcids\";\r\n\r\nexport class InteractionsFinder {\r\n\tnucleicAcids: Polymer[] = [];\r\n\tproteins: Polymer[] = [];\r\n\r\n\tpublic hasValidDNA: boolean = false;\r\n\tpublic hasValidRNA: boolean = false;\r\n\r\n\t// This will be used to generate visualization\r\n\tvisualization: Visualization = { chain1: null, chain2: null };\r\n\r\n\tconstructor(public polymers: Polymer[]) {\r\n\t\tthis.prepareObjects();\r\n\t}\r\n\r\n\t// Generates complete list of watson-crick pairs for chain1-chain2.\r\n\t// Returned result is very likely to be unordered according to\r\n\t// original DNA/RNA sequences\r\n\tgenerateWatsonCrickPairs(chain1: Polymer, chain2: Polymer): Array<Residue[]> {\r\n\t\t// Chain lengths can differ, so we calculate and diff on each\r\n\t\t// chain pairs. Pairs2 will have chain2 as first chain, so this\r\n\t\t// has to be reordered when generating complete pairs\r\n\t\tlet pairs1 = this.calculateWatsonCrickPairs(chain1, chain2);\r\n\r\n\t\t// pairs2 has chain2 as main chain, also it should be noted that\r\n\t\t// the chain2 residues most often must be in reverse order as they\r\n\t\t// are 3'->5' and chain1 is 5'->3'\r\n\t\tlet pairs2 = this.calculateWatsonCrickPairs(chain2, chain1);\r\n\t\tpairs2.reverse();\r\n\r\n\t\t// Result is an array of residue pairs that are unordered. Second\r\n\t\t// chain pairs are double checked for correctness and lone\r\n\t\t// residues are added too as pairs1 will not have any lone\r\n\t\t// residues of chain2\r\n\t\tlet completePairs: Array<Residue[]> = pairs1;\r\n\t\tpairs2.forEach((pair) => {\r\n\t\t\t// pairs2 pairs have chain2 residues first, so we have to use\r\n\t\t\t// chain1 first\r\n\t\t\tif (pair.length === 1) {\r\n\t\t\t\tcompletePairs.push(pair);\r\n\t\t\t} else if (pair.length === 2) {\r\n\t\t\t\t// Double check if calculations were done correctly on\r\n\t\t\t\t// first chain and such pair from pairs2 exists in pair1\r\n\t\t\t\tlet pairFoundIn1 = false;\r\n\t\t\t\tfor (let i = 0; i < pairs1.length; i++) {\r\n\t\t\t\t\tlet p1 = pairs1[i];\r\n\t\t\t\t\tif (p1.length === 2) {\r\n\t\t\t\t\t\tif (p1[0].hash === pair[1].hash && p1[1].hash === pair[0].hash) {\r\n\t\t\t\t\t\t\tpairFoundIn1 = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Currently we only log this info, but in future\r\n\t\t\t\t// something should be done about this, because pair\r\n\t\t\t\t// discrepancies should not happen.\r\n\t\t\t\tif (!pairFoundIn1) {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t`watsonCrickPairs: matching pair was not found ${pair[1].polymerChainIdentifier}:${pair[1].sequenceNumber}${pair[1].name}---${pair[0].polymerChainIdentifier}:${pair[0].sequenceNumber}${pair[0].name}`,\r\n\t\t\t\t\t\tpair,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn completePairs;\r\n\t}\r\n\r\n\t// Returns unordered array of residue pairs for all nucleic acids.\r\n\t// Each nucleic acid is compared with all other nucleic acids, because\r\n\t// for example 5B2R contains DNA-RNA-DNA complex and we want to make\r\n\t// sure that everything is calculated correctly.\r\n\twatsonCrickPairs(): Array<Residue[]> {\r\n\t\tif (this.nucleicAcids.length <= 0) {\r\n\t\t\tthrow Error(\"Nucleic acids are not initialized\");\r\n\t\t}\r\n\r\n\t\tlet allPairs: Residue[][] = [];\r\n\t\t// Each chain should be compared one time with all other available\r\n\t\t// chains except itself.\r\n\t\tfor (let i = 0; i < this.nucleicAcids.length; i++) {\r\n\t\t\tfor (let j = i + 1; j < this.nucleicAcids.length; j++) {\r\n\t\t\t\tconst generatePairs = this.generateWatsonCrickPairs(\r\n\t\t\t\t\tthis.nucleicAcids[i],\r\n\t\t\t\t\tthis.nucleicAcids[j],\r\n\t\t\t\t);\r\n\t\t\t\tallPairs.push(...generatePairs);\r\n\t\t\t}\r\n\r\n\t\t\t// RNA molecules might have secondary structure - here we run\r\n\t\t\t// generateWatsonCrickPairs on same RNA molecule to check\r\n\t\t\tif (this.nucleicAcids[i].kind === PolymerKind.RNA) {\r\n\t\t\t\tconst generatePairs = this.generateWatsonCrickPairs(\r\n\t\t\t\t\tthis.nucleicAcids[i],\r\n\t\t\t\t\tthis.nucleicAcids[i],\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(\"SIMILAR PAIRS\", generatePairs);\r\n\t\t\t\tallPairs.push(...generatePairs);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn allPairs;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates watson crick pairs for DNA chain1 and chain2 must be DNA\r\n\t * polymers. Calculations are based on chain1 (chain1 is used as\r\n\t * template strand) and not all chain2\r\n\t * residues might be included. Most often, lone pairs of chain2 won't\r\n\t * be included in the result.\r\n\t */\r\n\tcalculateWatsonCrickPairs(chain1: Polymer, chain2: Polymer): Array<Residue[]> {\r\n\t\tlet pairs: Array<Residue[]> = [];\r\n\t\tchain1.residues.forEach((r1) => {\r\n\t\t\tlet smallestDistance = Infinity;\r\n\t\t\tlet bestR2: Residue | undefined;\r\n\r\n\t\t\tchain2.residues.forEach((r2) => {\r\n\t\t\t\t// r1 C2/C4/C6 atoms distance to r2 o,v vectors\r\n\t\t\t\tconst r1Cs = r1.findAtomsByNames([\"C2\", \"C4\", \"C6\"]);\r\n\t\t\t\tconst r1DistToR2VO = [\r\n\t\t\t\t\tMath.abs(r1Cs[0].coords.toVec().subtract(r2.o).dot(r2.v)),\r\n\t\t\t\t\tMath.abs(r1Cs[1].coords.toVec().subtract(r2.o).dot(r2.v)),\r\n\t\t\t\t\tMath.abs(r1Cs[2].coords.toVec().subtract(r2.o).dot(r2.v)),\r\n\t\t\t\t];\r\n\t\t\t\t// r1 C2/C4/C6 atoms distance to r2 o,v vectors\r\n\t\t\t\tconst r2Cs = r2.findAtomsByNames([\"C2\", \"C4\", \"C6\"]);\r\n\t\t\t\tconst r2DistToR1VO = [\r\n\t\t\t\t\tMath.abs(r2Cs[0].coords.toVec().subtract(r1.o).dot(r1.v)),\r\n\t\t\t\t\tMath.abs(r2Cs[1].coords.toVec().subtract(r1.o).dot(r1.v)),\r\n\t\t\t\t\tMath.abs(r2Cs[2].coords.toVec().subtract(r1.o).dot(r1.v)),\r\n\t\t\t\t];\r\n\r\n\t\t\t\tconst max = Math.max(...r2DistToR1VO, ...r1DistToR2VO);\r\n\r\n\t\t\t\t// Best residue is **another** (not same) residue with\r\n\t\t\t\t// smaller than current smallestDistance\r\n\t\t\t\tif (max < smallestDistance && r1.hash !== r2.hash) {\r\n\t\t\t\t\tsmallestDistance = max;\r\n\t\t\t\t\tbestR2 = r2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (\r\n\t\t\t\tbestR2 !== undefined &&\r\n\t\t\t\t// Allow tiny bit of random error\r\n\t\t\t\tsmallestDistance <= WATSON_CRICK_PAIR_CALCULATION_THRESHOLD + Math.random() &&\r\n\t\t\t\tisWatsonCrickPair(bestR2, r1) &&\r\n\t\t\t\t// It looks like sometimes smallestDistance can be\r\n\t\t\t\t// calculated incorrectly if the orientation of two very\r\n\t\t\t\t// distant residues is similar. It looks like usually\r\n\t\t\t\t// distance between residue centers is around 10-11, if\r\n\t\t\t\t// this threshold is exceeded - most likely these two\r\n\t\t\t\t// residues can not be pairs.\r\n\t\t\t\tr1.center.toVec().distanceTo(bestR2.center.toVec()) < 15\r\n\t\t\t) {\r\n\t\t\t\tpairs.push([r1, bestR2]);\r\n\t\t\t\tconst r2 = bestR2;\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t\"Smallest distance: \",\r\n\t\t\t\t\t`${chain1.kind}-${r1.polymerChainIdentifier}:${r1.sequenceNumber}${r1.name}`,\r\n\t\t\t\t\t`${chain2.kind}-${r2.polymerChainIdentifier}:${r2.sequenceNumber}${r2.name}`,\r\n\t\t\t\t\tsmallestDistance,\r\n\t\t\t\t\tisWatsonCrickPair(bestR2, r1),\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tpairs.push([r1]);\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`No pair for: ${chain1.kind} ${r1.polymerChainIdentifier}:${r1.sequenceNumber}${r1.name}, smallest distance: ${smallestDistance}`,\r\n\t\t\t\t\tbestR2,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn pairs;\r\n\t}\r\n\r\n\t// Finds polymers to work with, calculates centers for residues.\r\n\tprepareObjects() {\r\n\t\tthis.nucleicAcids = this.findNucleicAcids();\r\n\t\tthis.proteins = this.findProteins();\r\n\r\n\t\tthis.nucleicAcids.forEach((polymer) => calculateCenters(polymer));\r\n\t\tthis.proteins.forEach((polymer) => calculateCenters(polymer));\r\n\t}\r\n\r\n\tfindProteins(): Polymer[] {\r\n\t\treturn this.polymers.filter((p) => {\r\n\t\t\treturn [PolymerKind.Protein].indexOf(p.kind) !== -1;\r\n\t\t});\r\n\t}\r\n\r\n\tfindNucleicAcids(): Polymer[] {\r\n\t\treturn this.polymers.filter((p) => {\r\n\t\t\treturn [PolymerKind.DNA, PolymerKind.RNA].indexOf(p.kind) !== -1;\r\n\t\t});\r\n\t}\r\n\r\n\t// Compares residue centers of nucleic acid and proteins If distance\r\n\t// between centers is smaller than defined THRESHOLD_DISTANCE times 2,\r\n\t// we can try to search for THRESHOLD_DISTANCE distance between\r\n\t// nucleic acid and protein residue atoms\r\n\tthresholdInteractions() {\r\n\t\tthis.nucleicAcids.forEach((nacid, nacidI) => {\r\n\t\t\tnacid.residues.forEach((nacidResidue, nacidResidueI) => {\r\n\t\t\t\tthis.proteins.forEach((p) => {\r\n\t\t\t\t\tp.residues.forEach((pResidue) => {\r\n\t\t\t\t\t\tconst distanceResidues = distanceBetween2Points(nacidResidue.center, pResidue.center);\r\n\r\n\t\t\t\t\t\t// Residues might contain atoms that are less than\r\n\t\t\t\t\t\t// THRESHOLD_DISTANCE amount apart even if\r\n\t\t\t\t\t\t// residues themselves are 2 times further.\r\n\t\t\t\t\t\tif (distanceResidues <= THRESHOLD_DISTANCE * 2) {\r\n\t\t\t\t\t\t\tnacidResidue.atoms.forEach((nacidAtom) => {\r\n\t\t\t\t\t\t\t\tpResidue.atoms.forEach((pAtom) => {\r\n\t\t\t\t\t\t\t\t\tconst distanceAtoms = distanceBetween2Points(nacidAtom.coords, pAtom.coords);\r\n\t\t\t\t\t\t\t\t\tif (distanceAtoms <= THRESHOLD_DISTANCE) {\r\n\t\t\t\t\t\t\t\t\t\tthis.nucleicAcids[nacidI].residues[nacidResidueI].interactions.push({\r\n\t\t\t\t\t\t\t\t\t\t\tresidue: ResidueMetaFromResidue(pResidue),\r\n\t\t\t\t\t\t\t\t\t\t\ttype: InteractionType.Threshold,\r\n\t\t\t\t\t\t\t\t\t\t\tpolymerKind: p.kind,\r\n\t\t\t\t\t\t\t\t\t\t\tmeta: { distance: distanceAtoms },\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n","import * as d3 from \"d3\";\r\nimport { Action } from \"../../Store\";\r\nimport { Residue } from \"../types/atoms\";\r\n\r\nexport interface Node extends Residue {\r\n\tid: string;\r\n\tcolor: string;\r\n\tgroup: number;\r\n\tname: string;\r\n\thash: string;\r\n}\r\nexport enum LinkType {\r\n\tPair = \"pair\",\r\n\tBackbone = \"backbone\",\r\n}\r\n\r\nexport interface Link {\r\n\tsource: string;\r\n\ttarget: string;\r\n\tvalue: number;\r\n\tcolor: string;\r\n\tlinkType: LinkType;\r\n}\r\n\r\ntype ForceGraphParam = {\r\n\tnodes: Node[];\r\n\tlinks: Link[];\r\n\tsvgRef: SVGSVGElement;\r\n\tdispatch: React.Dispatch<Action>;\r\n};\r\n\r\ntype ForceGraphOpts = {\r\n\tnodeId: any | never | undefined;\r\n\tnodeGroups: any | never | undefined;\r\n\tnodeTitle: any | never | undefined;\r\n\tnodeFill: any | never | undefined;\r\n\tnodeStroke: any | never | undefined;\r\n\tnodeStrokeWidth: any | never | undefined;\r\n\tnodeStrokeOpacity: any | never | undefined;\r\n\tnodeRadius: any | never | undefined;\r\n\tnodeStrength: any | never | undefined;\r\n\tlinkSource: any | never | undefined;\r\n\tlinkTarget: any | never | undefined;\r\n\tlinkStroke: any | never | undefined;\r\n\tlinkStrokeOpacity: any | never | undefined;\r\n\tlinkStrokeWidth: any | never | undefined;\r\n\tlinkStrokeLinecap: any | never | undefined;\r\n\tlinkStrength: any | never | undefined;\r\n\tcolors: any | never | undefined;\r\n\twidth: any | never | undefined;\r\n\theight: any | never | undefined;\r\n\tinvalidation: any | never | undefined;\r\n};\r\n\r\n// letter sizings in px\r\nconst Letters = {\r\n\tsize: 10,\r\n\ty: 4,\r\n};\r\n\r\n// Example taken from https://observablehq.com/@d3/force-directed-graph\r\nexport function ForceGraph(\r\n\t{\r\n\t\tnodes, // an iterable of node objects (typically [{id}, …])\r\n\t\tlinks, // an iterable of link objects (typically [{source, target}, …])\r\n\t\tsvgRef, // d3 svg object\r\n\t\tdispatch,\r\n\t}: ForceGraphParam,\r\n\topts: ForceGraphOpts,\r\n) {\r\n\tlet {\r\n\t\tnodeId = (d: any) => d.id, // given d in nodes, returns a unique identifier (string)\r\n\t\tnodeGroups, // an array of ordinal values representing the node groups\r\n\t\tnodeTitle, // given d in nodes, a title string\r\n\t\tnodeFill = (d: any) => {\r\n\t\t\treturn d.color !== undefined ? d.color : \"currentColor\";\r\n\t\t}, // node stroke fill (if not using a group color encoding)\r\n\t\tnodeStroke = \"#fff\", // node stroke color\r\n\t\tnodeStrokeWidth = 1.5, // node stroke width, in pixels\r\n\t\tnodeStrokeOpacity = 1, // node stroke opacity\r\n\t\tnodeRadius = 10, // node radius, in pixels\r\n\t\tnodeStrength,\r\n\t\tlinkStroke = (d: any) => {\r\n\t\t\treturn d.color !== undefined ? d.color : \"#444\";\r\n\t\t}, // link stroke color\r\n\t\tlinkStrokeOpacity = 0.6, // link stroke opacity\r\n\t\tlinkStrokeWidth = 1.5, // given d in links, returns a stroke width in pixels\r\n\t\tlinkStrokeLinecap = \"round\", // link stroke linecap\r\n\t\tlinkStrength = 2,\r\n\t\twidth = 640, // outer width, in pixels\r\n\t\theight = 400, // outer height, in pixels\r\n\t\tinvalidation, // when this promise resolves, stop the simulation\r\n\t} = opts;\r\n\r\n\t// Save initial objects for later usage\r\n\tconst initialNodes = nodes;\r\n\tconst initialLinks = links;\r\n\r\n\t// Compute values.\r\n\tconst N = d3.map(nodes, nodeId).map(intern);\r\n\tif (nodeTitle === undefined) nodeTitle = (_: never, i: number) => N[i];\r\n\tconst W = typeof linkStrokeWidth !== \"function\" ? null : d3.map(links, linkStrokeWidth);\r\n\r\n\t// Replace the input nodes and links with mutable objects for the\r\n\t// simulation.\r\n\tnodes = initialNodes;\r\n\tlinks = initialLinks;\r\n\r\n\t// Construct the forces.\r\n\tconst forceNode = d3.forceManyBody();\r\n\r\n\tconst forceLink = d3\r\n\t\t.forceLink(links)\r\n\t\t.id(({ index: i }) => N[i as any])\r\n\t\t.distance((d, i) => {\r\n\t\t\t// Smaller distance values for backbone provide a better\r\n\t\t\t// structure with better separation between chains\r\n\t\t\tif (initialLinks[i].linkType === LinkType.Backbone) {\r\n\t\t\t\treturn 5;\r\n\t\t\t}\r\n\t\t\treturn 70;\r\n\t\t})\r\n\t\t.strength((d, i) => {\r\n\t\t\t// Larger values for backbone provide a better\r\n\t\t\t// structure with better separation between chains\r\n\t\t\tif (initialLinks[i].linkType === LinkType.Backbone) {\r\n\t\t\t\treturn 5000;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t});\r\n\tif (nodeStrength !== undefined) forceNode.strength(nodeStrength);\r\n\tif (linkStrength !== undefined) forceLink.strength(linkStrength);\r\n\r\n\tconst simulation = d3\r\n\t\t.forceSimulation(nodes as any)\r\n\t\t.force(\"link\", forceLink)\r\n\t\t.force(\"charge\", forceNode)\r\n\t\t.on(\"tick\", ticked);\r\n\r\n\tconst svg = d3\r\n\t\t.select(svgRef)\r\n\t\t.attr(\"width\", width)\r\n\t\t.attr(\"height\", height)\r\n\t\t.attr(\"viewBox\", [-width / 2, -height / 2, width, height] as any)\r\n\t\t.attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\r\n\r\n\t// Clear any previously available graphs\r\n\tsvg.html(\"\");\r\n\r\n\tconst g = svg.append(\"g\");\r\n\r\n\tconst link = g\r\n\t\t.append(\"g\")\r\n\t\t.attr(\"stroke-opacity\", linkStrokeOpacity)\r\n\t\t.attr(\"stroke-width\", typeof linkStrokeWidth !== \"function\" ? linkStrokeWidth : null)\r\n\t\t.attr(\"stroke-linecap\", linkStrokeLinecap)\r\n\t\t.selectAll(\"line\")\r\n\t\t.data(links)\r\n\t\t.join(\"line\")\r\n\t\t.attr(\"stroke-dasharray\", (d) => {\r\n\t\t\tif (d.linkType === \"pair\") {\r\n\t\t\t\treturn \"4\";\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t})\r\n\t\t.attr(\"stroke\", linkStroke);\r\n\r\n\tconst nodeGs = g\r\n\t\t.append(\"g\")\r\n\t\t.selectAll(\"g\")\r\n\t\t.data(nodes)\r\n\t\t.enter()\r\n\t\t.append(\"g\")\r\n\t\t.call(drag(simulation) as any);\r\n\r\n\tconst node = nodeGs\r\n\t\t.append(\"circle\")\r\n\t\t.attr(\"stroke\", nodeStroke)\r\n\t\t.attr(\"stroke-opacity\", nodeStrokeOpacity)\r\n\t\t.attr(\"stroke-width\", nodeStrokeWidth)\r\n\t\t.attr(\"fill\", nodeFill)\r\n\t\t.attr(\"r\", nodeRadius);\r\n\r\n\t// Tooltip information\r\n\tlet lastEvent = new Date();\r\n\tnodeGs\r\n\t\t.on(\"mouseover\", function (event, d: Node) {\r\n\t\t\td3.select(this)\r\n\t\t\t\t.select(\"circle\")\r\n\t\t\t\t.attr(\"r\", transformAdjusted(nodeRadius * 2));\r\n\t\t\tif (new Date().getTime() - lastEvent.getTime() > 250) {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: \"selectedResidue\",\r\n\t\t\t\t\tpayload: d,\r\n\t\t\t\t});\r\n\t\t\t\tlastEvent = new Date();\r\n\t\t\t}\r\n\t\t})\r\n\t\t.on(\"mouseout\", function (event, d: Node) {\r\n\t\t\t// transform adjusted radius if needed\r\n\t\t\td3.select(this).select(\"circle\").attr(\"r\", transformAdjusted(nodeRadius));\r\n\r\n\t\t\tif (new Date().getTime() - lastEvent.getTime() > 50) {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: \"selectedResidue\",\r\n\t\t\t\t\tpayload: undefined,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t// Append names\r\n\tconst letters = nodeGs\r\n\t\t.append(\"text\")\r\n\t\t.text((d) => d.name)\r\n\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t.attr(\"font-size\", Letters.size)\r\n\t\t.attr(\"y\", Letters.y) // more centered text\r\n\t\t.attr(\"class\", \"svg-graph-text\");\r\n\r\n\tif (W) link.attr(\"stroke-width\", (d: any) => W[d.index] as any);\r\n\t// if (T) node.append(\"title\").text((d: any) => T[d.index] as any);\r\n\tif (invalidation != null) invalidation.then(() => simulation.stop());\r\n\r\n\tfunction intern(value: any) {\r\n\t\treturn value !== null && typeof value === \"object\" ? value.valueOf() : value;\r\n\t}\r\n\r\n\tfunction ticked() {\r\n\t\tlink\r\n\t\t\t.attr(\"x1\", (d: any) => d.source.x)\r\n\t\t\t.attr(\"y1\", (d: any) => d.source.y)\r\n\t\t\t.attr(\"x2\", (d: any) => d.target.x)\r\n\t\t\t.attr(\"y2\", (d: any) => d.target.y);\r\n\r\n\t\tnodeGs.attr(\"transform\", (d: any) => `translate(${d.x}, ${d.y})`);\r\n\t}\r\n\r\n\tfunction drag(simulation: d3.Simulation<d3.SimulationNodeDatum, undefined>) {\r\n\t\tfunction dragstarted(event: any) {\r\n\t\t\tif (!event.active) simulation.alphaTarget(0.3).restart();\r\n\t\t\tevent.subject.fx = event.subject.x;\r\n\t\t\tevent.subject.fy = event.subject.y;\r\n\t\t}\r\n\r\n\t\tfunction dragged(event: any) {\r\n\t\t\tevent.subject.fx = event.x;\r\n\t\t\tevent.subject.fy = event.y;\r\n\t\t}\r\n\r\n\t\tfunction dragended(event: any) {\r\n\t\t\tif (!event.active) simulation.alphaTarget(0);\r\n\t\t\tevent.subject.fx = null;\r\n\t\t\tevent.subject.fy = null;\r\n\t\t}\r\n\r\n\t\treturn d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\r\n\t}\r\n\r\n\t// Zoom-in functionality\r\n\tconst transformAdjusted: (val: number) => number = (val) => {\r\n\t\tif (transformK) {\r\n\t\t\treturn val / transformK;\r\n\t\t}\r\n\t\treturn val;\r\n\t};\r\n\tlet transform = undefined;\r\n\tlet transformK: undefined | number = undefined;\r\n\tconst zoom = d3.zoom().on(\"zoom\", (e) => {\r\n\t\tg.attr(\"transform\", (transform = e.transform));\r\n\t\tif (transform) {\r\n\t\t\ttransformK = Math.sqrt(transform.k);\r\n\t\t\tg.style(\"stroke-width\", 3 / transformK);\r\n\t\t\tnode.attr(\"r\", nodeRadius / transformK).attr(\"stroke-width\", nodeStrokeWidth / transformK);\r\n\t\t\tletters.attr(\"font-size\", Letters.size / transformK).attr(\"y\", Letters.y / transformK);\r\n\t\t}\r\n\t});\r\n\r\n\tsvg.call(zoom as any).call(zoom.transform as any, d3.zoomIdentity);\r\n\r\n\treturn Object.assign(svg.node(), { scales: { color: null } });\r\n}\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport {\r\n\tAtom,\r\n\tPolymer,\r\n\tResidue,\r\n\tPolymerKind,\r\n\tDNAResidues,\r\n\tResidueName,\r\n\tRNAResidues,\r\n} from \"../lib/types/atoms\";\r\nimport { context } from \"../Store\";\r\nimport { InteractionsFinder } from \"../lib/InteractionsFinder\";\r\nimport { ForceGraph } from \"./../lib/viz/ForceGraph\";\r\nimport { useRef } from \"react\";\r\nimport { Node, Link, LinkType } from \"./../lib/viz/ForceGraph\";\r\n\r\n// Color map for DNA residues\r\ntype cmap = {\r\n\t[key in DNAResidues | RNAResidues]: string;\r\n};\r\nconst ColorMap: cmap = {\r\n\t[DNAResidues.DA]: \"#fcb331\",\r\n\t[DNAResidues.DT]: \"#5670fb\",\r\n\t[DNAResidues.DG]: \"#f63c37\",\r\n\t[DNAResidues.DC]: \"#03c907\",\r\n\r\n\t[RNAResidues.A]: \"#acb331\",\r\n\t[RNAResidues.U]: \"#a670fb\",\r\n\t[RNAResidues.G]: \"#a63c37\",\r\n\t[RNAResidues.C]: \"#a3c907\",\r\n\t[RNAResidues.I]: \"#a3c907\",\r\n};\r\n\r\nconst AT_LINK = \"red\";\r\nconst GC_LINK = \"blue\";\r\nconst LinkColorMap: cmap = {\r\n\t[DNAResidues.DA]: AT_LINK,\r\n\t[DNAResidues.DT]: AT_LINK,\r\n\t[DNAResidues.DG]: GC_LINK,\r\n\t[DNAResidues.DC]: GC_LINK,\r\n\r\n\t[RNAResidues.A]: AT_LINK,\r\n\t[RNAResidues.U]: AT_LINK,\r\n\t[RNAResidues.G]: GC_LINK,\r\n\t[RNAResidues.C]: GC_LINK,\r\n\t[RNAResidues.I]: GC_LINK,\r\n};\r\n\r\n// Chain backbone color\r\nconst DefaultLinkColor = \"#494949\";\r\n\r\nexport function Viewer() {\r\n\tconst [state, dispatch] = useContext(context);\r\n\tconst polymers = state.polymers;\r\n\r\n\tlet ref = React.createRef<SVGSVGElement>();\r\n\tlet tooltip = React.createRef<HTMLDivElement>();\r\n\r\n\tlet containerRef = useRef<HTMLDivElement>(null);\r\n\r\n\t// Currently visualization works only for DNA residues\r\n\tfunction initD3() {\r\n\t\tif (!ref || polymers.length <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconsole.time(\"Nucleic_acid_VIZ\");\r\n\t\tconst iFinder = new InteractionsFinder(polymers);\r\n\t\tlet pairs: Residue[][];\r\n\t\ttry {\r\n\t\t\tpairs = iFinder.watsonCrickPairs();\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: \"error\",\r\n\t\t\t\tpayload: (e as any).toString() as string,\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet nodes: Node[] = [];\r\n\t\tlet links: Link[] = [];\r\n\r\n\t\tconst resToId: (r: Residue) => string = (r) => {\r\n\t\t\treturn `${r.polymerChainIdentifier}:${r.name}${r.sequenceNumber}`;\r\n\t\t};\r\n\t\tconst CollectNodes = (chain: Polymer) => {\r\n\t\t\tconst DNAResidueIndexes = Object.values(DNAResidues);\r\n\t\t\tchain.residues.forEach((r, index) => {\r\n\t\t\t\tnodes.push({\r\n\t\t\t\t\t...r,\r\n\t\t\t\t\thash: r.hash,\r\n\t\t\t\t\tname: r.name.toString().slice(-1), // remove D from name\r\n\t\t\t\t\tid: resToId(r),\r\n\t\t\t\t\tcolor: ColorMap[r.name as DNAResidues],\r\n\t\t\t\t\tgroup: DNAResidueIndexes.indexOf(r.name as DNAResidues) + 1,\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Collect links to previous residue in same chain\r\n\t\t\t\tlet residues = chain.residues;\r\n\t\t\t\tif (index > 0 && index < residues.length) {\r\n\t\t\t\t\tlinks.push({\r\n\t\t\t\t\t\tsource: resToId(residues[index - 1]),\r\n\t\t\t\t\t\ttarget: resToId(r),\r\n\t\t\t\t\t\tvalue: 1,\r\n\t\t\t\t\t\tcolor: DefaultLinkColor,\r\n\t\t\t\t\t\tlinkType: LinkType.Backbone,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t// Collect nodes for all available nucleic acids\r\n\t\t// CollectNodes(chain1);\r\n\t\t// CollectNodes(chain2);\r\n\t\tiFinder.nucleicAcids.forEach((chain) => CollectNodes(chain));\r\n\r\n\t\t// Collect links for watson-crick pairs\r\n\t\tpairs.forEach((p) => {\r\n\t\t\tconst r1 = p[0];\r\n\t\t\tif (p.length === 2) {\r\n\t\t\t\tconst r2 = p[1];\r\n\t\t\t\tlinks.push({\r\n\t\t\t\t\tsource: resToId(r2),\r\n\t\t\t\t\ttarget: resToId(r1),\r\n\t\t\t\t\tvalue: 1,\r\n\t\t\t\t\tcolor: LinkColorMap[r1.name as DNAResidues],\r\n\t\t\t\t\tlinkType: LinkType.Pair,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconsole.log(\"Vizualization data:\", nodes, links);\r\n\r\n\t\t// svg dimensions should fit the container\r\n\t\tlet [w, h] = [\r\n\t\t\t(containerRef.current as HTMLDivElement).offsetWidth,\r\n\t\t\t(containerRef.current as HTMLDivElement).offsetHeight,\r\n\t\t];\r\n\r\n\t\t// Draw the visualization\r\n\t\tForceGraph(\r\n\t\t\t{\r\n\t\t\t\tnodes,\r\n\t\t\t\tlinks,\r\n\t\t\t\tsvgRef: ref.current as SVGSVGElement,\r\n\t\t\t\tdispatch,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: w,\r\n\t\t\t\theight: h,\r\n\t\t\t} as any,\r\n\t\t);\r\n\r\n\t\tconsole.timeEnd(\"Nucleic_acid_VIZ\");\r\n\t}\r\n\r\n\tuseEffect(initD3, [polymers]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div>{state.simpleStuffy}</div>\r\n\t\t\t<div className=\"p-5 flex items-center flex-col h-full\" ref={containerRef}>\r\n\t\t\t\t<div className=\"min-w-full h-full relative\">\r\n\t\t\t\t\t<svg ref={ref}></svg>\r\n\t\t\t\t\t{state.selectedResidue && (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName=\"\r\n\t\t\t\t\t\t\t\ttext-xs p-4\r\n\t\t\t\t\t\t\t\tabsolute bottom-[10px] right-[10px]\r\n\t\t\t\t\t\t\t\tw-[50%] h-[100px] bg-indigo-400\r\n\t\t\t\t\t\t\t\toverflow-auto text-white rounded-lg\r\n\t\t\t\t\t\t\t\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div>Chain: {state.selectedResidue.polymerChainIdentifier}</div>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\tResidue: {state.selectedResidue.name}:{state.selectedResidue.sequenceNumber}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\tInteractions:{\" \"}\r\n\t\t\t\t\t\t\t\t{state.selectedResidue.interactions.map((i) => (\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{i.polymerKind} - {i.residue}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div ref={tooltip} style={{ position: \"absolute\", opacity: 0, background: \"#fff\" }}></div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n","import clone from \"clone\";\r\nimport {\r\n\tAtom,\r\n\tPDBFile,\r\n\tPolymer,\r\n\tPolymerKind,\r\n\tpolymerKindFromAtom,\r\n\tResidue,\r\n\tResidueImplementation,\r\n\tCoord,\r\n\tRemark350Transformations,\r\n} from \"./types/atoms\";\r\nimport hash from \"object-hash\";\r\nimport { calculateNucleotidePlaneVectors } from \"./NucleicAcids\";\r\nimport { Vector } from \"./Math\";\r\n\r\nexport class PDBHandler {\r\n\tfile?: File;\r\n\r\n\tconstructor(file?: File) {\r\n\t\tif (file !== undefined) {\r\n\t\t\tthis.file = file;\r\n\t\t}\r\n\t}\r\n\r\n\tasync readData(): Promise<PDBFile> {\r\n\t\tif (this.file == undefined) {\r\n\t\t\tthrow Error(\"file not provided\");\r\n\t\t}\r\n\t\tlet text = await this.file.text();\r\n\t\treturn this.format(text);\r\n\t}\r\n\r\n\tformat(text: string): PDBFile {\r\n\t\treturn {\r\n\t\t\traw: this.formatText(text),\r\n\t\t\tpolymers: this.formatPolymers(text),\r\n\t\t};\r\n\t}\r\n\r\n\tformatText(text: string): string {\r\n\t\treturn text\r\n\t\t\t.split(\"\\n\")\r\n\t\t\t.map((line, index) => index.toString() + \". \" + line)\r\n\t\t\t.join(\"\\n\");\r\n\t}\r\n\r\n\t/**\r\n\t * formatAtoms parses PDB strting into Polymer[] data structure\r\n\t *\r\n\t * PDB File keywords: ATOM - atom information TER - terminates\r\n\t * sequence of previously provided ATOMs\r\n\t *\r\n\t * @param text\r\n\t * @returns\r\n\t */\r\n\tformatPolymers(text: string): Polymer[] {\r\n\t\tlet result: Polymer[] = [];\r\n\r\n\t\t// Helper functions to quickly create objects\r\n\t\tconst newPolymer = (): Polymer => {\r\n\t\t\treturn {\r\n\t\t\t\tchainIdentifier: \"\",\r\n\t\t\t\tresidues: [],\r\n\t\t\t\tkind: PolymerKind.Unknown,\r\n\t\t\t};\r\n\t\t};\r\n\t\tconst newResidue = (): Residue => {\r\n\t\t\treturn new ResidueImplementation();\r\n\t\t};\r\n\t\t// Helper to push currentResidue to currentPolymer\r\n\t\tconst pushResidue = (): void => {\r\n\t\t\t// hash will be useful to uniquely identify each residue.\r\n\t\t\tcurrentResidue.hash = hash(currentResidue);\r\n\t\t\tcurrentPolymer.residues.push(currentResidue);\r\n\t\t};\r\n\r\n\t\tlet currentPolymer = newPolymer();\r\n\t\tlet currentResidue = newResidue();\r\n\r\n\t\t// Polymer kind determination functionality\r\n\t\ttype currentPolymerKind = {\r\n\t\t\t[key in PolymerKind | number | string]: number;\r\n\t\t};\r\n\t\t// Realistically - there should be only 1 PolymerKind for given\r\n\t\t// polymer, but in case it is not, we can check which kind appears\r\n\t\t// more often than others to determine true PolymerKind.\r\n\t\tconst determinePolymerKindAndReset = (\r\n\t\t\tc?: currentPolymerKind,\r\n\t\t): [currentPolymerKind, PolymerKind] | currentPolymerKind => {\r\n\t\t\tlet obj = {\r\n\t\t\t\t[PolymerKind.DNA]: 0,\r\n\t\t\t\t[PolymerKind.RNA]: 0,\r\n\t\t\t\t[PolymerKind.Protein]: 0,\r\n\t\t\t};\r\n\t\t\tif (c === undefined) {\r\n\t\t\t\treturn obj;\r\n\t\t\t}\r\n\t\t\treturn [\r\n\t\t\t\tobj, // reset obj\r\n\t\t\t\t// Get the PolymerKind that has the largest number of\r\n\t\t\t\t// occurrences\r\n\t\t\t\tObject.keys(c).reduce((a: any, b: any) => (c[a] > c[b] ? a : b)) as unknown as PolymerKind,\r\n\t\t\t];\r\n\t\t};\r\n\t\tlet currentPolymerKindCounter = determinePolymerKindAndReset() as currentPolymerKind;\r\n\r\n\t\t// REMARK 350 transformations information\r\n\t\tlet transformations: Remark350Transformations[] = [];\r\n\t\t// There might be multiple different groups of transformations for\r\n\t\t// different chains, so we keep track of current one\r\n\t\tlet currentTransformation: Remark350Transformations;\r\n\t\t// Indicates that we are currently processing rotation/translation\r\n\t\t// lines preceded by REMARK 350: APPLY THE FOLLOWING <...>\r\n\t\tlet remark350TransformLines = false;\r\n\t\t// Helper\r\n\t\tconst resetTransformation = () => {\r\n\t\t\tcurrentTransformation = {\r\n\t\t\t\tchains: [],\r\n\t\t\t\trotations: [],\r\n\t\t\t\ttranslations: [Vector.infinity()],\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\t// Here we will process the pdb text line by line\r\n\t\ttext.split(\"\\n\").forEach((line) => {\r\n\t\t\t// Parse ATOM lines\r\n\t\t\tif (line.startsWith(\"ATOM\") || line.startsWith(\"HETATM\")) {\r\n\t\t\t\t// https://www.cgl.ucsf.edu/chimera/docs/UsersGuide/tutorials/pdbintro.html\r\n\t\t\t\tlet x = parseFloat(line.slice(30, 38).trim());\r\n\t\t\t\tlet y = parseFloat(line.slice(38, 46).trim());\r\n\t\t\t\tlet z = parseFloat(line.slice(46, 54).trim());\r\n\r\n\t\t\t\tlet name = line.slice(12, 16).trim();\r\n\t\t\t\tlet residueName = line.slice(17, 20).trim();\r\n\t\t\t\tlet element = line.slice(76, 78).trim();\r\n\t\t\t\tlet residueSequenceNumber = parseInt(line.slice(22, 26).trim());\r\n\r\n\t\t\t\t// Chain identifier for current polymer is 1 letter\r\n\t\t\t\tlet chainIdentifier = line.slice(21, 22);\r\n\t\t\t\tcurrentPolymer.chainIdentifier = chainIdentifier;\r\n\r\n\t\t\t\t// Construct new atom entry\r\n\t\t\t\tconst atom: Atom = {\r\n\t\t\t\t\tcoords: new Coord(x, y, z),\r\n\t\t\t\t\tname,\r\n\t\t\t\t\telement,\r\n\t\t\t\t\tresidueName,\r\n\t\t\t\t\tresidueSequenceNumber,\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Increment probable polymer kind from residue\r\n\t\t\t\tcurrentPolymerKindCounter[polymerKindFromAtom(atom)]++;\r\n\r\n\t\t\t\t// Set residue sequence number and residue name for first\r\n\t\t\t\t// time\r\n\t\t\t\tif (currentResidue.sequenceNumber === -1) {\r\n\t\t\t\t\tcurrentResidue.name = atom.residueName;\r\n\t\t\t\t\tcurrentResidue.sequenceNumber = residueSequenceNumber;\r\n\t\t\t\t\tcurrentResidue.polymerChainIdentifier = chainIdentifier;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If residue sequence number does not match with current\r\n\t\t\t\t// atom's - add residue to polymer and reset\r\n\t\t\t\t// currentResidue to a new one\r\n\t\t\t\tif (residueSequenceNumber !== currentResidue.sequenceNumber) {\r\n\t\t\t\t\tpushResidue();\r\n\t\t\t\t\tcurrentResidue = newResidue();\r\n\t\t\t\t\tcurrentResidue.name = atom.residueName;\r\n\t\t\t\t\tcurrentResidue.sequenceNumber = residueSequenceNumber;\r\n\t\t\t\t\tcurrentResidue.polymerChainIdentifier = chainIdentifier;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentResidue.atoms.push(atom);\r\n\t\t\t}\r\n\t\t\t// TER indicates the end of current polymer (chain of\r\n\t\t\t// residues)\r\n\t\t\tif (line.startsWith(\"TER\")) {\r\n\t\t\t\t// Don't forget to push residue\r\n\t\t\t\tpushResidue();\r\n\r\n\t\t\t\t// Get polymer kind and reset counter\r\n\t\t\t\tlet [c, kind] = determinePolymerKindAndReset(currentPolymerKindCounter) as [\r\n\t\t\t\t\tcurrentPolymerKind,\r\n\t\t\t\t\tPolymerKind,\r\n\t\t\t\t];\r\n\t\t\t\tcurrentPolymerKindCounter = c;\r\n\t\t\t\tcurrentPolymer.kind = kind;\r\n\r\n\t\t\t\t// This must be calculated beforehand. As these values\r\n\t\t\t\t// will be used in watson crick search later.\r\n\t\t\t\tcurrentPolymer = calculateNucleotidePlaneVectors(currentPolymer);\r\n\r\n\t\t\t\t// Save polymer\r\n\t\t\t\tresult.push(currentPolymer);\r\n\r\n\t\t\t\t// Reset current polymer and residue\r\n\t\t\t\tcurrentPolymer = newPolymer();\r\n\t\t\t\tcurrentResidue = newResidue();\r\n\t\t\t}\r\n\r\n\t\t\t// Asymetric unit transformations & Biological assemblies\r\n\t\t\tif (line.startsWith(\"REMARK 350\")) {\r\n\t\t\t\tremark350TransformLines = true;\r\n\r\n\t\t\t\t// Collect information which chains should be transformed\r\n\t\t\t\tconst transformPrefixes = [\r\n\t\t\t\t\t\"REMARK 350 APPLY THE FOLLOWING TO CHAINS: \", // First line - we should reset currentTransform when this occurs\r\n\t\t\t\t\t\"REMARK 350                    AND CHAINS:\",\r\n\t\t\t\t];\r\n\t\t\t\ttransformPrefixes.forEach((transformPrefix, i) => {\r\n\t\t\t\t\tif (line.startsWith(transformPrefix)) {\r\n\t\t\t\t\t\tlet chains = line\r\n\t\t\t\t\t\t\t.trim()\r\n\t\t\t\t\t\t\t.slice(transformPrefix.length - 1, line.length)\r\n\t\t\t\t\t\t\t.toString()\r\n\t\t\t\t\t\t\t.replaceAll(\" \", \"\")\r\n\t\t\t\t\t\t\t.split(\",\");\r\n\r\n\t\t\t\t\t\t// Reset currentTransformation\r\n\t\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\t\tresetTransformation();\r\n\r\n\t\t\t\t\t\t\t// Push to transformations if there was\r\n\t\t\t\t\t\t\t// anything previously\r\n\t\t\t\t\t\t\tif (currentTransformation.chains.length > 0) {\r\n\t\t\t\t\t\t\t\ttransformations.push(currentTransformation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Must be after the 0 index reset\r\n\t\t\t\t\t\tif (chains.length > 0) {\r\n\t\t\t\t\t\t\tcurrentTransformation.chains.push(...chains);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Collect transformation matrices (array of 3x3 matrices)\r\n\t\t\t\tif (line.startsWith(\"REMARK 350   BIOMT\")) {\r\n\t\t\t\t\tlet woPrefix = line.replace(\"REMARK 350   BIOMT\", \"\");\r\n\t\t\t\t\tlet matchArray = woPrefix.match(\r\n\t\t\t\t\t\tnew RegExp(\r\n\t\t\t\t\t\t\t// 1   1  1.000000  0.000000  0.000000 0.00000\r\n\t\t\t\t\t\t\t/(\\d{1})\\s*(\\d{1})\\s*([+-]?[0-9]*[.]?[0-9]+)\\s*([+-]?[0-9]*[.]?[0-9]+)\\s*([+-]?[0-9]*[.]?[0-9]+)\\s*([+-]?[0-9]*[.]?[0-9]+)/,\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (matchArray != null && matchArray.length === 6 + 1) {\r\n\t\t\t\t\t\tmatchArray = matchArray.slice(1);\r\n\t\t\t\t\t\tlet nthTransformation = parseInt(matchArray[1]) - 1;\r\n\t\t\t\t\t\tlet nthRow = parseInt(matchArray[0]) - 1;\r\n\t\t\t\t\t\tlet rotationRow = [\r\n\t\t\t\t\t\t\tparseFloat(matchArray[2]),\r\n\t\t\t\t\t\t\tparseFloat(matchArray[3]),\r\n\t\t\t\t\t\t\tparseFloat(matchArray[4]),\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t\tlet translation = parseFloat(matchArray[5]);\r\n\r\n\t\t\t\t\t\t// Set translations\r\n\t\t\t\t\t\tif (typeof currentTransformation.translations[nthTransformation] === \"undefined\") {\r\n\t\t\t\t\t\t\tcurrentTransformation.translations[nthTransformation] = Vector.infinity();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentTransformation.translations[nthTransformation].setIndex(nthRow, translation);\r\n\r\n\t\t\t\t\t\t// Set rotations\r\n\t\t\t\t\t\tif (!Array.isArray(currentTransformation.rotations[nthTransformation])) {\r\n\t\t\t\t\t\t\tcurrentTransformation.rotations[nthTransformation] = [];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcurrentTransformation.rotations[nthTransformation][nthRow] = rotationRow;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Push transformations to array\r\n\t\t\t\tif (remark350TransformLines) {\r\n\t\t\t\t\ttransformations.push(currentTransformation);\r\n\t\t\t\t\tresetTransformation();\r\n\t\t\t\t}\r\n\t\t\t\t// Cleanup in-memory values\r\n\t\t\t\tremark350TransformLines = false;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Generate biological assembly\r\n\t\ttransformations.forEach((transformation) => {\r\n\t\t\tconst chainsToTransform = result.filter((p) => {\r\n\t\t\t\treturn transformation.chains.indexOf(p.chainIdentifier) !== -1;\r\n\t\t\t});\r\n\r\n\t\t\t// Always skip identity matrix which is first rotation element\r\n\t\t\tconst rs = transformation.rotations.slice(1);\r\n\t\t\tconst ts = transformation.translations.slice(1);\r\n\r\n\t\t\t// Perform transformations and clone objects\r\n\t\t\trs.forEach((rotation, rotationIndex) => {\r\n\t\t\t\tchainsToTransform.forEach((chain) => {\r\n\t\t\t\t\tlet chainClone = clone(chain, { includeNonEnumerable: true });\r\n\t\t\t\t\tchainClone.chainIdentifier = chainClone.chainIdentifier + (rotationIndex + 1).toString();\r\n\t\t\t\t\tchainClone.generatedFromTransform = true;\r\n\t\t\t\t\tchainClone.residues.forEach((newResidue, rindex) => {\r\n\t\t\t\t\t\tnewResidue.polymerChainIdentifier = chainClone.chainIdentifier;\r\n\t\t\t\t\t\tnewResidue.atoms.forEach((newAtom, aindex) => {\r\n\t\t\t\t\t\t\tlet oldCoords = newAtom.coords.toVec();\r\n\t\t\t\t\t\t\tlet newCoords = Vector.infinity();\r\n\r\n\t\t\t\t\t\t\t// Matrix and vector multiplication for\r\n\t\t\t\t\t\t\t// rotation\r\n\t\t\t\t\t\t\tconsole.log(\"Coorinates before:\", oldCoords);\r\n\t\t\t\t\t\t\tnewCoords.x =\r\n\t\t\t\t\t\t\t\toldCoords.x * rotation[0][0] +\r\n\t\t\t\t\t\t\t\toldCoords.y * rotation[0][1] +\r\n\t\t\t\t\t\t\t\toldCoords.z * rotation[0][2];\r\n\t\t\t\t\t\t\tnewCoords.y =\r\n\t\t\t\t\t\t\t\toldCoords.x * rotation[1][0] +\r\n\t\t\t\t\t\t\t\toldCoords.y * rotation[1][1] +\r\n\t\t\t\t\t\t\t\toldCoords.z * rotation[1][2];\r\n\t\t\t\t\t\t\tnewCoords.z =\r\n\t\t\t\t\t\t\t\toldCoords.x * rotation[2][0] +\r\n\t\t\t\t\t\t\t\toldCoords.y * rotation[2][1] +\r\n\t\t\t\t\t\t\t\toldCoords.z * rotation[2][2];\r\n\r\n\t\t\t\t\t\t\t// TODO translations\r\n\t\t\t\t\t\t\t// Each rotation must have a translation\r\n\t\t\t\t\t\t\tconst t = ts[rotationIndex];\r\n\t\t\t\t\t\t\tnewCoords = newCoords.add(t);\r\n\r\n\t\t\t\t\t\t\tconsole.log(\"Coords after:\", newCoords);\r\n\t\t\t\t\t\t\tconsole.log(\"Distance between atoms: \", newCoords.distanceTo(oldCoords));\r\n\r\n\t\t\t\t\t\t\t// Update coords\r\n\t\t\t\t\t\t\tnewAtom.coords = newCoords.toCoord();\r\n\t\t\t\t\t\t\tnewResidue.atoms[aindex] = newAtom;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tnewResidue.hash = hash(newResidue);\r\n\t\t\t\t\t\tchainClone.residues[rindex] = newResidue;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Since we have new coordinates for transformed\r\n\t\t\t\t\t// chains, plane vectors must be recalculated\r\n\t\t\t\t\tchainClone = calculateNucleotidePlaneVectors(chainClone);\r\n\t\t\t\t\tresult.push(chainClone);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tconsole.log(\"Transformations:\", transformations);\r\n\t\tconsole.log(\"Result after translation\", result);\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n","import { ChangeEventHandler, ChangeEvent, useEffect, useContext, useRef } from \"react\";\r\nimport { PDBHandler } from \"../lib/PDBHandler\";\r\nimport { PDBFile, Polymer } from \"../lib/types/atoms\";\r\nimport { context } from \"../Store\";\r\n\r\n// Fetch PDB text for given id (if valid)\r\nconst fetchPDBFile = async (id: string): Promise<string> => {\r\n\tconst response = await fetch(`https://files.rcsb.org/download/${id}.pdb`);\r\n\tconst pdbText = await response.text();\r\n\treturn pdbText;\r\n};\r\n\r\nexport function DataFetcher() {\r\n\tconst [state, dispatch] = useContext(context);\r\n\r\n\tconst startLoading = () => {\r\n\t\tdispatch({\r\n\t\t\ttype: \"isLoading\",\r\n\t\t\tpayload: true,\r\n\t\t});\r\n\t};\r\n\tconst stopLoading = () => {\r\n\t\tdispatch({\r\n\t\t\ttype: \"isLoading\",\r\n\t\t\tpayload: false,\r\n\t\t});\r\n\t};\r\n\tconst updatePDBState = (pdb: PDBFile) => {\r\n\t\tdispatch({\r\n\t\t\ttype: \"pdb\",\r\n\t\t\tpayload: pdb,\r\n\t\t});\r\n\t};\r\n\tconst updateCurrentPDBId = (id: string) => {\r\n\t\tdispatch({\r\n\t\t\ttype: \"currentPDBId\",\r\n\t\t\tpayload: id,\r\n\t\t});\r\n\t};\r\n\t// Update polymers in store, generate visualization data structure\r\n\tconst updatePolymers = (polymers: Polymer[]) => {\r\n\t\tdispatch({\r\n\t\t\ttype: \"polymers\",\r\n\t\t\tpayload: polymers,\r\n\t\t});\r\n\t};\r\n\tconst resetState = () => {\r\n\t\tdispatch({\r\n\t\t\ttype: \"resetState\",\r\n\t\t\tpayload: null,\r\n\t\t});\r\n\t};\r\n\r\n\t// Process fetching and loading PDB file from rcsb\r\n\tconst loadPDBID = async (id: string) => {\r\n\t\tresetState();\r\n\t\tstartLoading();\r\n\t\tconst pdb = new PDBHandler().format(await fetchPDBFile(id));\r\n\t\tupdatePDBState(pdb);\r\n\t\tupdatePolymers(pdb.polymers);\r\n\t\tupdateCurrentPDBId(id);\r\n\t\tstopLoading();\r\n\t};\r\n\r\n\t// Fetch PDB file by given id parameter. Must run only once\r\n\tuseEffect(() => {\r\n\t\tconst url = new URLSearchParams(window.location.search);\r\n\t\tconst id = url.get(\"id\");\r\n\t\tconsole.log(\"ID\", id);\r\n\t\tif (id !== null) {\r\n\t\t\tloadPDBID(id);\r\n\t\t}\r\n\t}, []);\r\n\r\n\t// Updates pbd file information from uploaded file, parses pdb data and performs interaction calculations\r\n\tconst handleFileChange: ChangeEventHandler<HTMLInputElement> = async (event: ChangeEvent) => {\r\n\t\tlet f = (event.target as HTMLInputElement).files?.item(0);\r\n\t\tif (f !== null) {\r\n\t\t\tresetState();\r\n\t\t\t// Show spinner while loading\r\n\t\t\tstartLoading();\r\n\r\n\t\t\t// Read and parse the file\r\n\t\t\tconsole.time(\"TIME_TO_PARSE_EVERYTHING\");\r\n\t\t\tconsole.time(\"TIME_TO_PARSE_PDB\");\r\n\t\t\tconst pdb = await new PDBHandler(f as File).readData();\r\n\t\t\tconsole.timeEnd(\"TIME_TO_PARSE_PDB\");\r\n\r\n\t\t\t// Update state with parsed values\r\n\t\t\tupdatePDBState(pdb);\r\n\t\t\tupdatePolymers(pdb.polymers);\r\n\r\n\t\t\t// Some fake loading time, so we get to see the spinner :)\r\n\t\t\tconsole.timeEnd(\"TIME_TO_PARSE_EVERYTHING\");\r\n\t\t\tsetTimeout(stopLoading, 2000);\r\n\t\t}\r\n\t};\r\n\r\n\tlet pdbText: JSX.Element | undefined;\r\n\tif (state.polymers.length > 0) {\r\n\t\tpdbText = (\r\n\t\t\t<div className=\"mt-5\">\r\n\t\t\t\t<div className=\"mb-1\">Provided input file</div>\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tclassName=\"text-sm w-full border h-96 border-blue-100\"\r\n\t\t\t\t\tvalue={state.pdb?.raw}\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tconst pdbIdRef = useRef<HTMLInputElement>(null);\r\n\tconst handlePDBIdChange = () => {\r\n\t\tconst pdbId = pdbIdRef.current?.value;\r\n\t\tif (pdbId) {\r\n\t\t\tloadPDBID(pdbId);\r\n\t\t}\r\n\t};\r\n\t// Update pdbIdRef value whenever pdb id changes\r\n\t// Render data fetcher box\r\n\treturn (\r\n\t\t<div className=\"p-5 max-h-screen overflow-auto break-words\">\r\n\t\t\t{!state.isLoading && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{state.error.length > 0 && (\r\n\t\t\t\t\t\t<div className=\"mb-4\">\r\n\t\t\t\t\t\t\t<div className=\"text-red-700 font-bold text-lg\">\r\n\t\t\t\t\t\t\t\tSomething went wrong: {state.error}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{state.pdb === undefined && (\r\n\t\t\t\t\t\t<div className=\"text-sm text-gray-600 mb-4 bg-red-200 p-2\">\r\n\t\t\t\t\t\t\tChoose a PDB file which contains DNA/RNA with Proteins\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t{state.currentPDBId.length > 0 && (\r\n\t\t\t\t\t\t\t<div className=\"mb-4\">\r\n\t\t\t\t\t\t\t\tCurrently selected PDB ID:\r\n\t\t\t\t\t\t\t\t<b>{state.currentPDBId.toUpperCase()}</b>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<div className=\"mb-4\">\r\n\t\t\t\t\t\t\t<div className=\"text-normal font-bold text-gray-600 mb-2\">\r\n\t\t\t\t\t\t\t\tEnter PDB file ID:\r\n\t\t\t\t\t\t\t\t<div className=\"text-xs font-normal\">\r\n\t\t\t\t\t\t\t\t\tPDB file should contain <b>DNA/RNA</b> structures\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"flex flex-row max-w-full\">\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\tonKeyPress={(e) => {\r\n\t\t\t\t\t\t\t\t\t\tif (e.key === \"Enter\") {\r\n\t\t\t\t\t\t\t\t\t\t\thandlePDBIdChange();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tref={pdbIdRef}\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"1ZS4\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"border-r-0 outline-none ring-indigo-200 focus:ring-2 transition-all block py-1 px-2 outline-0 border border-indigo-300 rounded rounded-tr-none rounded-br-none\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tonClick={handlePDBIdChange}\r\n\t\t\t\t\t\t\t\t\tclassName=\"bg-indigo-400 border-l-0 text-white font-bold text-sm ring-indigo-200 focus:ring-2 hover:bg-indigo-600 transition-all w-[100px]  block rounded rounded-tl-none rounded-bl-none border border-indigo-300\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tGO\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"text-normal font-bold text-gray-600 mb-2\">\r\n\t\t\t\t\t\t\tOr choose a PDB file to display:\r\n\t\t\t\t\t\t\t<div className=\"text-xs font-normal\">\r\n\t\t\t\t\t\t\t\tPDB file should contain <b>DNA/RNA</b> structures\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<input type=\"file\" onChange={handleFileChange} className=\"max-w-full\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{pdbText}\r\n\t\t\t{state.pdb && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\tPolymers from input:\r\n\t\t\t\t\t{state.polymers.map(({ residues, chainIdentifier, kind }, k) => (\r\n\t\t\t\t\t\t<div className=\"ml-2\" key={k}>\r\n\t\t\t\t\t\t\tChain:{\" \"}\r\n\t\t\t\t\t\t\t<b>\r\n\t\t\t\t\t\t\t\t{chainIdentifier} ({kind})\r\n\t\t\t\t\t\t\t</b>\r\n\t\t\t\t\t\t\t<div className=\"ml-2\">\r\n\t\t\t\t\t\t\t\t{residues.map((residue, key) => {\r\n\t\t\t\t\t\t\t\t\treturn <span key={key}>{residue.name} &nbsp;</span>;\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n","import './../css/spinner.css';\r\n\r\nconst Spinner = () => {\r\n\treturn (\r\n\t\t<div className=\"flex flex-col items-center gap-1\">\r\n\t\t\t<div className=\"text-white font-bold\">Loading</div>\r\n\t\t\t<div className=\"lds-roller\">\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Spinner;\r\n","import { useContext, ReactElement } from 'react';\r\nimport { Viewer } from './components/Viewer';\r\nimport { DataFetcher } from './components/DataFetcher';\r\nimport Spinner from './components/Spinner';\r\nimport { StoreComponent, context } from './Store';\r\n\r\nexport function App() {\r\n\tconst state = useContext(context)[0];\r\n\r\n\treturn (\r\n\t\t<div className=\"w-full flex flex-row\">\r\n\t\t\t{state.isLoading === true && (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"fixed w-screen min-h-screen top-0 left-0 flex items-center justify-center z-50  h-full\"\r\n\t\t\t\t\tstyle={{ backgroundColor: 'rgba(0,0,0,0.75)' }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Spinner />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t<div className=\"z-10 w-9/12 bg-indigo-200 min-h-full h-screen\">\r\n\t\t\t\t<Viewer />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"z-10 w-3/12\">\r\n\t\t\t\t<DataFetcher />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\ninterface Props {\r\n\tchildren: ReactElement;\r\n}\r\n\r\n// We want to provide nice loading animation at the top level.\r\n// So this wrapper simply allows App to use context state.\r\nexport function AppWrapper({ children }: Props) {\r\n\treturn <StoreComponent>{children}</StoreComponent>;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App, AppWrapper } from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<AppWrapper>\r\n\t\t\t<App />\r\n\t\t</AppWrapper>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\"),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}