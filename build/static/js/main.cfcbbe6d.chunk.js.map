{"version":3,"sources":["lib/types/atoms.ts","lib/Vector.ts","Store.tsx","lib/AtomsFunctions.ts","lib/types/interactions.ts","lib/InteractionsFinder.ts","lib/viz/ForceGraph.ts","lib/NucleicAcids.ts","components/Viewer.tsx","lib/PDBHandler.ts","components/DataFetcher.tsx","components/Spinner.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AtomRemoteness","Vector","x","y","z","this","v","Math","sqrt","dot","length","divide","min","max","theta","atan2","phi","asin","a","acos","n","slice","unit","b","c","cos","sin","fromAngles","random","PI","fraction","subtract","multiply","add","angleTo","Infinity","Coord","fromArray","coordinateToArray","DNAResidues","RNAResidues","ProteinResidues","PolymerKind","ResidueImplementation","center","interactions","atoms","o","hash","name","sequenceNumber","polymerChainIdentifier","infinity","names","ret","forEach","indexOf","push","sort","initialState","polymers","pdb","undefined","isLoading","simpleStuffy","hashedNucleicAcidResidues","viz","chain1","chain2","currentPDBId","selectedResidue","context","createContext","reducer","state","type","payload","Error","StoreComponent","children","useReducer","dispatch","Provider","value","calculateCenters","p","residues","residue","i","coordinate","atom","coords","distanceBetween2Points","p1","p2","pow","InteractionType","LinkType","InteractionsFinder","nucleicAcids","proteins","visualization","prepareObjects","kind","DNA","pairs1","calculateWatsonCrickPairs","pairs2","reverse","completePairs","pair","pairFoundIn1","console","log","pairs","r1","bestR2","smallestDistance","r2","r1Cs","findAtomsByNames","r1DistToR2VO","abs","toVec","r2Cs","r2DistToR1VO","DA","DT","DC","DG","isWatsonCrickPair","findNucleicAcids","findProteins","polymer","filter","Protein","RNA","nacid","nacidI","nacidResidue","nacidResidueI","pResidue","THRESHOLD_DISTANCE","nacidAtom","pAtom","r","distanceAtoms","Threshold","polymerKind","meta","distance","Letters","ColorMap","GC_LINK","LinkColorMap","Viewer","useContext","ref","React","createRef","tooltip","containerRef","useRef","map","useEffect","time","iFinder","watsonCrickPairs","dna","nodes","links","resToId","CollectNodes","chain","index","toString","id","color","group","DNAResidueIndexes","source","target","linkType","Backbone","Object","values","Pair","current","offsetWidth","offsetHeight","w","h","opts","svgRef","nodeId","d","nodeTitle","nodeGroups","nodeFill","nodeStroke","nodeStrokeWidth","nodeStrokeOpacity","nodeRadius","nodeStrength","linkStroke","linkStrokeOpacity","linkStrokeWidth","linkStrokeLinecap","linkStrength","width","height","invalidation","initialNodes","initialLinks","N","d3","valueOf","_","W","forceNode","forceLink","strength","simulation","force","on","link","attr","nodeGs","svg","html","g","append","selectAll","data","join","enter","call","event","active","alphaTarget","restart","subject","fx","fy","drag","node","lastEvent","Date","select","transformAdjusted","getTime","letters","text","then","stop","val","transformK","transform","zoom","e","k","style","assign","scales","ForceGraph","timeEnd","className","position","opacity","background","PDBHandler","file","format","raw","formatText","formatPolymers","split","line","result","newPolymer","chainIdentifier","Unknown","newResidue","pushResidue","currentResidue","currentPolymer","determinePolymerKindAndReset","obj","keys","reduce","currentPolymerKindCounter","startsWith","parseFloat","trim","residueName","element","residueSequenceNumber","parseInt","polymerKindFromAtom","cNames","cAtoms","c2","c4","c6","cross","normalize","calculateNucleotidePlaneVectors","fetchPDBFile","fetch","response","pdbText","DataFetcher","startLoading","stopLoading","updatePDBState","updateCurrentPDBId","updatePolymers","loadPDBID","URLSearchParams","window","location","search","get","handleFileChange","f","files","item","readData","setTimeout","readOnly","pdbIdRef","handlePDBIdChange","pdbId","toUpperCase","onKeyPress","key","placeholder","onClick","onChange","Spinner","App","backgroundColor","AppWrapper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfcbbe6d.chunk.js","sourcesContent":["/**\r\n * Formats of spatial data for visualization\r\n */\r\n\r\nimport { Vector } from \"../Vector\";\r\nimport { Interaction } from \"./interactions\";\r\n\r\n// Coordinate represents a 3-dimensional coordinate set\r\nexport interface Coordinate {\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n\r\n    // Converts coordinate to vector\r\n    toVec: () => Vector,\r\n}\r\n\r\nexport class Coord implements Coordinate {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public z: number,\r\n    ) { }\r\n    toVec(): Vector {\r\n        return Vector.fromArray(coordinateToArray(this))\r\n    }\r\n}\r\n\r\n// Helper\r\nexport function coordinateToArray(c: Coordinate): number[] {\r\n    return [c.x, c.y, c.z];\r\n}\r\n\r\n// Structure for ATOM records in pdb file\r\nexport interface Atom {\r\n    coords: Coordinate,\r\n    name: string,\r\n    residueName: ResidueName,\r\n    element: string,\r\n    residueSequenceNumber: number,\r\n}\r\n\r\nexport type Atoms = Atom[];\r\n\r\n/**\r\n * Atom names might contain remoteness symbols. Here is a small mapping up\r\n * to H\r\n *\r\n * @example AtomRemoteness[\"A\"]\r\n */\r\nexport enum AtomRemoteness {\r\n    A = 'α',\r\n    B = 'β',\r\n    G = 'γ',\r\n    D = 'δ',\r\n    E = 'ε',\r\n    Z = 'ζ',\r\n    H = 'η',\r\n}\r\n\r\nexport type ResidueName = string | DNAResidues | RNAResidues | ProteinResidues;\r\n\r\n// Met information about residue, not helpful for calculations\r\nexport interface ResidueMeta {\r\n    // hash allows to uniquely identify each residue\r\n    hash: string,\r\n    name: ResidueName,\r\n    sequenceNumber: number,\r\n    polymerChainIdentifier: string,\r\n    // polymerKind: PolymerKind,\r\n}\r\n\r\n/**\r\n *  @see https://proteopedia.org/wiki/index.php/Standard_Residues\r\n */\r\nexport interface Residue extends ResidueMeta {\r\n    // Center defines the arithmetic average of all atoms coordinates in\r\n    // residue All coordinates are set to -1 if center is not calculated\r\n    center: Coordinate,\r\n\r\n    // List of interactions with this residue\r\n    interactions: Interaction[],\r\n\r\n    // Residue atoms\r\n    atoms: Atom[],\r\n\r\n    // For non nucleotides these values will be empty. v and o vectors\r\n    // that define the plane of DNA/RNA nucleotide v is normalized (v =\r\n    // v/|v|) v is calculated as following: v=(C4-C2)x(C6-C2), where Cx is\r\n    // the xth C atom in nucleotide o is simply the average of C2, C4, C6:\r\n    // o=(C2+C4+C6)/3\r\n    v: Vector,\r\n    o: Vector,\r\n\r\n    /**\r\n     * Finds all atoms of this residue which match the given names. Atoms\r\n     * are returned as array in the order the names were provided. Only\r\n     * exact name matches are compared.\r\n     */\r\n    findAtomsByNames: (names: string[]) => Atom[]\r\n}\r\n\r\n// Generic residue implementation\r\nexport class ResidueImplementation implements Residue {\r\n    public center: Coordinate;\r\n    public interactions: Interaction[];\r\n    public atoms: Atom[];\r\n    public v: Vector;\r\n    public o: Vector;\r\n    public hash: string;\r\n    public name: ResidueName;\r\n    public sequenceNumber: number;\r\n    public polymerChainIdentifier: string;\r\n\r\n    constructor() {\r\n        this.atoms = [];\r\n        this.name = '';\r\n        this.sequenceNumber = -1;\r\n        this.center = new Coord(-1,-1,-1);\r\n        this.hash = \"\";\r\n        this.interactions = [];\r\n        this.polymerChainIdentifier = \"\";\r\n        this.v = Vector.infinity();\r\n        this.o = Vector.infinity();\r\n    }\r\n\r\n    findAtomsByNames(names: string[]): Atom[] {\r\n        let ret: Atoms = [];\r\n\r\n        this.atoms.forEach(a => {\r\n            if (names.indexOf(a.name) !== -1) {\r\n                ret.push(a);\r\n            }\r\n        });\r\n\r\n        // Reorder based on names\r\n        ret.sort((a, b) => {\r\n            return names.indexOf(a.name) - names.indexOf(b.name);\r\n        })\r\n\r\n        return ret;\r\n    }\r\n}\r\n\r\n/**\r\n * Residue types for DNA, RNA and Proteins DNA - deoxynucleotides RNA -\r\n * nucleotides PROTEIN - standard amino acids\r\n */\r\nexport enum DNAResidues {\r\n    DA = \"DA\",\r\n    DG = \"DG\",\r\n    DC = \"DC\",\r\n    DT = \"DT\",\r\n}\r\n\r\nexport enum RNAResidues {\r\n    A, C, G, I, U\r\n}\r\nexport enum ProteinResidues {\r\n    Ala, Arg, Asn, Asp, Cys, Glu, Gln, Gly, His, Ile, Leu, Lys, Met, Phe, Pro, Ser, Thr, Trp, Tyr, Val,\r\n}\r\n\r\n/**\r\n * Type of polymer\r\n */\r\nexport enum PolymerKind {\r\n    DNA = \"DNA\",\r\n    RNA = \"RNA\",\r\n    Protein = \"Protein\",\r\n\r\n    // Undefined polymer kind \r\n    Unknown = \"Unknown\",\r\n}\r\n\r\n/**\r\n * Polymer contains all residues until a TER in PDB is found\r\n */\r\nexport interface Polymer {\r\n    residues: Residue[],\r\n    kind: PolymerKind,\r\n    chainIdentifier: string, // Name of the chain (A,B,C, ... <etc>)\r\n}\r\n\r\n/**\r\n * File formats below\r\n */\r\nexport interface PDBFile {\r\n    polymers: Polymer[],\r\n    raw: string,\r\n}\r\n\r\n\r\n/**\r\n * Determines polymer kind from atom's residue name\r\n *\r\n * @param atom \r\n * @returns\r\n */\r\nexport function polymerKindFromAtom(atom: Atom): PolymerKind {\r\n    switch (true) {\r\n        case atom.residueName in DNAResidues:\r\n            return PolymerKind.DNA;\r\n        case atom.residueName in RNAResidues:\r\n            return PolymerKind.RNA;\r\n        default:\r\n            return PolymerKind.Protein;\r\n    }\r\n}","// Credit: https://github.com/evanw/lightgl.js\r\n// Provides a simple 3D vector class. Vector operations can be done using member\r\n// functions, which return new vectors, or static functions, which reuse\r\n// existing vectors to avoid generating garbage.\r\nexport class Vector {\r\n    constructor(public x: number, public y: number, public z: number) {\r\n        this.x = x || 0;\r\n        this.y = y || 0;\r\n        this.z = z || 0;\r\n    }\r\n    negative() {\r\n        return new Vector(-this.x, -this.y, -this.z);\r\n    }\r\n    add(v: Vector|number) {\r\n        if (v instanceof Vector) return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);\r\n        else return new Vector(this.x + v, this.y + v, this.z + v);\r\n    }\r\n    subtract(v: Vector|number) {\r\n        if (v instanceof Vector) return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);\r\n        else return new Vector(this.x - v, this.y - v, this.z - v);\r\n    }\r\n    multiply(v: Vector|number) {\r\n        if (v instanceof Vector) return new Vector(this.x * v.x, this.y * v.y, this.z * v.z);\r\n        else return new Vector(this.x * v, this.y * v, this.z * v);\r\n    }\r\n    divide(v: Vector|number) {\r\n        if (v instanceof Vector) return new Vector(this.x / v.x, this.y / v.y, this.z / v.z);\r\n        else return new Vector(this.x / v, this.y / v, this.z / v);\r\n    }\r\n    equals(v: Vector) {\r\n        return this.x == v.x && this.y == v.y && this.z == v.z;\r\n    }\r\n    dot(v: Vector) {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z;\r\n    }\r\n    cross(v: Vector) {\r\n        return new Vector(\r\n            this.y * v.z - this.z * v.y,\r\n            this.z * v.x - this.x * v.z,\r\n            this.x * v.y - this.y * v.x\r\n        );\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.dot(this));\r\n    }\r\n    // Alias for length\r\n    magnitude(){\r\n        return this.length();\r\n    }\r\n    unit() {\r\n        return this.divide(this.length());\r\n    }\r\n    min() {\r\n        return Math.min(Math.min(this.x, this.y), this.z);\r\n    }\r\n    max() {\r\n        return Math.max(Math.max(this.x, this.y), this.z);\r\n    }\r\n    toAngles() {\r\n        return {\r\n            theta: Math.atan2(this.z, this.x),\r\n            phi: Math.asin(this.y / this.length())\r\n        }\r\n    }\r\n    angleTo(a: Vector) {\r\n        return Math.acos(this.dot(a) / (this.length() * a.length()));\r\n    }\r\n    toArray(n: number) {\r\n        return [this.x, this.y, this.z].slice(0, n || 3);\r\n    }\r\n    clone() {\r\n        return new Vector(this.x, this.y, this.z);\r\n    }\r\n    init(x: number, y: number, z: number) {\r\n        this.x = x; this.y = y; this.z = z;\r\n        return this;\r\n    }\r\n    normalize(){\r\n        return this.unit();\r\n    }\r\n\r\n\r\n    static negative(a: Vector, b: Vector, c: Vector) {\r\n        b.x = -a.x; b.y = -a.y; b.z = -a.z;\r\n        return b;\r\n    }\r\n    static add(a: Vector, b: Vector, c: Vector) {\r\n        if (b instanceof Vector) { c.x = a.x + b.x; c.y = a.y + b.y; c.z = a.z + b.z; }\r\n        else { c.x = a.x + b; c.y = a.y + b; c.z = a.z + b; }\r\n        return c;\r\n    }\r\n    static subtract(a: Vector, b: Vector, c: Vector) {\r\n        if (b instanceof Vector) { c.x = a.x - b.x; c.y = a.y - b.y; c.z = a.z - b.z; }\r\n        else { c.x = a.x - b; c.y = a.y - b; c.z = a.z - b; }\r\n        return c;\r\n    }\r\n    static multiply(a: Vector, b: Vector, c: Vector) {\r\n        if (b instanceof Vector) { c.x = a.x * b.x; c.y = a.y * b.y; c.z = a.z * b.z; }\r\n        else { c.x = a.x * b; c.y = a.y * b; c.z = a.z * b; }\r\n        return c;\r\n    }\r\n    static divide(a: Vector, b: Vector, c: Vector) {\r\n        if (b instanceof Vector) { c.x = a.x / b.x; c.y = a.y / b.y; c.z = a.z / b.z; }\r\n        else { c.x = a.x / b; c.y = a.y / b; c.z = a.z / b; }\r\n        return c;\r\n    }\r\n    static cross(a: Vector, b: Vector, c: Vector) {\r\n        c.x = a.y * b.z - a.z * b.y;\r\n        c.y = a.z * b.x - a.x * b.z;\r\n        c.z = a.x * b.y - a.y * b.x;\r\n        return c;\r\n    }\r\n    static unit(a: Vector, b: Vector, c: Vector) {\r\n        var length = a.length();\r\n        b.x = a.x / length;\r\n        b.y = a.y / length;\r\n        b.z = a.z / length;\r\n        return b;\r\n    }\r\n    static fromAngles(theta: number, phi: number): Vector {\r\n        return new Vector(Math.cos(theta) * Math.cos(phi), Math.sin(phi), Math.sin(theta) * Math.cos(phi));\r\n    }\r\n    static randomDirection() {\r\n        return Vector.fromAngles(Math.random() * Math.PI * 2, Math.asin(Math.random() * 2 - 1));\r\n    }\r\n    static min(a: Vector, b: Vector, c: Vector) {\r\n        return new Vector(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));\r\n    }\r\n    static max(a: Vector, b: Vector, c: Vector) {\r\n        return new Vector(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));\r\n    }\r\n    static lerp(a: Vector, b: Vector, fraction: number) {\r\n        return b.subtract(a).multiply(fraction).add(a);\r\n    }\r\n    static fromArray(a: number[]) {\r\n        return new Vector(a[0], a[1], a[2]);\r\n    }\r\n    static angleBetween(a: Vector, b: Vector, c: Vector) {\r\n        return a.angleTo(b);\r\n    }\r\n\r\n    // Invalid value \r\n    static infinity(){\r\n        return new Vector(Infinity,Infinity,Infinity);\r\n    }\r\n}","import React, { createContext, useReducer, ReactElement } from \"react\";\r\nimport { Polymer, Residue } from \"./lib/types/atoms\";\r\nimport { PDBFile } from \"./lib/types/atoms\";\r\nimport { Visualization } from \"./lib/types/visualization\";\r\n\r\n/**\r\n * Initial State object structure\r\n */\r\nconst initialState: State = {\r\n\tpolymers: [],\r\n\tpdb: undefined,\r\n\tisLoading: false,\r\n\tsimpleStuffy: \"\",\r\n\thashedNucleicAcidResidues: {},\r\n\tviz: { chain1: null, chain2: null },\r\n\tcurrentPDBId: \"\",\r\n\tselectedResidue: undefined,\r\n};\r\n\r\nexport type HashedResidue = {\r\n\t[key: string]: Residue;\r\n};\r\n\r\n// State structure\r\nexport interface State {\r\n\tpolymers: Polymer[];\r\n\tpdb: PDBFile | undefined;\r\n\r\n\t// Determine if process is currently loading or not\r\n\tisLoading: boolean;\r\n\r\n\tsimpleStuffy: string;\r\n\r\n\t// This is used for faster lookups of nucleic acid residues.\r\n\t// Since nucleic acids are the central parts of visualization,\r\n\t// we might need to do many lookups, when searching for interactions.\r\n\thashedNucleicAcidResidues: HashedResidue;\r\n\r\n\t// Data to be visualized\r\n\tviz: Visualization;\r\n\r\n\t// Currently displayed pdb id\r\n\tcurrentPDBId: string;\r\n\r\n\tselectedResidue?: Residue;\r\n}\r\n\r\n/**\r\n * Actions structure\r\n */\r\nexport interface Action {\r\n\ttype: keyof State;\r\n\tpayload: any;\r\n}\r\n\r\nconst context = createContext<[State, React.Dispatch<Action>]>([\r\n\tinitialState,\r\n\t() => {},\r\n]);\r\n\r\n// Reducer mutates the state\r\nconst reducer = (state: State, { type, payload }: Action): State => {\r\n\tswitch (type) {\r\n\t\t// Default case works when type is equal state property name\r\n\t\tdefault:\r\n\t\t\tif (type in state) {\r\n\t\t\t\t(state as any)[type] = payload;\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`${type} not found in state`);\r\n\t\t\t}\r\n\t}\r\n\r\n\t// We must return new object, otherwise update won't be triggered\r\n\treturn { ...state };\r\n};\r\n\r\ninterface Props {\r\n\tchildren: ReactElement;\r\n}\r\n\r\nconst StoreComponent = ({ children }: Props) => {\r\n\tconst [state, dispatch] = useReducer(reducer, initialState);\r\n\treturn (\r\n\t\t<context.Provider value={[state, dispatch]}>{children}</context.Provider>\r\n\t);\r\n};\r\n\r\nexport { context, StoreComponent };\r\n","/**\r\n * This file defines some helper functions which are used to\r\n * process atoms, residues, polymers and related functionality.\r\n */\r\n\r\nimport {\r\n\tCoordinate,\r\n\tCoord,\r\n\tPolymer,\r\n\tResidue,\r\n\tResidueMeta,\r\n} from './types/atoms';\r\n\r\n// Calculate centers for residues and returns same polymer with\r\n// calculated center coordinates\r\nexport function calculateCenters(p: Polymer): Polymer {\r\n\tp.residues.forEach((residue, i) => {\r\n\t\tconst coordinate: Coordinate = new Coord(0, 0, 0);\r\n\t\tresidue.atoms.forEach((atom) => {\r\n\t\t\tcoordinate.x += atom.coords.x;\r\n\t\t\tcoordinate.y += atom.coords.y;\r\n\t\t\tcoordinate.z += atom.coords.z;\r\n\t\t});\r\n\t\tcoordinate.x = coordinate.x / residue.atoms.length;\r\n\t\tcoordinate.y = coordinate.y / residue.atoms.length;\r\n\t\tcoordinate.z = coordinate.z / residue.atoms.length;\r\n\r\n\t\tp.residues[i].center = coordinate;\r\n\t});\r\n\treturn p;\r\n}\r\n\r\n// Calculates arithmetic distance between 2 coordinates\r\nexport function distanceBetween2Points(p1: Coordinate, p2: Coordinate): number {\r\n\treturn Math.sqrt(\r\n\t\tMath.pow(p1.x - p2.x, 2) +\r\n\t\t\tMath.pow(p1.y - p2.y, 2) +\r\n\t\t\tMath.pow(p1.z - p2.z, 2)\r\n\t);\r\n}\r\n\r\n// Helper function, since I could not find a Typescript'y way to do this\r\nexport function ResidueMetaFromResidue(r: Residue): ResidueMeta {\r\n\tconst { sequenceNumber, hash, name, polymerChainIdentifier }: ResidueMeta = r;\r\n\treturn { sequenceNumber, hash, name, polymerChainIdentifier };\r\n}\r\n","import { PolymerKind, Residue, ResidueMeta } from \"./atoms\";\r\n\r\n// Defines the distance threshold value for Threshold interaction type\r\nexport const THRESHOLD_DISTANCE: number = 5;\r\n\r\nexport enum InteractionType{\r\n    // Threshold based interaction. Distance is the only factor\r\n    Threshold,\r\n\r\n    // Hydrogen bond interactions\r\n    HBond,\r\n\r\n    // Watson crick pair interactions, primarily between DNA, RNA\r\n    // nucleotides (Defined by VisualizationResidue.index)\r\n    // WatsonCrickPair,\r\n}\r\n\r\n// Interaction interface defines an interaction that the residue\r\n// containing the interaction object has.\r\nexport interface Interaction{\r\n    // The residue that Interaction holder interacts with\r\n    residue: ResidueMeta,\r\n    polymerKind: PolymerKind,\r\n    type: InteractionType,\r\n\r\n    // Any additional data\r\n    meta: any\r\n}\r\n\r\n","import { Polymer, PolymerKind, Residue } from './types/atoms';\r\nimport { Action } from '../Store';\r\nimport {\r\n\tcalculateCenters,\r\n\tdistanceBetween2Points,\r\n\tResidueMetaFromResidue,\r\n} from './AtomsFunctions';\r\nimport { InteractionType, THRESHOLD_DISTANCE } from './types/interactions';\r\nimport { Visualization } from './types/visualization';\r\nimport {\r\n\tisWatsonCrickPair,\r\n\tWATSON_CRICK_PAIR_CALCULATION_THRESHOLD,\r\n} from './NucleicAcids';\r\n\r\nexport class InteractionsFinder {\r\n\tnucleicAcids: Polymer[] = [];\r\n\tproteins: Polymer[] = [];\r\n\r\n\t// This will be used to generate visualization\r\n\tvisualization: Visualization = { chain1: null, chain2: null };\r\n\r\n\tconstructor(public polymers: Polymer[]) {\r\n\t\tthis.prepareObjects();\r\n\t}\r\n\r\n\t// Returns unordered array of residue pairs\r\n\twatsonCrickPairs(): Array<Residue[]> {\r\n\t\tif (this.nucleicAcids.length <= 0) {\r\n\t\t\tthrow Error('Nucleic acids are not initialized');\r\n\t\t}\r\n\t\tif (\r\n\t\t\t!(\r\n\t\t\t\tthis.nucleicAcids.length >= 2 &&\r\n\t\t\t\tthis.nucleicAcids[0].kind === PolymerKind.DNA\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\tthrow Error('Nucleic acids are not initialized');\r\n\t\t}\r\n\r\n\t\tconst chain1 = this.nucleicAcids[0];\r\n\t\tconst chain2 = this.nucleicAcids[1];\r\n\r\n\t\t// Chain lengths can differ, so we calculate and diff on each\r\n\t\t// chain pairs. Pairs2 will have chain2 as first chain, so this\r\n\t\t// has to be reordered when generating complete pairs\r\n\t\tlet pairs1 = this.calculateWatsonCrickPairs(chain1, chain2);\r\n\r\n\t\t// pairs2 has chain2 as main chain, also it should be noted that\r\n\t\t// the chain2 residues most often must be in reverse order as they\r\n\t\t// are 3'->5' and chain1 is 5'->3'\r\n\t\tlet pairs2 = this.calculateWatsonCrickPairs(chain2, chain1);\r\n\t\tpairs2.reverse();\r\n\r\n\t\t// Result is an array of residue pairs that are unordered. Second\r\n\t\t// chain pairs are double checked for correctness and lone residues\r\n\t\t// are added too as pairs1 will not have any lone residues of\r\n\t\t// chain2\r\n\t\tlet completePairs: Array<Residue[]> = pairs1;\r\n\t\tpairs2.forEach((pair) => {\r\n\t\t\t// pairs2 pairs have chain2 residues first, so we have to use\r\n\t\t\t// chain1 first\r\n\t\t\tif (pair.length === 1) {\r\n\t\t\t\tcompletePairs.push(pair);\r\n\t\t\t} else if (pair.length === 2) {\r\n\t\t\t\t// Double check if calculations were done correctly on\r\n\t\t\t\t// first chain and such pair from pairs2 exists in pair1\r\n\t\t\t\tlet pairFoundIn1 = false;\r\n\t\t\t\tfor (let i = 0; i < pairs1.length; i++) {\r\n\t\t\t\t\tlet p1 = pairs1[i];\r\n\t\t\t\t\tif (p1.length === 2) {\r\n\t\t\t\t\t\tif (p1[0].hash === pair[1].hash && p1[1].hash === pair[0].hash) {\r\n\t\t\t\t\t\t\tpairFoundIn1 = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Currently we only log this info, but in future\r\n\t\t\t\t// something should be done about this, because pair\r\n\t\t\t\t// discrepancies should not happen.\r\n\t\t\t\tif (!pairFoundIn1) {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t`watsonCrickPairs: matching pair was not found ${pair[1].polymerChainIdentifier}:${pair[1].sequenceNumber}${pair[1].name}---${pair[0].polymerChainIdentifier}:${pair[0].sequenceNumber}${pair[0].name}`,\r\n\t\t\t\t\t\tpair\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn completePairs;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates watson crick pairs for DNA\r\n\t * chain1 and chain2 must be DNA polymers.\r\n\t * Calculations are based on chain1 and not all chain2 residues might\r\n\t * be included. Most often, lone pairs of chain2 won't be included in\r\n\t * the result.\r\n\t */\r\n\tcalculateWatsonCrickPairs(\r\n\t\tchain1: Polymer,\r\n\t\tchain2: Polymer\r\n\t): Array<Residue[]> {\r\n\t\tlet pairs: Array<Residue[]> = [];\r\n\t\tchain1.residues.forEach((r1) => {\r\n\t\t\tlet smallestDistance = Infinity;\r\n\t\t\tlet bestR2: Residue | undefined;\r\n\r\n\t\t\tchain2.residues.forEach((r2) => {\r\n\t\t\t\t// r1 C2/C4/C6 atoms distance to r2 o,v vectors\r\n\t\t\t\tconst r1Cs = r1.findAtomsByNames(['C2', 'C4', 'C6']);\r\n\t\t\t\tconst r1DistToR2VO = [\r\n\t\t\t\t\tMath.abs(r1Cs[0].coords.toVec().subtract(r2.o).dot(r2.v)),\r\n\t\t\t\t\tMath.abs(r1Cs[1].coords.toVec().subtract(r2.o).dot(r2.v)),\r\n\t\t\t\t\tMath.abs(r1Cs[2].coords.toVec().subtract(r2.o).dot(r2.v)),\r\n\t\t\t\t];\r\n\t\t\t\t// r1 C2/C4/C6 atoms distance to r2 o,v vectors\r\n\t\t\t\tconst r2Cs = r2.findAtomsByNames(['C2', 'C4', 'C6']);\r\n\t\t\t\tconst r2DistToR1VO = [\r\n\t\t\t\t\tMath.abs(r2Cs[0].coords.toVec().subtract(r1.o).dot(r1.v)),\r\n\t\t\t\t\tMath.abs(r2Cs[1].coords.toVec().subtract(r1.o).dot(r1.v)),\r\n\t\t\t\t\tMath.abs(r2Cs[2].coords.toVec().subtract(r1.o).dot(r1.v)),\r\n\t\t\t\t];\r\n\r\n\t\t\t\tconst max = Math.max(...r2DistToR1VO, ...r1DistToR2VO);\r\n\r\n\t\t\t\tif (max < smallestDistance) {\r\n\t\t\t\t\tsmallestDistance = max;\r\n\t\t\t\t\tbestR2 = r2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (\r\n\t\t\t\tbestR2 !== undefined &&\r\n\t\t\t\t// Allow tiny bit of random error\r\n\t\t\t\tsmallestDistance <=\r\n\t\t\t\t\tWATSON_CRICK_PAIR_CALCULATION_THRESHOLD + Math.random() &&\r\n\t\t\t\tisWatsonCrickPair(bestR2, r1)\r\n\t\t\t) {\r\n\t\t\t\tpairs.push([r1, bestR2]);\r\n\t\t\t\tconst r2 = bestR2;\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t'Smallest distance: ',\r\n\t\t\t\t\tsmallestDistance,\r\n\t\t\t\t\t`${r1.polymerChainIdentifier}:${r1.sequenceNumber}${r1.name}`,\r\n\t\t\t\t\t`${r2.polymerChainIdentifier}:${r2.sequenceNumber}${r2.name}`\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tpairs.push([r1]);\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`No pair for: ${r1.polymerChainIdentifier}:${r1.sequenceNumber}${r1.name}, smallest distance: ${smallestDistance}`\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn pairs;\r\n\t}\r\n\r\n\t// Finds polymers to work with, calculates centers for residues.\r\n\tprepareObjects() {\r\n\t\tthis.nucleicAcids = this.findNucleicAcids();\r\n\t\tthis.proteins = this.findProteins();\r\n\r\n\t\tthis.nucleicAcids.forEach((polymer) => calculateCenters(polymer));\r\n\t\tthis.proteins.forEach((polymer) => calculateCenters(polymer));\r\n\t}\r\n\r\n\tfindProteins(): Polymer[] {\r\n\t\treturn this.polymers.filter((p) => {\r\n\t\t\treturn [PolymerKind.Protein].indexOf(p.kind) !== -1;\r\n\t\t});\r\n\t}\r\n\r\n\tfindNucleicAcids(): Polymer[] {\r\n\t\treturn this.polymers.filter((p) => {\r\n\t\t\treturn [PolymerKind.DNA, PolymerKind.RNA].indexOf(p.kind) !== -1;\r\n\t\t});\r\n\t}\r\n\r\n\t// Compares residue centers of nucleic acid and proteins If distance\r\n\t// between centers is smaller than defined THRESHOLD_DISTANCE times 2,\r\n\t// we can try to search for THRESHOLD_DISTANCE distance between\r\n\t// nucleic acid and protein residue atoms\r\n\tthresholdInteractions() {\r\n\t\tthis.nucleicAcids.forEach((nacid, nacidI) => {\r\n\t\t\tnacid.residues.forEach((nacidResidue, nacidResidueI) => {\r\n\t\t\t\tthis.proteins.forEach((p) => {\r\n\t\t\t\t\tp.residues.forEach((pResidue) => {\r\n\t\t\t\t\t\tconst distanceResidues = distanceBetween2Points(\r\n\t\t\t\t\t\t\tnacidResidue.center,\r\n\t\t\t\t\t\t\tpResidue.center\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t// Residues might contain atoms that are less than\r\n\t\t\t\t\t\t// THRESHOLD_DISTANCE amount apart even if\r\n\t\t\t\t\t\t// residues themselves are 2 times further.\r\n\t\t\t\t\t\tif (distanceResidues <= THRESHOLD_DISTANCE * 2) {\r\n\t\t\t\t\t\t\tnacidResidue.atoms.forEach((nacidAtom) => {\r\n\t\t\t\t\t\t\t\tpResidue.atoms.forEach((pAtom) => {\r\n\t\t\t\t\t\t\t\t\tconst distanceAtoms = distanceBetween2Points(\r\n\t\t\t\t\t\t\t\t\t\tnacidAtom.coords,\r\n\t\t\t\t\t\t\t\t\t\tpAtom.coords\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\tif (distanceAtoms <= THRESHOLD_DISTANCE) {\r\n\t\t\t\t\t\t\t\t\t\tthis.nucleicAcids[nacidI].residues[\r\n\t\t\t\t\t\t\t\t\t\t\tnacidResidueI\r\n\t\t\t\t\t\t\t\t\t\t].interactions.push({\r\n\t\t\t\t\t\t\t\t\t\t\tresidue: ResidueMetaFromResidue(pResidue),\r\n\t\t\t\t\t\t\t\t\t\t\ttype: InteractionType.Threshold,\r\n\t\t\t\t\t\t\t\t\t\t\tpolymerKind: p.kind,\r\n\t\t\t\t\t\t\t\t\t\t\tmeta: { distance: distanceAtoms },\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n","import * as d3 from \"d3\";\r\nimport { Action } from \"../../Store\";\r\nimport { Residue } from \"../types/atoms\";\r\n\r\nexport interface Node extends Residue {\r\n\tid: string;\r\n\tcolor: string;\r\n\tgroup: number;\r\n\tname: string;\r\n\thash: string;\r\n}\r\nexport enum LinkType {\r\n\tPair = \"pair\",\r\n\tBackbone = \"backbone\",\r\n}\r\n\r\nexport interface Link {\r\n\tsource: string;\r\n\ttarget: string;\r\n\tvalue: number;\r\n\tcolor: string;\r\n\tlinkType: LinkType;\r\n}\r\n\r\ntype ForceGraphParam = {\r\n\tnodes: Node[];\r\n\tlinks: Link[];\r\n\tsvgRef: SVGSVGElement;\r\n\tdispatch: React.Dispatch<Action>;\r\n};\r\n\r\ntype ForceGraphOpts = {\r\n\tnodeId: any | never | undefined;\r\n\tnodeGroups: any | never | undefined;\r\n\tnodeTitle: any | never | undefined;\r\n\tnodeFill: any | never | undefined;\r\n\tnodeStroke: any | never | undefined;\r\n\tnodeStrokeWidth: any | never | undefined;\r\n\tnodeStrokeOpacity: any | never | undefined;\r\n\tnodeRadius: any | never | undefined;\r\n\tnodeStrength: any | never | undefined;\r\n\tlinkSource: any | never | undefined;\r\n\tlinkTarget: any | never | undefined;\r\n\tlinkStroke: any | never | undefined;\r\n\tlinkStrokeOpacity: any | never | undefined;\r\n\tlinkStrokeWidth: any | never | undefined;\r\n\tlinkStrokeLinecap: any | never | undefined;\r\n\tlinkStrength: any | never | undefined;\r\n\tcolors: any | never | undefined;\r\n\twidth: any | never | undefined;\r\n\theight: any | never | undefined;\r\n\tinvalidation: any | never | undefined;\r\n};\r\n\r\n// letter sizings in px\r\nconst Letters = {\r\n\tsize: 10,\r\n\ty: 4,\r\n};\r\n// Example taken from https://observablehq.com/@d3/force-directed-graph\r\nexport function ForceGraph(\r\n\t{\r\n\t\tnodes, // an iterable of node objects (typically [{id}, …])\r\n\t\tlinks, // an iterable of link objects (typically [{source, target}, …])\r\n\t\tsvgRef, // d3 svg object\r\n\t\tdispatch,\r\n\t}: ForceGraphParam,\r\n\topts: ForceGraphOpts,\r\n) {\r\n\tlet {\r\n\t\tnodeId = (d: any) => d.id, // given d in nodes, returns a unique identifier (string)\r\n\t\tnodeGroups, // an array of ordinal values representing the node groups\r\n\t\tnodeTitle, // given d in nodes, a title string\r\n\t\tnodeFill = (d: any) => {\r\n\t\t\treturn d.color !== undefined ? d.color : \"currentColor\";\r\n\t\t}, // node stroke fill (if not using a group color encoding)\r\n\t\tnodeStroke = \"#fff\", // node stroke color\r\n\t\tnodeStrokeWidth = 1.5, // node stroke width, in pixels\r\n\t\tnodeStrokeOpacity = 1, // node stroke opacity\r\n\t\tnodeRadius = 10, // node radius, in pixels\r\n\t\tnodeStrength,\r\n\t\tlinkStroke = (d: any) => {\r\n\t\t\treturn d.color !== undefined ? d.color : \"#444\";\r\n\t\t}, // link stroke color\r\n\t\tlinkStrokeOpacity = 0.6, // link stroke opacity\r\n\t\tlinkStrokeWidth = 1.5, // given d in links, returns a stroke width in pixels\r\n\t\tlinkStrokeLinecap = \"round\", // link stroke linecap\r\n\t\tlinkStrength = 2,\r\n\t\twidth = 640, // outer width, in pixels\r\n\t\theight = 400, // outer height, in pixels\r\n\t\tinvalidation, // when this promise resolves, stop the simulation\r\n\t} = opts;\r\n\r\n\t// Save initial objects for later usage\r\n\tconst initialNodes = nodes;\r\n\tconst initialLinks = links;\r\n\r\n\t// Compute values.\r\n\tconst N = d3.map(nodes, nodeId).map(intern);\r\n\tif (nodeTitle === undefined) nodeTitle = (_: never, i: number) => N[i];\r\n\tconst W =\r\n\t\ttypeof linkStrokeWidth !== \"function\"\r\n\t\t\t? null\r\n\t\t\t: d3.map(links, linkStrokeWidth);\r\n\r\n\t// Replace the input nodes and links with mutable objects for the\r\n\t// simulation.\r\n\tnodes = initialNodes;\r\n\tlinks = initialLinks;\r\n\r\n\t// Construct the forces.\r\n\tconst forceNode = d3.forceManyBody();\r\n\r\n\tconst forceLink = d3\r\n\t\t.forceLink(links)\r\n\t\t.id(({ index: i }) => N[i as any])\r\n\t\t.distance((d, i) => {\r\n\t\t\t// Smaller distance values for backbone provide a better\r\n\t\t\t// structure with better separation between chains\r\n\t\t\tif (initialLinks[i].linkType === LinkType.Backbone) {\r\n\t\t\t\treturn 5;\r\n\t\t\t}\r\n\t\t\treturn 70;\r\n\t\t})\r\n\t\t.strength((d, i) => {\r\n\t\t\t// Larger values for backbone provide a better\r\n\t\t\t// structure with better separation between chains\r\n\t\t\tif (initialLinks[i].linkType === LinkType.Backbone) {\r\n\t\t\t\treturn 5000;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t});\r\n\tif (nodeStrength !== undefined) forceNode.strength(nodeStrength);\r\n\tif (linkStrength !== undefined) forceLink.strength(linkStrength);\r\n\r\n\tconst simulation = d3\r\n\t\t.forceSimulation(nodes as any)\r\n\t\t.force(\"link\", forceLink)\r\n\t\t.force(\"charge\", forceNode)\r\n\t\t.on(\"tick\", ticked);\r\n\r\n\tconst svg = d3\r\n\t\t.select(svgRef)\r\n\t\t.attr(\"width\", width)\r\n\t\t.attr(\"height\", height)\r\n\t\t.attr(\"viewBox\", [-width / 2, -height / 2, width, height] as any)\r\n\t\t.attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\r\n\r\n\t// Clear any previously available graphs\r\n\tsvg.html(\"\");\r\n\r\n\tconst g = svg.append(\"g\");\r\n\r\n\tconst link = g\r\n\t\t.append(\"g\")\r\n\t\t.attr(\"stroke-opacity\", linkStrokeOpacity)\r\n\t\t.attr(\r\n\t\t\t\"stroke-width\",\r\n\t\t\ttypeof linkStrokeWidth !== \"function\" ? linkStrokeWidth : null,\r\n\t\t)\r\n\t\t.attr(\"stroke-linecap\", linkStrokeLinecap)\r\n\t\t.selectAll(\"line\")\r\n\t\t.data(links)\r\n\t\t.join(\"line\")\r\n\t\t.attr(\"stroke-dasharray\", (d) => {\r\n\t\t\tif (d.linkType === \"pair\") {\r\n\t\t\t\treturn \"4\";\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t})\r\n\t\t.attr(\"stroke\", linkStroke);\r\n\r\n\tconst nodeGs = g\r\n\t\t.append(\"g\")\r\n\t\t.selectAll(\"g\")\r\n\t\t.data(nodes)\r\n\t\t.enter()\r\n\t\t.append(\"g\")\r\n\t\t.call(drag(simulation) as any);\r\n\r\n\tconst node = nodeGs\r\n\t\t.append(\"circle\")\r\n\t\t.attr(\"stroke\", nodeStroke)\r\n\t\t.attr(\"stroke-opacity\", nodeStrokeOpacity)\r\n\t\t.attr(\"stroke-width\", nodeStrokeWidth)\r\n\t\t.attr(\"fill\", nodeFill)\r\n\t\t.attr(\"r\", nodeRadius);\r\n\r\n\t// Tooltip information\r\n\tlet lastEvent = new Date();\r\n\tnodeGs\r\n\t\t.on(\"mouseover\", function (event, d: Node) {\r\n\t\t\td3.select(this)\r\n\t\t\t\t.select(\"circle\")\r\n\t\t\t\t.attr(\"r\", transformAdjusted(nodeRadius * 2));\r\n\t\t\tif (new Date().getTime() - lastEvent.getTime() > 250) {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: \"selectedResidue\",\r\n\t\t\t\t\tpayload: d,\r\n\t\t\t\t});\r\n\t\t\t\tlastEvent = new Date();\r\n\t\t\t}\r\n\t\t})\r\n\t\t.on(\"mouseout\", function (event, d: Node) {\r\n\t\t\t// transform adjusted radius if needed\r\n\t\t\td3.select(this).select(\"circle\").attr(\"r\", transformAdjusted(nodeRadius));\r\n\r\n\t\t\tif (new Date().getTime() - lastEvent.getTime() > 250) {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: \"selectedResidue\",\r\n\t\t\t\t\tpayload: undefined,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t// Append names\r\n\tconst letters = nodeGs\r\n\t\t.append(\"text\")\r\n\t\t.text((d) => d.name)\r\n\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t.attr(\"font-size\", Letters.size)\r\n\t\t.attr(\"y\", Letters.y) // more centered text\r\n\t\t.attr(\"class\", \"svg-graph-text\");\r\n\r\n\tif (W) link.attr(\"stroke-width\", (d: any) => W[d.index] as any);\r\n\t// if (T) node.append(\"title\").text((d: any) => T[d.index] as any);\r\n\tif (invalidation != null) invalidation.then(() => simulation.stop());\r\n\r\n\tfunction intern(value: any) {\r\n\t\treturn value !== null && typeof value === \"object\"\r\n\t\t\t? value.valueOf()\r\n\t\t\t: value;\r\n\t}\r\n\r\n\tfunction ticked() {\r\n\t\tlink\r\n\t\t\t.attr(\"x1\", (d: any) => d.source.x)\r\n\t\t\t.attr(\"y1\", (d: any) => d.source.y)\r\n\t\t\t.attr(\"x2\", (d: any) => d.target.x)\r\n\t\t\t.attr(\"y2\", (d: any) => d.target.y);\r\n\r\n\t\tnodeGs.attr(\"transform\", (d: any) => `translate(${d.x}, ${d.y})`);\r\n\t}\r\n\r\n\tfunction drag(simulation: d3.Simulation<d3.SimulationNodeDatum, undefined>) {\r\n\t\tfunction dragstarted(event: any) {\r\n\t\t\tif (!event.active) simulation.alphaTarget(0.3).restart();\r\n\t\t\tevent.subject.fx = event.subject.x;\r\n\t\t\tevent.subject.fy = event.subject.y;\r\n\t\t}\r\n\r\n\t\tfunction dragged(event: any) {\r\n\t\t\tevent.subject.fx = event.x;\r\n\t\t\tevent.subject.fy = event.y;\r\n\t\t}\r\n\r\n\t\tfunction dragended(event: any) {\r\n\t\t\tif (!event.active) simulation.alphaTarget(0);\r\n\t\t\tevent.subject.fx = null;\r\n\t\t\tevent.subject.fy = null;\r\n\t\t}\r\n\r\n\t\treturn d3\r\n\t\t\t.drag()\r\n\t\t\t.on(\"start\", dragstarted)\r\n\t\t\t.on(\"drag\", dragged)\r\n\t\t\t.on(\"end\", dragended);\r\n\t}\r\n\r\n\t// Zoom-in functionality\r\n\tconst transformAdjusted: (val: number) => number = (val) => {\r\n\t\tif (transformK) {\r\n\t\t\treturn val / transformK;\r\n\t\t}\r\n\t\treturn val;\r\n\t};\r\n\tlet transform = undefined;\r\n\tlet transformK: undefined | number = undefined;\r\n\tconst zoom = d3.zoom().on(\"zoom\", (e) => {\r\n\t\tg.attr(\"transform\", (transform = e.transform));\r\n\t\tif (transform) {\r\n\t\t\ttransformK = Math.sqrt(transform.k);\r\n\t\t\tg.style(\"stroke-width\", 3 / transformK);\r\n\t\t\tnode\r\n\t\t\t\t.attr(\"r\", nodeRadius / transformK)\r\n\t\t\t\t.attr(\"stroke-width\", nodeStrokeWidth / transformK);\r\n\t\t\tletters\r\n\t\t\t\t.attr(\"font-size\", Letters.size / transformK)\r\n\t\t\t\t.attr(\"y\", Letters.y / transformK);\r\n\t\t}\r\n\t});\r\n\r\n\tsvg.call(zoom as any).call(zoom.transform as any, d3.zoomIdentity);\r\n\r\n\treturn Object.assign(svg.node(), { scales: { color: null } });\r\n}\r\n","import {\r\n\tAtom,\r\n\tCoordinate,\r\n\tcoordinateToArray,\r\n\tDNAResidues,\r\n\tPolymer,\r\n\tPolymerKind,\r\n\tResidue,\r\n} from './types/atoms';\r\nimport { Vector } from './Vector';\r\n\r\n/**\r\n * A value that is used to check if watson crick pair is\r\n */\r\nexport const WATSON_CRICK_PAIR_CALCULATION_THRESHOLD = 1.42;\r\n\r\n/**\r\n * Calculates and populates vectors v and o which define the plane of\r\n * single nucleotide.\r\n */\r\nexport const calculateNucleotidePlaneVectors: (p: Polymer) => Polymer = (p) => {\r\n\t// Only DNA or RNA have nucleotides\r\n\tif ([PolymerKind.DNA, PolymerKind.RNA].indexOf(p.kind) != -1) {\r\n\t\t// Dna/Rna residue atoms containing these names will be selected as c2, c4, c6\r\n\t\t// C's with single quote ' are of ribose so we only want specifically these.\r\n\t\tlet cNames = ['C2', 'C4', 'C6'];\r\n\r\n\t\tp.residues.forEach((residue) => {\r\n\t\t\t// Find C2, C4, C6 coordinates\r\n\t\t\tlet cAtoms: Coordinate[] = [];\r\n\r\n\t\t\tconst atoms = residue.findAtomsByNames(cNames);\r\n\t\t\tatoms.forEach((a, i) => {\r\n\t\t\t\tcAtoms[i] = a.coords;\r\n\t\t\t});\r\n\r\n\t\t\t// Calculate plane vector v and point o\r\n\t\t\tif (cAtoms.length === 3) {\r\n\t\t\t\tconst c2 = Vector.fromArray(coordinateToArray(cAtoms[0]));\r\n\t\t\t\tconst c4 = Vector.fromArray(coordinateToArray(cAtoms[1]));\r\n\t\t\t\tconst c6 = Vector.fromArray(coordinateToArray(cAtoms[2]));\r\n\t\t\t\tconst v = c4.subtract(c2).cross(c6.subtract(c2)).normalize();\r\n\r\n\t\t\t\tconst o = c2.add(c4).add(c6).divide(3);\r\n\t\t\t\tresidue.v = v;\r\n\t\t\t\tresidue.o = o;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\treturn p;\r\n};\r\n\r\n/**\r\n *  Only for DNA\r\n */\r\nexport function isWatsonCrickPair(r1: Residue, r2: Residue): boolean {\r\n\treturn (\r\n\t\t(r1.name === DNAResidues[DNAResidues.DA] &&\r\n\t\t\tr2.name === DNAResidues[DNAResidues.DT]) ||\r\n\t\t(r1.name === DNAResidues[DNAResidues.DT] &&\r\n\t\t\tr2.name === DNAResidues[DNAResidues.DA]) ||\r\n\t\t(r1.name === DNAResidues[DNAResidues.DC] &&\r\n\t\t\tr2.name === DNAResidues[DNAResidues.DG]) ||\r\n\t\t(r1.name === DNAResidues[DNAResidues.DG] &&\r\n\t\t\tr2.name === DNAResidues[DNAResidues.DC])\r\n\t);\r\n}\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport {\r\n\tAtom,\r\n\tPolymer,\r\n\tResidue,\r\n\tPolymerKind,\r\n\tDNAResidues,\r\n} from \"../lib/types/atoms\";\r\nimport { context } from \"../Store\";\r\nimport { InteractionsFinder } from \"../lib/InteractionsFinder\";\r\nimport { ForceGraph } from \"./../lib/viz/ForceGraph\";\r\nimport { useRef } from \"react\";\r\nimport { Node, Link, LinkType } from \"./../lib/viz/ForceGraph\";\r\n\r\n// Color map for DNA residues\r\ntype cmap = {\r\n\t[key in DNAResidues]: string;\r\n};\r\nconst ColorMap: cmap = {\r\n\t[DNAResidues.DA]: \"#fcb331\",\r\n\t[DNAResidues.DT]: \"#5670fb\",\r\n\t[DNAResidues.DG]: \"#f63c37\",\r\n\t[DNAResidues.DC]: \"#03c907\",\r\n};\r\nconst AT_LINK = \"red\";\r\nconst GC_LINK = \"blue\";\r\nconst LinkColorMap: cmap = {\r\n\t[DNAResidues.DA]: AT_LINK,\r\n\t[DNAResidues.DT]: AT_LINK,\r\n\t[DNAResidues.DG]: GC_LINK,\r\n\t[DNAResidues.DC]: GC_LINK,\r\n};\r\n\r\n// For chain backbone\r\nconst DefaultLinkColor = \"#494949\";\r\n\r\nexport function Viewer() {\r\n\tconst [state, dispatch] = useContext(context);\r\n\tconst polymers = state.polymers;\r\n\r\n\tlet ref = React.createRef<SVGSVGElement>();\r\n\tlet tooltip = React.createRef<HTMLDivElement>();\r\n\r\n\tlet containerRef = useRef<HTMLDivElement>(null);\r\n\r\n\t// Construct atoms from polymers that are either DNA or RNA, as we only visualize these\r\n\tconst atoms: Atom[] = [];\r\n\tpolymers\r\n\t\t.filter((p) => [PolymerKind.DNA, PolymerKind.RNA].indexOf(p.kind) !== -1)\r\n\t\t.map(({ residues }) => {\r\n\t\t\tresidues.map((r) => atoms.push(...r.atoms));\r\n\t\t});\r\n\r\n\t// Currently visualization works only for DNA residues\r\n\tfunction initD3() {\r\n\t\tif (!ref || polymers.length <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconsole.time(\"DNA_VIZ\");\r\n\t\tconst iFinder = new InteractionsFinder(polymers);\r\n\t\tconst pairs = iFinder.watsonCrickPairs();\r\n\t\tconst dna = iFinder.nucleicAcids;\r\n\r\n\t\tlet nodes: Node[] = [];\r\n\t\tlet links: Link[] = [];\r\n\r\n\t\tconst chain1 = dna[0];\r\n\t\tconst chain2 = dna[1];\r\n\r\n\t\tconst resToId: (r: Residue) => string = (r) => {\r\n\t\t\treturn `${r.polymerChainIdentifier}:${r.name}${r.sequenceNumber}`;\r\n\t\t};\r\n\t\tconst CollectNodes = (chain: Polymer) => {\r\n\t\t\tchain.residues.forEach((r, index) => {\r\n\t\t\t\tnodes.push({\r\n\t\t\t\t\t...r,\r\n\t\t\t\t\thash: r.hash,\r\n\t\t\t\t\tname: r.name.toString().slice(-1), // remove D from name\r\n\t\t\t\t\tid: resToId(r),\r\n\t\t\t\t\tcolor: ColorMap[r.name as DNAResidues],\r\n\t\t\t\t\tgroup: DNAResidueIndexes.indexOf(r.name as DNAResidues) + 1,\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Collect links to previous residue in same chain\r\n\t\t\t\tlet residues = chain.residues;\r\n\t\t\t\tif (index > 0 && index < residues.length) {\r\n\t\t\t\t\tlinks.push({\r\n\t\t\t\t\t\tsource: resToId(residues[index - 1]),\r\n\t\t\t\t\t\ttarget: resToId(r),\r\n\t\t\t\t\t\tvalue: 1,\r\n\t\t\t\t\t\tcolor: DefaultLinkColor,\r\n\t\t\t\t\t\tlinkType: LinkType.Backbone,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t// Collect nodes\r\n\t\tconst DNAResidueIndexes = Object.values(DNAResidues);\r\n\t\tCollectNodes(chain1);\r\n\t\tCollectNodes(chain2);\r\n\r\n\t\t// Collect links for watson-crick pairs\r\n\t\tpairs.forEach((p) => {\r\n\t\t\tconst r1 = p[0];\r\n\t\t\tif (p.length === 2) {\r\n\t\t\t\tconst r2 = p[1];\r\n\t\t\t\tlinks.push({\r\n\t\t\t\t\tsource: resToId(r2),\r\n\t\t\t\t\ttarget: resToId(r1),\r\n\t\t\t\t\tvalue: 1,\r\n\t\t\t\t\tcolor: LinkColorMap[r1.name as DNAResidues],\r\n\t\t\t\t\tlinkType: LinkType.Pair,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconsole.log(\"Vizualization data:\", nodes, links);\r\n\r\n\t\t// svg dimensions should fit the container\r\n\t\tlet [w, h] = [\r\n\t\t\t(containerRef.current as HTMLDivElement).offsetWidth,\r\n\t\t\t(containerRef.current as HTMLDivElement).offsetHeight,\r\n\t\t];\r\n\r\n\t\t// Draw the visualization\r\n\t\tForceGraph(\r\n\t\t\t{\r\n\t\t\t\tnodes,\r\n\t\t\t\tlinks,\r\n\t\t\t\tsvgRef: ref.current as SVGSVGElement,\r\n\t\t\t\tdispatch,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: w,\r\n\t\t\t\theight: h,\r\n\t\t\t} as any,\r\n\t\t);\r\n\r\n\t\tconsole.timeEnd(\"DNA_VIZ\");\r\n\t}\r\n\r\n\tuseEffect(initD3, [polymers]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div>{state.simpleStuffy}</div>\r\n\t\t\t<div className=\"p-5 flex items-center flex-col h-full\" ref={containerRef}>\r\n\t\t\t\t<div className=\"min-w-full h-full relative\">\r\n\t\t\t\t\t<svg ref={ref}></svg>\r\n\t\t\t\t\t{state.selectedResidue && (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName=\"\r\n\t\t\t\t\t\t\t\ttext-xs p-4\r\n\t\t\t\t\t\t\t\tabsolute bottom-[10px] right-[10px]\r\n\t\t\t\t\t\t\t\tw-[50%] h-[100px] bg-indigo-400\r\n\t\t\t\t\t\t\t\toverflow-auto text-white rounded-lg\r\n\t\t\t\t\t\t\t\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div>Chain: {state.selectedResidue.polymerChainIdentifier}</div>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\tResidue: {state.selectedResidue.name}:\r\n\t\t\t\t\t\t\t\t{state.selectedResidue.sequenceNumber}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\tInteractions:{\" \"}\r\n\t\t\t\t\t\t\t\t{state.selectedResidue.interactions.map((i) => (\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{i.polymerKind} - {i.residue}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tref={tooltip}\r\n\t\t\t\t\tstyle={{ position: \"absolute\", opacity: 0, background: \"#fff\" }}\r\n\t\t\t\t></div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n","import { Atom, DNAResidues, PDBFile, Polymer, PolymerKind, polymerKindFromAtom, Residue, ResidueImplementation, RNAResidues, Coord } from \"./types/atoms\"\r\nimport hash from 'object-hash';\r\nimport {calculateNucleotidePlaneVectors} from \"./NucleicAcids\";\r\nimport { Vector } from \"./Vector\";\r\n\r\nexport class PDBHandler{\r\n    file?: File\r\n\r\n    constructor(file?: File){\r\n        if (file !== undefined){\r\n            this.file = file\r\n        }\r\n    }\r\n\r\n    async readData(): Promise<PDBFile>{\r\n        if(this.file == undefined){\r\n            throw Error(\"file not provided\");\r\n        }\r\n        let text = await this.file.text()\r\n        return this.format(text)\r\n    }\r\n\r\n    format(text: string): PDBFile{\r\n        return {\r\n            raw: this.formatText(text),\r\n            polymers: this.formatPolymers(text)\r\n        }\r\n    }\r\n\r\n    formatText(text: string): string{\r\n        return text.split('\\n')\r\n            .map((line, index)=>index.toString()+\". \"+line)\r\n            .join(\"\\n\")\r\n    }\r\n\r\n    /**\r\n     * formatAtoms parses PDB strting into Polymer[] data structure\r\n     * \r\n     * PDB File keywords:\r\n     * ATOM - atom information\r\n     * TER - terminates sequence of previously provided ATOMs\r\n     * \r\n     * @param text \r\n     * @returns \r\n     */\r\n    formatPolymers(text: string): Polymer[]{\r\n        let result: Polymer[] = [];\r\n\r\n        // Helper functions to quickly create objects\r\n        const newPolymer = ():Polymer=>{\r\n            return {\r\n                chainIdentifier: '',\r\n                residues: [],\r\n                kind:PolymerKind.Unknown,\r\n            }\r\n        }\r\n        const newResidue = ():Residue=>{\r\n            return new ResidueImplementation();\r\n        }\r\n        // Helper to push currentResidue to currentPolymer\r\n        const pushResidue = ():void=>{\r\n            // hash will be useful to uniquely identify each residue.\r\n            currentResidue.hash = hash(currentResidue);\r\n            currentPolymer.residues.push(currentResidue);\r\n        }\r\n        \r\n        let currentPolymer = newPolymer()\r\n        let currentResidue = newResidue()\r\n\r\n        // Polymer kind determination functionality\r\n        type currentPolymerKind = {\r\n            [key in PolymerKind|number|string]:number\r\n        };\r\n        // Realistically - there should be only 1 PolymerKind for given polymer, but in case it is not, we can\r\n        // check which kind appears more often than others to determine true PolymerKind.\r\n        const determinePolymerKindAndReset = (c?:currentPolymerKind): [currentPolymerKind, PolymerKind] | currentPolymerKind=>{\r\n            let obj = {\r\n                [PolymerKind.DNA]:0,\r\n                [PolymerKind.RNA]:0,\r\n                [PolymerKind.Protein]:0           \r\n            }\r\n            if(c===undefined){\r\n                return obj;\r\n            }\r\n            return [\r\n                obj, // reset obj\r\n                // Get the PolymerKind that has the largest number of occurrences\r\n                Object.keys(c).reduce((a:any,b:any)=>c[a]>c[b]?a:b) as unknown as PolymerKind\r\n            ]\r\n        }\r\n        let currentPolymerKindCounter = determinePolymerKindAndReset() as currentPolymerKind;\r\n\r\n        // Here we will process the pdb text\r\n        text.split(\"\\n\").forEach(line=>{\r\n            // Parse ATOM lines\r\n            if(line.startsWith(\"ATOM\") || line.startsWith(\"HETATM\")){\r\n                // https://www.cgl.ucsf.edu/chimera/docs/UsersGuide/tutorials/pdbintro.html\r\n                let x = parseFloat(line.slice(30, 38).trim());\r\n                let y = parseFloat(line.slice(38, 46).trim());\r\n                let z = parseFloat(line.slice(46, 54).trim());\r\n\r\n                let name = line.slice(12,16).trim();\r\n                let residueName = line.slice(17, 20).trim()\r\n                let element = line.slice(76,78).trim();\r\n                let residueSequenceNumber = parseInt(line.slice(22,26).trim());\r\n\r\n                // Chain identifier for current polymer is 1 letter\r\n                let chainIdentifier = line.slice(21,22);\r\n                currentPolymer.chainIdentifier = chainIdentifier;\r\n\r\n                // Construct new atom entry\r\n                const atom: Atom = {\r\n                    coords:new Coord(x,y,z),\r\n                    name,\r\n                    element,\r\n                    residueName,\r\n                    residueSequenceNumber,\r\n                }\r\n                \r\n                // Increment probable polymer kind from residue\r\n                currentPolymerKindCounter[polymerKindFromAtom(atom)]++\r\n\r\n                // Set residue sequence number and residue name for first time\r\n                if (currentResidue.sequenceNumber === -1){\r\n                    currentResidue.name = atom.residueName;\r\n                    currentResidue.sequenceNumber = residueSequenceNumber;\r\n                    currentResidue.polymerChainIdentifier = chainIdentifier;\r\n                }\r\n\r\n                // If residue sequence number does not match with current atom's - add residue to polymer and reset currentResidue to a new one\r\n                if (residueSequenceNumber !== currentResidue.sequenceNumber){\r\n                    pushResidue();\r\n                    currentResidue = newResidue();\r\n                    currentResidue.name = atom.residueName;\r\n                    currentResidue.sequenceNumber = residueSequenceNumber;\r\n                    currentResidue.polymerChainIdentifier = chainIdentifier;\r\n                }\r\n\r\n                currentResidue.atoms.push(atom)\r\n            }   \r\n            // TER indicates the end of current polymer (chain of residues)\r\n            if(line.startsWith(\"TER\")){\r\n                // Don't forget to push residue\r\n                pushResidue();\r\n\r\n                // Get polymer kind and reset counter\r\n                let [c, kind] = determinePolymerKindAndReset(currentPolymerKindCounter) as [currentPolymerKind, PolymerKind]\r\n                currentPolymerKindCounter = c;\r\n                currentPolymer.kind = kind;\r\n\r\n                // This must be calculated beforehand. As these values will be used in watson crick search later.\r\n                currentPolymer = calculateNucleotidePlaneVectors(currentPolymer);\r\n\r\n                // Save polymer\r\n                result.push(currentPolymer);\r\n\r\n                // Reset current polymer and residue\r\n                currentPolymer = newPolymer();\r\n                currentResidue = newResidue();\r\n            }\r\n        });\r\n        \r\n        return result;\r\n    }\r\n\r\n}","import {\r\n\tChangeEventHandler,\r\n\tChangeEvent,\r\n\tuseEffect,\r\n\tuseContext,\r\n\tuseRef,\r\n} from 'react';\r\nimport { PDBHandler } from '../lib/PDBHandler';\r\nimport { PDBFile, Polymer } from '../lib/types/atoms';\r\nimport { context } from '../Store';\r\n\r\n// Fetch PDB text for given id (if valid)\r\nconst fetchPDBFile = async (id: string): Promise<string> => {\r\n\tconst response = await fetch(`https://files.rcsb.org/download/${id}.pdb`);\r\n\tconst pdbText = await response.text();\r\n\treturn pdbText;\r\n};\r\n\r\nexport function DataFetcher() {\r\n\tconst [state, dispatch] = useContext(context);\r\n\r\n\tconst startLoading = () => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'isLoading',\r\n\t\t\tpayload: true,\r\n\t\t});\r\n\t};\r\n\tconst stopLoading = () => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'isLoading',\r\n\t\t\tpayload: false,\r\n\t\t});\r\n\t};\r\n\tconst updatePDBState = (pdb: PDBFile) => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'pdb',\r\n\t\t\tpayload: pdb,\r\n\t\t});\r\n\t};\r\n\tconst updateCurrentPDBId = (id: string) => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'currentPDBId',\r\n\t\t\tpayload: id,\r\n\t\t});\r\n\t};\r\n\t// Update polymers in store, generate visualization data structure\r\n\tconst updatePolymers = (polymers: Polymer[]) => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'polymers',\r\n\t\t\tpayload: polymers,\r\n\t\t});\r\n\t};\r\n\r\n\t// Process fetching and loading PDB file from rcsb\r\n\tconst loadPDBID = async (id: string) => {\r\n\t\tstartLoading();\r\n\t\tconst pdb = new PDBHandler().format(await fetchPDBFile(id));\r\n\t\tupdatePDBState(pdb);\r\n\t\tupdatePolymers(pdb.polymers);\r\n\t\tupdateCurrentPDBId(id);\r\n\t\tstopLoading();\r\n\t};\r\n\r\n\t// Fetch PDB file by given id parameter. Must run only once\r\n\tuseEffect(() => {\r\n\t\tconst url = new URLSearchParams(window.location.search);\r\n\t\tconst id = url.get('id');\r\n\t\tconsole.log('ID', id);\r\n\t\tif (id !== null) {\r\n\t\t\tloadPDBID(id);\r\n\t\t}\r\n\t}, []);\r\n\r\n\t// Updates pbd file information from uploaded file, parses pdb data and performs interaction calculations\r\n\tconst handleFileChange: ChangeEventHandler<HTMLInputElement> = async (\r\n\t\tevent: ChangeEvent\r\n\t) => {\r\n\t\tlet f = (event.target as HTMLInputElement).files?.item(0);\r\n\t\tif (f !== null) {\r\n\t\t\t// Show spinner while loading\r\n\t\t\tstartLoading();\r\n\r\n\t\t\t// Read and parse the file\r\n\t\t\tconsole.time('TIME_TO_PARSE_EVERYTHING');\r\n\t\t\tconsole.time('TIME_TO_PARSE_PDB');\r\n\t\t\tconst pdb = await new PDBHandler(f as File).readData();\r\n\t\t\tconsole.timeEnd('TIME_TO_PARSE_PDB');\r\n\r\n\t\t\t// Update state with parsed values\r\n\t\t\tupdatePDBState(pdb);\r\n\t\t\tupdatePolymers(pdb.polymers);\r\n\r\n\t\t\t// Some fake loading time, so we get to see the spinner :)\r\n\t\t\tconsole.timeEnd('TIME_TO_PARSE_EVERYTHING');\r\n\t\t\tsetTimeout(stopLoading, 2000);\r\n\t\t}\r\n\t};\r\n\r\n\tlet pdbText: JSX.Element | undefined;\r\n\tif (state.polymers.length > 0) {\r\n\t\tpdbText = (\r\n\t\t\t<div className=\"mt-5\">\r\n\t\t\t\t<div className=\"mb-1\">Provided input file</div>\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tclassName=\"text-sm w-full border h-96 border-blue-100\"\r\n\t\t\t\t\tvalue={state.pdb?.raw}\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tconst pdbIdRef = useRef<HTMLInputElement>(null);\r\n\tconst handlePDBIdChange = () => {\r\n\t\tconst pdbId = pdbIdRef.current?.value;\r\n\t\tif (pdbId) {\r\n\t\t\tloadPDBID(pdbId);\r\n\t\t}\r\n\t};\r\n\t// Update pdbIdRef value whenever pdb id chandes\r\n\t// Render data fetcher box\r\n\treturn (\r\n\t\t<div className=\"p-5 max-h-screen overflow-auto break-words\">\r\n\t\t\t{!state.isLoading && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{state.pdb === undefined && (\r\n\t\t\t\t\t\t<div className=\"text-sm text-gray-600 mb-4 bg-red-200 p-2\">\r\n\t\t\t\t\t\t\tChoose a PDB file which contains DNA/RNA with Proteins\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t{state.currentPDBId.length > 0 && (\r\n\t\t\t\t\t\t\t<div className=\"mb-4\">\r\n\t\t\t\t\t\t\t\tCurrently selected PDB ID:\r\n\t\t\t\t\t\t\t\t<b>{state.currentPDBId.toUpperCase()}</b>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<div className=\"mb-4\">\r\n\t\t\t\t\t\t\t<div className=\"text-normal font-bold text-gray-600 mb-2\">\r\n\t\t\t\t\t\t\t\tEnter PDB file ID:\r\n\t\t\t\t\t\t\t\t<div className=\"text-xs font-normal\">\r\n\t\t\t\t\t\t\t\t\tPDB file should contain <b>DNA/RNA</b> structures\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"flex flex-row max-w-full\">\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\tonKeyPress={(e) => {\r\n\t\t\t\t\t\t\t\t\t\tif (e.key === 'Enter') {\r\n\t\t\t\t\t\t\t\t\t\t\thandlePDBIdChange();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tref={pdbIdRef}\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"1ZS4\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"border-r-0 outline-none ring-indigo-200 focus:ring-2 transition-all block py-1 px-2 outline-0 border border-indigo-300 rounded rounded-tr-none rounded-br-none\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tonClick={handlePDBIdChange}\r\n\t\t\t\t\t\t\t\t\tclassName=\"bg-indigo-400 border-l-0 text-white font-bold text-sm ring-indigo-200 focus:ring-2 hover:bg-indigo-600 transition-all w-[100px]  block rounded rounded-tl-none rounded-bl-none border border-indigo-300\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tGO\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"text-normal font-bold text-gray-600 mb-2\">\r\n\t\t\t\t\t\t\tOr choose a PDB file to display:\r\n\t\t\t\t\t\t\t<div className=\"text-xs font-normal\">\r\n\t\t\t\t\t\t\t\tPDB file should contain <b>DNA/RNA</b> structures\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\t\tonChange={handleFileChange}\r\n\t\t\t\t\t\t\tclassName=\"max-w-full\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{pdbText}\r\n\t\t\t{state.pdb && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\tPolymers from input:\r\n\t\t\t\t\t{state.polymers.map(({ residues, chainIdentifier, kind }, k) => (\r\n\t\t\t\t\t\t<div className=\"ml-2\" key={k}>\r\n\t\t\t\t\t\t\tChain:{' '}\r\n\t\t\t\t\t\t\t<b>\r\n\t\t\t\t\t\t\t\t{chainIdentifier} ({kind})\r\n\t\t\t\t\t\t\t</b>\r\n\t\t\t\t\t\t\t<div className=\"ml-2\">\r\n\t\t\t\t\t\t\t\t{residues.map((residue, key) => {\r\n\t\t\t\t\t\t\t\t\treturn <span key={key}>{residue.name} &nbsp;</span>;\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n","import './../css/spinner.css';\r\n\r\nconst Spinner = () => {\r\n\treturn (\r\n\t\t<div className=\"flex flex-col items-center gap-1\">\r\n\t\t\t<div className=\"text-white font-bold\">Loading</div>\r\n\t\t\t<div className=\"lds-roller\">\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Spinner;\r\n","import { useContext, ReactElement } from 'react';\r\nimport { Viewer } from './components/Viewer';\r\nimport { DataFetcher } from './components/DataFetcher';\r\nimport Spinner from './components/Spinner';\r\nimport { StoreComponent, context } from './Store';\r\n\r\nexport function App() {\r\n\tconst state = useContext(context)[0];\r\n\r\n\treturn (\r\n\t\t<div className=\"w-full flex flex-row\">\r\n\t\t\t{state.isLoading === true && (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"fixed w-screen min-h-screen top-0 left-0 flex items-center justify-center z-50  h-full\"\r\n\t\t\t\t\tstyle={{ backgroundColor: 'rgba(0,0,0,0.75)' }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Spinner />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t<div className=\"z-10 w-9/12 bg-indigo-200 min-h-full h-screen\">\r\n\t\t\t\t<Viewer />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"z-10 w-3/12\">\r\n\t\t\t\t<DataFetcher />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\ninterface Props {\r\n\tchildren: ReactElement;\r\n}\r\n\r\n// We want to provide nice loading animation at the top level.\r\n// So this wrapper simply allows App to use context state.\r\nexport function AppWrapper({ children }: Props) {\r\n\treturn <StoreComponent>{children}</StoreComponent>;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App, AppWrapper} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppWrapper>\r\n      <App/>\r\n    </AppWrapper>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}