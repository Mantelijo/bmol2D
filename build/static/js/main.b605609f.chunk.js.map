{"version":3,"sources":["lib/format/atoms.ts","Store.tsx","lib/InteractionsFinder.ts","components/Viewer.tsx","lib/PDBHandler.ts","components/DataFetcher.tsx","components/Spinner.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AtomRemoteness","DNAResidues","RNAResidues","ProteinResidues","PolymerKind","initialState","polymers","pdb","undefined","isLoading","simpleStuffy","context","createContext","reducer","state","type","payload","Error","StoreComponent","children","useReducer","dispatch","Provider","value","InteractionsFinder","nucleoAcids","proteins","this","findNucleoAcids","findProteins","filter","p","Protein","indexOf","kind","DNA","RNA","Viewer","useContext","ref","React","createRef","tooltip","atoms","map","residues","r","push","useEffect","length","d3","current","selectAll","remove","nucleoAcidsData","n","index","index2","x","y","data","maxResidues","a","reduce","b","numAcids","yScale","domain","range","h","xScale","w","tooltipEl","attr","enter","append","style","on","event","html","name","sequenceNumber","transition","duration","pageX","pageY","end","console","log","d","className","position","opacity","background","PDBHandler","file","text","format","raw","formatText","formatPolymers","split","line","toString","join","result","newPolymer","chainIdentifier","Unknown","pushResidue","currentPolymer","currentResidue","determinePolymerKindAndReset","c","obj","Object","keys","currentPolymerKindCounter","forEach","startsWith","parseFloat","slice","trim","z","residueName","element","residueSequenceNumber","parseInt","atom","coords","polymerKindFromAtom","DataFetcher","pdbText","handleFileChange","f","target","files","item","time","readData","timeEnd","setTimeout","readOnly","onChange","k","residue","key","Spinner","App","backgroundColor","AppWrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b605609f.chunk.js","sourcesContent":["/**\r\n * Formats of spatial data for visualization\r\n */\r\n\r\nexport type Coordinate = {\r\n    x: number,\r\n    y: number,\r\n    z: number, \r\n}\r\n\r\n/**\r\n * Structure for ATOM records in pdb file\r\n */\r\nexport interface Atom{\r\n    coords: Coordinate,\r\n    name: string,\r\n    residueName: string,\r\n    element: string,\r\n    residueSequenceNumber: number,\r\n}\r\n\r\n/**\r\n * Atom names might contain remoteness symbols. Here is a small mapping up to H\r\n * \r\n * @example AtomRemoteness[\"A\"]\r\n */\r\nexport enum AtomRemoteness {\r\n    A='α',\t\r\n    B='β',\t\r\n    G='γ',\t\r\n    D='δ',\t\r\n    E='ε',\t\r\n    Z='ζ',\t\r\n    H='η',\t\r\n}\r\n\r\n/**\r\n *  @see https://proteopedia.org/wiki/index.php/Standard_Residues\r\n */\r\nexport interface Residue{\r\n    name: string,\r\n    atoms: Atom[],\r\n    sequenceNumber: number,\r\n}\r\n\r\n/**\r\n * Residue types for DNA, RNA and Proteins\r\n * DNA - deoxynucleotides\r\n * RNA - nucleotides\r\n * PROTEIN - standard amino acids\r\n */\r\nexport enum DNAResidues{\r\n    DA, DG, DC, DT,\r\n}\r\nexport enum RNAResidues{\r\n    A, C, G, I, U\r\n}\r\nexport enum ProteinResidues{\r\n    Ala, Arg, Asn, Asp, Cys, Glu, Gln, Gly, His, Ile, Leu, Lys, Met, Phe, Pro, Ser, Thr, Trp, Tyr, Val,\r\n}\r\n\r\n/**\r\n * Type of polymer\r\n */\r\nexport enum PolymerKind {\r\n    DNA =\"DNA\",\r\n    RNA = \"RNA\",\r\n    Protein = \"Protein\",\r\n\r\n    // Undefined polymer kind \r\n    Unknown = \"Unknown\",\r\n}\r\n\r\n/**\r\n * Polymer contains all residues until a TER in PDB is found\r\n */\r\nexport interface Polymer{\r\n    residues: Residue[],\r\n    kind: PolymerKind,\r\n    chainIdentifier: string, // Name of the chain (A,B,C, ... <etc>)\r\n}\r\n\r\n/**\r\n * File formats below\r\n */\r\nexport interface PDBFile{\r\n    polymers: Polymer[],\r\n    raw: string,\r\n}\r\n\r\n\r\n/**\r\n * Determines polymer kind from atom's residue name\r\n * \r\n * @param atom \r\n * @returns\r\n */\r\nexport function polymerKindFromAtom(atom: Atom): PolymerKind{\r\n    switch (true){\r\n        case atom.residueName in DNAResidues:\r\n            return PolymerKind.DNA;\r\n        case atom.residueName in RNAResidues:\r\n            return PolymerKind.RNA;\r\n        default:\r\n            return PolymerKind.Protein;\r\n    }\r\n}   ","import React, {createContext, useReducer, ReactElement} from \"react\";\r\nimport { Polymer } from \"./lib/format/atoms\";\r\nimport {PDBFile} from './lib/format/atoms'\r\n\r\n/**\r\n * Initial State object structure \r\n */\r\nconst initialState: State = {\r\n    polymers:[],\r\n    pdb: undefined,\r\n    isLoading: false,\r\n    simpleStuffy:'',\r\n};\r\n\r\n/**\r\n * State structure\r\n */\r\ninterface State{\r\n    polymers: Polymer[],\r\n    pdb: PDBFile | undefined,\r\n\r\n    // Determine if process is currently loading or not\r\n    isLoading: boolean,\r\n\r\n    simpleStuffy: string,\r\n}\r\n\r\n/**\r\n * Actions structure\r\n */\r\ninterface Action{\r\n    type: keyof State,\r\n    payload:any,\r\n}\r\n\r\nconst context = createContext<[State, React.Dispatch<Action>]>([initialState, ()=>{}]);\r\n\r\n// Reducer mutates the state\r\nconst reducer = (state: State, {type, payload}:Action): State => {\r\n\r\n    switch(type) {\r\n        // Default case works when type is equal state property name\r\n        default:\r\n            if (type in state){\r\n                (state as any)[type] = payload;\r\n            }else{\r\n                throw new Error(`${type} not found in state`);\r\n            }\r\n    };\r\n\r\n    // We must return new object, otherwise update won't be triggered\r\n    return {...state};\r\n}\r\n\r\n\r\ninterface Props{\r\n    children: ReactElement,\r\n}\r\n\r\nconst StoreComponent =  ({ children }:Props ) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    return <context.Provider value={[state, dispatch]}>{children}</context.Provider>;\r\n};\r\n\r\nexport {context, StoreComponent}","import { Polymer, PolymerKind } from \"./format/atoms\";\r\n\r\nconst THRESHOLD_DISTANCE = 5;\r\n\r\nexport class InteractionsFinder{\r\n\r\n    nucleoAcids: Polymer[] = [];\r\n    proteins: Polymer[] = [];\r\n\r\n    constructor(public polymers: Polymer[]){}\r\n\r\n    calculateInteractions(){\r\n        this.nucleoAcids = this.findNucleoAcids();\r\n        this.proteins = this.findProteins();\r\n    }\r\n\r\n    findProteins(): Polymer[]{\r\n        return this.polymers.filter(p=>{\r\n            return [PolymerKind.Protein].indexOf(p.kind) !== -1\r\n        })\r\n    }\r\n\r\n    findNucleoAcids(): Polymer[]{\r\n        return this.polymers.filter(p=>{\r\n            return [PolymerKind.DNA, PolymerKind.RNA].indexOf(p.kind) !== -1\r\n        })\r\n    }\r\n}","import React, { useContext, useEffect } from \"react\";\r\nimport * as d3 from 'd3'\r\nimport { Atom, Polymer, Residue, PolymerKind } from \"../lib/format/atoms\";\r\nimport {context} from '../Store';\r\nimport { InteractionsFinder } from \"../lib/InteractionsFinder\";\r\n\r\nexport function Viewer() {\r\n    const [state, dispatch] = useContext(context)\r\n    const polymers = state.polymers;\r\n\r\n    let ref = React.createRef<SVGSVGElement>()\r\n    let tooltip = React.createRef<HTMLDivElement>()\r\n\r\n    // Construct atoms from polymers that are either DNA or RNA, as we only visualize these\r\n    const atoms: Atom[] = [];\r\n    polymers.filter((p)=>[PolymerKind.DNA, PolymerKind.RNA].indexOf(p.kind)!==-1)\r\n        .map(({residues})=>{\r\n            residues.map((r)=>atoms.push(...r.atoms))\r\n        })\r\n\r\n    function initD3(){\r\n        if(!ref || polymers.length <= 0){\r\n            return;\r\n        }\r\n\r\n        // Clean up svg initially\r\n        d3.select(ref.current).selectAll('*').remove();\r\n\r\n        // Start generating new chart\r\n\r\n        // Width and height of svg\r\n        const [w, h] = [900,500];\r\n        // Margins x and y\r\n        const [mX, mY] = [200, 40];\r\n\r\n        let nucleoAcids = new InteractionsFinder(polymers).findNucleoAcids()\r\n        let nucleoAcidsData:any = []; \r\n        nucleoAcids.map((n, index)=>{\r\n            n.residues.map((r, index2)=>{\r\n                nucleoAcidsData.push({ x: index, y: index2, data: r})\r\n            });\r\n        });\r\n\r\n        let maxResidues = nucleoAcids.map(a=>a.residues.length)\r\n            .reduce((a, b)=>{\r\n                return a > b?a:b;\r\n            })\r\n        let numAcids = nucleoAcids.length;\r\n\r\n        let yScale = d3.scaleLinear()\r\n            .domain([0, maxResidues])\r\n            .range([0+mY, h-mY]);\r\n\r\n        let xScale = d3.scaleLinear()\r\n            .domain([0, numAcids])\r\n            .range([0+mX, w-mX]);\r\n\r\n        const rSize = 10;\r\n    \r\n        const tooltipEl = d3.select(tooltip.current)\r\n        const chart =  d3.select(ref.current)\r\n            .attr('width', w)\r\n            .attr('height', h)\r\n            .selectAll()\r\n            .data(nucleoAcidsData)\r\n                .enter()\r\n                .append('circle')\r\n                .attr('cx', (a:any)=>xScale(a.x))\r\n                .attr('cy', (a:any)=>yScale(a.y))\r\n                .style('fill', '#867')\r\n                .attr('r', rSize)\r\n                .on('mouseover', async function( event:MouseEvent, a:any){\r\n                    d3.select(this).attr('r', 15)\r\n                        .style('fill', '#5ef');\r\n                    \r\n                    let b = a.data as Residue\r\n\r\n                    try{\r\n                        await tooltipEl\r\n                        .html(`Residue: ${b.name} seqno: ${b.sequenceNumber}`)\r\n                        .transition()\r\n                        .duration(50)\r\n                        .style('left', event.pageX+\"px\")\r\n                        .style('top', event.pageY+\"px\")\r\n                        .end();\r\n                    }catch(e){\r\n                        console.log(\"Something went wrong: \",e);\r\n                    }\r\n\r\n                    tooltipEl.style('opacity', 1)\r\n                })\r\n                .on('mouseout', function(d:Atom){\r\n                    tooltipEl.style('opacity', 0)\r\n                    d3.select(this).attr('r', rSize)\r\n                    .style('fill', '#867')\r\n                });\r\n                \r\n\r\n        // const x = atoms.map(a=>a.coords.x)\r\n        // const y = atoms.map(a=>a.coords.y)\r\n        // const z = atoms.map(a=>a.coords.z)\r\n\r\n            \r\n        \r\n        // const tooltipEl = d3.select(tooltip.current)\r\n\r\n        // const rSize = 3;\r\n        // const chart = d3.select(ref.current)\r\n        //     .attr('width', w)\r\n        //     .attr('height', h)\r\n        //     .selectAll('circle')\r\n        //     .data(atoms)\r\n        //     .enter()\r\n        //         .append('circle')\r\n        //         .attr('cx', (a:Atom)=>xScale(a.coords.x))\r\n        //         .attr('cy', (a:Atom)=>yScale(a.coords.y))\r\n        //         .style('fill', '#867')\r\n        //         .on('mouseover', async function( event:MouseEvent, atom:Atom){\r\n        //             d3.select(this).attr('r', 15)\r\n        //                 .style('fill', '#5ef');\r\n\r\n        //             try{\r\n        //                 await tooltipEl\r\n        //                 .html(`Residue: ${atom.residueName} Atom name: ${atom.name} Atom element: ${atom.element}`)\r\n        //                 .transition()\r\n        //                 .duration(50)\r\n        //                 .style('left', event.pageX+\"px\")\r\n        //                 .style('top', event.pageY+\"px\")\r\n        //                 .end();\r\n        //             }catch(e){\r\n        //                 console.log(\"Something went wrong: \",e);\r\n        //             }\r\n\r\n        //             tooltipEl.style('opacity', 1)\r\n        //         })\r\n        //         .on('mouseout', function(d:Atom){\r\n        //             tooltipEl.style('opacity', 0)\r\n        //             d3.select(this).attr('r', rSize)\r\n        //             .style('fill', '#867')\r\n        //         });\r\n\r\n        // chart.transition()\r\n        //     .attr('r', rSize)\r\n        //     .delay(function(a: Atom, i){\r\n        //         return i * 5\r\n        //     })\r\n        //     .duration(500)\r\n    }\r\n\r\n    useEffect(initD3, [polymers])\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {state.simpleStuffy}\r\n            </div>\r\n            <div className=\"p-5 flex items-center flex-col\">\r\n                <div>Total number of atoms: {atoms.length}</div>\r\n                <svg ref={ref}></svg>\r\n                <div ref={tooltip} style={{position:\"absolute\", opacity:0, background:\"#fff\"}}></div>\r\n            </div>\r\n        </>\r\n    );  \r\n}","import { Atom, DNAResidues, PDBFile, Polymer, PolymerKind, polymerKindFromAtom, Residue, RNAResidues } from \"./format/atoms\"\r\n\r\nexport class PDBHandler{\r\n    file: File\r\n\r\n    constructor(file: File){\r\n        this.file = file\r\n    }\r\n\r\n    async readData(): Promise<PDBFile>{\r\n        let text = await this.file.text()\r\n        return this.format(text)\r\n    }\r\n\r\n    format(text: string): PDBFile{\r\n        return {\r\n            raw: this.formatText(text),\r\n            polymers: this.formatPolymers(text)\r\n        }\r\n    }\r\n\r\n    formatText(text: string): string{\r\n        return text.split('\\n')\r\n            .map((line, index)=>index.toString()+\". \"+line)\r\n            .join(\"\\n\")\r\n    }\r\n\r\n    /**\r\n     * formatAtoms parses PDB strting into Polymer[] data structure\r\n     * \r\n     * PDB File keywords:\r\n     * ATOM - atom information\r\n     * TER - terminates sequence of previously provided ATOMs\r\n     * \r\n     * @param text \r\n     * @returns \r\n     */\r\n    formatPolymers(text: string): Polymer[]{\r\n        let result: Polymer[] = [];\r\n\r\n        // Helper functions to quickly create objects\r\n        const newPolymer = ():Polymer=>{\r\n            return {\r\n                chainIdentifier: '',\r\n                residues: [],\r\n                kind:PolymerKind.Unknown,\r\n            }\r\n        }\r\n        const newResidue = ():Residue=>{\r\n            return {\r\n                atoms: [],\r\n                name: '',\r\n                sequenceNumber: -1,\r\n            }\r\n        }\r\n        // Helper to push currentResidue to currentPolymer\r\n        const pushResidue = ():void=>{\r\n            currentPolymer.residues.push(currentResidue);\r\n        }\r\n        \r\n        let currentPolymer = newPolymer()\r\n        let currentResidue = newResidue()\r\n\r\n        // Polymer kind determination functionality\r\n        type currentPolymerKind = {\r\n            [key in PolymerKind|number|string]:number\r\n        };\r\n        // Realistically - there should be only 1 PolymerKind for given polymer, but in case it is not, we can\r\n        // check which kind appears more often than others to determine true PolymerKind.\r\n        const determinePolymerKindAndReset = (c?:currentPolymerKind): [currentPolymerKind, PolymerKind] | currentPolymerKind=>{\r\n            let obj = {\r\n                [PolymerKind.DNA]:0,\r\n                [PolymerKind.RNA]:0,\r\n                [PolymerKind.Protein]:0           \r\n            }\r\n            if(c===undefined){\r\n                return obj;\r\n            }\r\n            return [\r\n                obj, // reset obj\r\n                // Get the PolymerKind that has the largest number of occurrences\r\n                Object.keys(c).reduce((a:any,b:any)=>c[a]>c[b]?a:b) as unknown as PolymerKind\r\n            ]\r\n        }\r\n        let currentPolymerKindCounter = determinePolymerKindAndReset() as currentPolymerKind;\r\n\r\n        // Here we will process the pdb text\r\n        text.split(\"\\n\").forEach(line=>{\r\n            // Parse ATOM lines\r\n            if(line.startsWith(\"ATOM\")){\r\n                // https://www.cgl.ucsf.edu/chimera/docs/UsersGuide/tutorials/pdbintro.html\r\n                let x = parseFloat(line.slice(30, 38).trim());\r\n                let y = parseFloat(line.slice(38, 46).trim());\r\n                let z = parseFloat(line.slice(46, 54).trim());\r\n\r\n                let name = line.slice(12,16).trim();\r\n                let residueName = line.slice(17, 20).trim()\r\n                let element = line.slice(76,78).trim();\r\n                let residueSequenceNumber = parseInt(line.slice(22,26).trim());\r\n\r\n                // Chain identifier for current polymer - 1 letter\r\n                let chainIdentifier = line.slice(21,22);\r\n                currentPolymer.chainIdentifier = chainIdentifier;\r\n\r\n                // Construct new atom entry\r\n                const atom: Atom = {\r\n                    coords:{\r\n                        x,y,z\r\n                    },\r\n                    name,\r\n                    element,\r\n                    residueName,\r\n                    residueSequenceNumber,\r\n                }\r\n                \r\n                // Increment probable polymer kind from residue\r\n                currentPolymerKindCounter[polymerKindFromAtom(atom)]++\r\n\r\n                // Set residue sequence number and residue name for first time\r\n                if (currentResidue.sequenceNumber === -1){\r\n                    currentResidue.name = atom.residueName;\r\n                    currentResidue.sequenceNumber = residueSequenceNumber;\r\n                }\r\n\r\n                // If residue sequence number does not match with current atom's - add residue to polymer and reset currentResidue to a new one\r\n                if (residueSequenceNumber !== currentResidue.sequenceNumber){\r\n                    pushResidue();\r\n                    currentResidue = newResidue();\r\n                    currentResidue.name = atom.residueName;\r\n                    currentResidue.sequenceNumber = residueSequenceNumber;\r\n                }\r\n\r\n                currentResidue.atoms.push(atom)\r\n            }   \r\n            // TER indicates the end of current polymer (chain of residues)\r\n            if(line.startsWith(\"TER\")){\r\n                // Don't forget to push residue\r\n                pushResidue();\r\n\r\n                // Get polymer kind and reset counter\r\n                let [c, kind] = determinePolymerKindAndReset(currentPolymerKindCounter) as [currentPolymerKind, PolymerKind]\r\n                currentPolymerKindCounter = c;\r\n                currentPolymer.kind = kind;\r\n\r\n                // Save polymer\r\n                result.push(currentPolymer);\r\n\r\n                // Reset current polymer and residue\r\n                currentPolymer = newPolymer();\r\n                currentResidue = newResidue();\r\n            }\r\n        });\r\n        \r\n        return result;\r\n    }\r\n\r\n}","import React, { useState, ChangeEventHandler, ChangeEvent, useEffect, useContext } from \"react\";\r\nimport { PDBHandler } from \"../lib/PDBHandler\";\r\nimport {context} from '../Store';\r\n\r\nexport function DataFetcher(){\r\n    const [state, dispatch] = useContext(context)\r\n\r\n    // Updates pbd file information from uploaded file, parses pdb data and performs interaction calculations\r\n    const handleFileChange: ChangeEventHandler<HTMLInputElement> = async (event: ChangeEvent)=>{\r\n        let f = (event.target as HTMLInputElement).files?.item(0);\r\n        if(f !== null){\r\n            // Show spinner while loading\r\n            dispatch({\r\n                type: 'isLoading',\r\n                payload: true,\r\n            });\r\n\r\n            // Read and parse the file\r\n            console.time(\"TIME_TO_PARSE_PDB\");\r\n            const pdb = await new PDBHandler(f as File).readData()\r\n            console.timeEnd(\"TIME_TO_PARSE_PDB\");\r\n            \r\n            // Update state with calculated values\r\n            dispatch({\r\n                type:'pdb',\r\n                payload:pdb,\r\n            });\r\n            dispatch({\r\n                type:'polymers',\r\n                payload: pdb.polymers\r\n            });\r\n\r\n            // Some fake loading time, so we get to see the spinner :)\r\n            setTimeout(async ()=>{\r\n                dispatch({\r\n                    type: 'isLoading',\r\n                    payload: false,\r\n                });\r\n            }, 2000)\r\n        }\r\n    }\r\n\r\n    let pdbText: JSX.Element|undefined;\r\n    if(state.polymers.length > 0){\r\n        pdbText = (\r\n            <div className=\"mt-5\">\r\n                <div className=\"mb-1\">Provided input file</div>\r\n                <textarea className=\"text-sm w-full border h-96 border-blue-100\" value={state.pdb?.raw} readOnly/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Render data fetcher box\r\n    return (\r\n        <div className=\"p-5 max-h-screen overflow-auto break-words\">\r\n            {!state.isLoading &&\r\n                <div>\r\n                    <input type=\"file\" onChange={handleFileChange}/> \r\n                </div>\r\n            }\r\n            {pdbText}\r\n            {(state.pdb)&&\r\n                <div>\r\n                   Polymers from input: \r\n                   {state.polymers.map(({residues, chainIdentifier, kind}, k)=>\r\n                       <div className=\"ml-2\" key={k}>\r\n                            Chain: <b>{chainIdentifier} ({kind})</b>\r\n                            <div className=\"ml-2\">\r\n                                {residues.map(\r\n                                    (residue, key)=>{\r\n                                        return <span key={key}>{residue.name} &nbsp;</span> \r\n                                    })\r\n                                }\r\n                            </div>\r\n                       </div>\r\n                   )}\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}","import \"./../css/spinner.css\"\r\n\r\nconst Spinner = ()=>{\r\n    return (\r\n        <div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n    );\r\n}\r\n\r\nexport default Spinner;\r\n\r\n","import React, { useEffect, useState, useContext, ReactElement, Children } from 'react';\r\nimport { Viewer } from './components/Viewer';\r\nimport { DataFetcher } from './components/DataFetcher';\r\nimport Spinner from './components/Spinner';\r\nimport {StoreComponent, context} from './Store'\r\n\r\nexport function App() {\r\n  const state = useContext(context)[0];\r\n\r\n  return (\r\n      <div className=\"w-full flex flex-row\">\r\n        {(state.isLoading === true) &&\r\n          <div className=\"fixed w-screen min-h-screen top-0 left-0 flex items-center justify-center z-50\" style={{backgroundColor:\"rgba(0,0,0,0.35)\"}}>\r\n            <Spinner/>\r\n          </div>\r\n        }\r\n        <div className=\"z-10 w-9/12 bg-indigo-300 min-h-full h-screen\">\r\n          <Viewer/>\r\n        </div>\r\n        <div className=\"z-10 w-3/12\">\r\n          <DataFetcher/>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\ninterface Props{\r\n  children: ReactElement,\r\n}\r\n\r\n// We want to provide nice loading animation at the top level.\r\n// So this wrapper simply allows App to use context state.\r\nexport function AppWrapper({children}:Props){\r\n  return (\r\n    <StoreComponent>{children}</StoreComponent>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App, AppWrapper} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppWrapper>\r\n      <App/>\r\n    </AppWrapper>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}