{"version":3,"sources":["lib/types/atoms.ts","lib/Vector.ts","Store.tsx","lib/AtomsFunctions.ts","lib/types/interactions.ts","lib/NucleicAcids.ts","lib/InteractionsFinder.ts","components/Viewer.tsx","lib/viz/ForceGraph.js","lib/PDBHandler.ts","components/DataFetcher.tsx","components/Spinner.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AtomRemoteness","Vector","x","y","z","this","v","Math","sqrt","dot","length","divide","min","max","theta","atan2","phi","asin","a","acos","n","slice","unit","b","c","cos","sin","fromAngles","random","PI","fraction","subtract","multiply","add","angleTo","Infinity","Coord","fromArray","coordinateToArray","DNAResidues","RNAResidues","ProteinResidues","PolymerKind","ResidueImplementation","center","interactions","atoms","o","hash","name","sequenceNumber","polymerChainIdentifier","infinity","names","ret","forEach","indexOf","push","sort","initialState","polymers","pdb","undefined","isLoading","simpleStuffy","hashedNucleicAcidResidues","viz","chain1","chain2","context","createContext","reducer","state","type","payload","Error","StoreComponent","children","useReducer","dispatch","Provider","value","calculateCenters","p","residues","residue","i","coordinate","atom","coords","distanceBetween2Points","p1","p2","pow","ResidueMetaFromResidue","r","InteractionType","isWatsonCrickPair","r1","r2","DA","DT","DC","DG","InteractionsFinder","nucleicAcids","proteins","visualization","prepareObjects","kind","DNA","pairs1","calculateWatsonCrickPairs","pairs2","reverse","completePairs","pair","pairFoundIn1","console","log","pairs","bestR2","smallestDistance","r1Cs","findAtomsByNames","r1DistToR2VO","abs","toVec","r2Cs","r2DistToR1VO","findNucleoAcids","findProteins","polymer","filter","Protein","RNA","first","second","distancesFirst","Array","fill","i1","i2","currentIndex","secondChainIncludedAmount","res1","j","res2","newRes2","index","nacid","nacidI","nacidResidue","nacidResidueI","pResidue","THRESHOLD_DISTANCE","nacidAtom","pAtom","distanceAtoms","Threshold","polymerKind","meta","distance","Viewer","useContext","ref","React","createRef","tooltip","containerRef","useRef","map","useEffect","iFinder","watsonCrickPairs","dna","nodes","links","resToId","DNAResidueIndexes","Object","values","id","group","source","target","current","offsetWidth","offsetHeight","w","h","opts","svgRef","nodeId","d","nodeGroup","nodeGroups","nodeTitle","nodeFill","nodeStroke","nodeStrokeWidth","nodeStrokeOpacity","nodeRadius","nodeStrength","linkSource","linkTarget","linkStroke","linkStrokeOpacity","linkStrokeWidth","linkStrokeLinecap","linkStrength","colors","d3","width","height","invalidation","N","intern","LS","LT","_","T","G","W","color","forceNode","forceLink","strength","transform","simulation","force","on","link","attr","node","svg","g","append","selectAll","data","join","call","event","active","alphaTarget","restart","subject","fx","fy","drag","valueOf","text","then","stop","zoom","e","style","k","assign","scales","ForceGraph","className","position","opacity","background","PDBHandler","file","format","raw","formatText","formatPolymers","split","line","toString","result","newPolymer","chainIdentifier","Unknown","newResidue","pushResidue","currentResidue","currentPolymer","determinePolymerKindAndReset","obj","keys","reduce","currentPolymerKindCounter","startsWith","parseFloat","trim","residueName","element","residueSequenceNumber","parseInt","polymerKindFromAtom","cNames","cAtoms","c2","c4","c6","cross","normalize","calculateNucleotidePlaneVectors","fetchPDBFile","fetch","response","pdbText","DataFetcher","startLoading","stopLoading","updatePDBState","updatePolymers","thresholdInteractions","URLSearchParams","window","location","search","get","handleFileChange","f","files","item","time","readData","timeEnd","setTimeout","readOnly","onChange","key","Spinner","App","backgroundColor","AppWrapper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7defe0ae.chunk.js","sourcesContent":["/**\r\n * Formats of spatial data for visualization\r\n */\r\n\r\nimport { Vector } from \"../Vector\";\r\nimport { Interaction } from \"./interactions\";\r\n\r\n// Coordinate represents a 3-dimensional coordinate set\r\nexport interface Coordinate {\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n\r\n    // Converts coordinate to vector\r\n    toVec: () => Vector,\r\n}\r\n\r\nexport class Coord implements Coordinate {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public z: number,\r\n    ) { }\r\n    toVec(): Vector {\r\n        return Vector.fromArray(coordinateToArray(this))\r\n    }\r\n}\r\n\r\n// Helper\r\nexport function coordinateToArray(c: Coordinate): number[] {\r\n    return [c.x, c.y, c.z];\r\n}\r\n\r\n// Structure for ATOM records in pdb file\r\nexport interface Atom {\r\n    coords: Coordinate,\r\n    name: string,\r\n    residueName: ResidueName,\r\n    element: string,\r\n    residueSequenceNumber: number,\r\n}\r\n\r\nexport type Atoms = Atom[];\r\n\r\n/**\r\n * Atom names might contain remoteness symbols. Here is a small mapping up\r\n * to H\r\n *\r\n * @example AtomRemoteness[\"A\"]\r\n */\r\nexport enum AtomRemoteness {\r\n    A = 'α',\r\n    B = 'β',\r\n    G = 'γ',\r\n    D = 'δ',\r\n    E = 'ε',\r\n    Z = 'ζ',\r\n    H = 'η',\r\n}\r\n\r\nexport type ResidueName = string | DNAResidues | RNAResidues | ProteinResidues;\r\n\r\n// Met information about residue, not helpful for calculations\r\nexport interface ResidueMeta {\r\n    // hash allows to uniquely identify each residue\r\n    hash: string,\r\n    name: ResidueName,\r\n    sequenceNumber: number,\r\n    polymerChainIdentifier: string,\r\n    // polymerKind: PolymerKind,\r\n}\r\n\r\n/**\r\n *  @see https://proteopedia.org/wiki/index.php/Standard_Residues\r\n */\r\nexport interface Residue extends ResidueMeta {\r\n    // Center defines the arithmetic average of all atoms coordinates in\r\n    // residue All coordinates are set to -1 if center is not calculated\r\n    center: Coordinate,\r\n\r\n    // List of interactions with this residue\r\n    interactions: Interaction[],\r\n\r\n    // Residue atoms\r\n    atoms: Atom[],\r\n\r\n    // For non nucleotides these values will be empty. v and o vectors\r\n    // that define the plane of DNA/RNA nucleotide v is normalized (v =\r\n    // v/|v|) v is calculated as following: v=(C4-C2)x(C6-C2), where Cx is\r\n    // the xth C atom in nucleotide o is simply the average of C2, C4, C6:\r\n    // o=(C2+C4+C6)/3\r\n    v: Vector,\r\n    o: Vector,\r\n\r\n    /**\r\n     * Finds all atoms of this residue which match the given names. Atoms\r\n     * are returned as array in the order the names were provided. Only\r\n     * exact name matches are compared.\r\n     */\r\n    findAtomsByNames: (names: string[]) => Atom[]\r\n}\r\n\r\n// Generic residue implementation\r\nexport class ResidueImplementation implements Residue {\r\n    public center: Coordinate;\r\n    public interactions: Interaction[];\r\n    public atoms: Atom[];\r\n    public v: Vector;\r\n    public o: Vector;\r\n    public hash: string;\r\n    public name: ResidueName;\r\n    public sequenceNumber: number;\r\n    public polymerChainIdentifier: string;\r\n\r\n    constructor() {\r\n        this.atoms = [];\r\n        this.name = '';\r\n        this.sequenceNumber = -1;\r\n        this.center = new Coord(-1,-1,-1);\r\n        this.hash = \"\";\r\n        this.interactions = [];\r\n        this.polymerChainIdentifier = \"\";\r\n        this.v = Vector.infinity();\r\n        this.o = Vector.infinity();\r\n    }\r\n\r\n    findAtomsByNames(names: string[]): Atom[] {\r\n        let ret: Atoms = [];\r\n\r\n        this.atoms.forEach(a => {\r\n            if (names.indexOf(a.name) !== -1) {\r\n                ret.push(a);\r\n            }\r\n        });\r\n\r\n        // Reorder based on names\r\n        ret.sort((a, b) => {\r\n            return names.indexOf(a.name) - names.indexOf(b.name);\r\n        })\r\n\r\n        return ret;\r\n    }\r\n}\r\n\r\n/**\r\n * Residue types for DNA, RNA and Proteins DNA - deoxynucleotides RNA -\r\n * nucleotides PROTEIN - standard amino acids\r\n */\r\nexport enum DNAResidues {\r\n    DA = \"DA\",\r\n    DG = \"DG\",\r\n    DC = \"DC\",\r\n    DT = \"DT\",\r\n}\r\n\r\nexport enum RNAResidues {\r\n    A, C, G, I, U\r\n}\r\nexport enum ProteinResidues {\r\n    Ala, Arg, Asn, Asp, Cys, Glu, Gln, Gly, His, Ile, Leu, Lys, Met, Phe, Pro, Ser, Thr, Trp, Tyr, Val,\r\n}\r\n\r\n/**\r\n * Type of polymer\r\n */\r\nexport enum PolymerKind {\r\n    DNA = \"DNA\",\r\n    RNA = \"RNA\",\r\n    Protein = \"Protein\",\r\n\r\n    // Undefined polymer kind \r\n    Unknown = \"Unknown\",\r\n}\r\n\r\n/**\r\n * Polymer contains all residues until a TER in PDB is found\r\n */\r\nexport interface Polymer {\r\n    residues: Residue[],\r\n    kind: PolymerKind,\r\n    chainIdentifier: string, // Name of the chain (A,B,C, ... <etc>)\r\n}\r\n\r\n/**\r\n * File formats below\r\n */\r\nexport interface PDBFile {\r\n    polymers: Polymer[],\r\n    raw: string,\r\n}\r\n\r\n\r\n/**\r\n * Determines polymer kind from atom's residue name\r\n *\r\n * @param atom \r\n * @returns\r\n */\r\nexport function polymerKindFromAtom(atom: Atom): PolymerKind {\r\n    switch (true) {\r\n        case atom.residueName in DNAResidues:\r\n            return PolymerKind.DNA;\r\n        case atom.residueName in RNAResidues:\r\n            return PolymerKind.RNA;\r\n        default:\r\n            return PolymerKind.Protein;\r\n    }\r\n}","// Credit: https://github.com/evanw/lightgl.js\r\n// Provides a simple 3D vector class. Vector operations can be done using member\r\n// functions, which return new vectors, or static functions, which reuse\r\n// existing vectors to avoid generating garbage.\r\nexport class Vector {\r\n    constructor(public x: number, public y: number, public z: number) {\r\n        this.x = x || 0;\r\n        this.y = y || 0;\r\n        this.z = z || 0;\r\n    }\r\n    negative() {\r\n        return new Vector(-this.x, -this.y, -this.z);\r\n    }\r\n    add(v: Vector|number) {\r\n        if (v instanceof Vector) return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);\r\n        else return new Vector(this.x + v, this.y + v, this.z + v);\r\n    }\r\n    subtract(v: Vector|number) {\r\n        if (v instanceof Vector) return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);\r\n        else return new Vector(this.x - v, this.y - v, this.z - v);\r\n    }\r\n    multiply(v: Vector|number) {\r\n        if (v instanceof Vector) return new Vector(this.x * v.x, this.y * v.y, this.z * v.z);\r\n        else return new Vector(this.x * v, this.y * v, this.z * v);\r\n    }\r\n    divide(v: Vector|number) {\r\n        if (v instanceof Vector) return new Vector(this.x / v.x, this.y / v.y, this.z / v.z);\r\n        else return new Vector(this.x / v, this.y / v, this.z / v);\r\n    }\r\n    equals(v: Vector) {\r\n        return this.x == v.x && this.y == v.y && this.z == v.z;\r\n    }\r\n    dot(v: Vector) {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z;\r\n    }\r\n    cross(v: Vector) {\r\n        return new Vector(\r\n            this.y * v.z - this.z * v.y,\r\n            this.z * v.x - this.x * v.z,\r\n            this.x * v.y - this.y * v.x\r\n        );\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.dot(this));\r\n    }\r\n    // Alias for length\r\n    magnitude(){\r\n        return this.length();\r\n    }\r\n    unit() {\r\n        return this.divide(this.length());\r\n    }\r\n    min() {\r\n        return Math.min(Math.min(this.x, this.y), this.z);\r\n    }\r\n    max() {\r\n        return Math.max(Math.max(this.x, this.y), this.z);\r\n    }\r\n    toAngles() {\r\n        return {\r\n            theta: Math.atan2(this.z, this.x),\r\n            phi: Math.asin(this.y / this.length())\r\n        }\r\n    }\r\n    angleTo(a: Vector) {\r\n        return Math.acos(this.dot(a) / (this.length() * a.length()));\r\n    }\r\n    toArray(n: number) {\r\n        return [this.x, this.y, this.z].slice(0, n || 3);\r\n    }\r\n    clone() {\r\n        return new Vector(this.x, this.y, this.z);\r\n    }\r\n    init(x: number, y: number, z: number) {\r\n        this.x = x; this.y = y; this.z = z;\r\n        return this;\r\n    }\r\n    normalize(){\r\n        return this.unit();\r\n    }\r\n\r\n\r\n    static negative(a: Vector, b: Vector, c: Vector) {\r\n        b.x = -a.x; b.y = -a.y; b.z = -a.z;\r\n        return b;\r\n    }\r\n    static add(a: Vector, b: Vector, c: Vector) {\r\n        if (b instanceof Vector) { c.x = a.x + b.x; c.y = a.y + b.y; c.z = a.z + b.z; }\r\n        else { c.x = a.x + b; c.y = a.y + b; c.z = a.z + b; }\r\n        return c;\r\n    }\r\n    static subtract(a: Vector, b: Vector, c: Vector) {\r\n        if (b instanceof Vector) { c.x = a.x - b.x; c.y = a.y - b.y; c.z = a.z - b.z; }\r\n        else { c.x = a.x - b; c.y = a.y - b; c.z = a.z - b; }\r\n        return c;\r\n    }\r\n    static multiply(a: Vector, b: Vector, c: Vector) {\r\n        if (b instanceof Vector) { c.x = a.x * b.x; c.y = a.y * b.y; c.z = a.z * b.z; }\r\n        else { c.x = a.x * b; c.y = a.y * b; c.z = a.z * b; }\r\n        return c;\r\n    }\r\n    static divide(a: Vector, b: Vector, c: Vector) {\r\n        if (b instanceof Vector) { c.x = a.x / b.x; c.y = a.y / b.y; c.z = a.z / b.z; }\r\n        else { c.x = a.x / b; c.y = a.y / b; c.z = a.z / b; }\r\n        return c;\r\n    }\r\n    static cross(a: Vector, b: Vector, c: Vector) {\r\n        c.x = a.y * b.z - a.z * b.y;\r\n        c.y = a.z * b.x - a.x * b.z;\r\n        c.z = a.x * b.y - a.y * b.x;\r\n        return c;\r\n    }\r\n    static unit(a: Vector, b: Vector, c: Vector) {\r\n        var length = a.length();\r\n        b.x = a.x / length;\r\n        b.y = a.y / length;\r\n        b.z = a.z / length;\r\n        return b;\r\n    }\r\n    static fromAngles(theta: number, phi: number): Vector {\r\n        return new Vector(Math.cos(theta) * Math.cos(phi), Math.sin(phi), Math.sin(theta) * Math.cos(phi));\r\n    }\r\n    static randomDirection() {\r\n        return Vector.fromAngles(Math.random() * Math.PI * 2, Math.asin(Math.random() * 2 - 1));\r\n    }\r\n    static min(a: Vector, b: Vector, c: Vector) {\r\n        return new Vector(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));\r\n    }\r\n    static max(a: Vector, b: Vector, c: Vector) {\r\n        return new Vector(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));\r\n    }\r\n    static lerp(a: Vector, b: Vector, fraction: number) {\r\n        return b.subtract(a).multiply(fraction).add(a);\r\n    }\r\n    static fromArray(a: number[]) {\r\n        return new Vector(a[0], a[1], a[2]);\r\n    }\r\n    static angleBetween(a: Vector, b: Vector, c: Vector) {\r\n        return a.angleTo(b);\r\n    }\r\n\r\n    // Invalid value \r\n    static infinity(){\r\n        return new Vector(Infinity,Infinity,Infinity);\r\n    }\r\n}","import React, {createContext, useReducer, ReactElement} from \"react\";\r\nimport { Polymer, Residue } from \"./lib/types/atoms\";\r\nimport {PDBFile} from './lib/types/atoms'\r\nimport { Visualization } from \"./lib/types/visualization\";\r\n\r\n/**\r\n * Initial State object structure \r\n */\r\nconst initialState: State = {\r\n    polymers:[],\r\n    pdb: undefined,\r\n    isLoading: false,\r\n    simpleStuffy:'',\r\n    hashedNucleicAcidResidues:{},\r\n    viz: {chain1:null, chain2:null},\r\n};\r\n\r\nexport type HashedResidue = {\r\n    [key: string]: Residue\r\n}\r\n\r\n// State structure\r\nexport interface State{\r\n    polymers: Polymer[],\r\n    pdb: PDBFile | undefined,\r\n\r\n    // Determine if process is currently loading or not\r\n    isLoading: boolean,\r\n\r\n    simpleStuffy: string,\r\n\r\n    // This is used for faster lookups of nucleic acid residues. \r\n    // Since nucleic acids are the central parts of visualization,\r\n    // we might need to do many lookups, when searching for interactions.\r\n    hashedNucleicAcidResidues: HashedResidue\r\n\r\n    // Data to be visualized\r\n    viz: Visualization\r\n}\r\n\r\n/**\r\n * Actions structure\r\n */\r\nexport interface Action{\r\n    type: keyof State,\r\n    payload:any,\r\n}\r\n\r\nconst context = createContext<[State, React.Dispatch<Action>]>([initialState, ()=>{}]);\r\n\r\n// Reducer mutates the state\r\nconst reducer = (state: State, {type, payload}:Action): State => {\r\n\r\n    switch(type) {\r\n        // Default case works when type is equal state property name\r\n        default:\r\n            if (type in state){\r\n                (state as any)[type] = payload;\r\n            }else{\r\n                throw new Error(`${type} not found in state`);\r\n            }\r\n    };\r\n\r\n    // We must return new object, otherwise update won't be triggered\r\n    return {...state};\r\n}\r\n\r\n\r\ninterface Props{\r\n    children: ReactElement,\r\n}\r\n\r\nconst StoreComponent =  ({ children }:Props ) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    return <context.Provider value={[state, dispatch]}>{children}</context.Provider>;\r\n};\r\n\r\nexport {context, StoreComponent}","/**\r\n * This file defines some helper functions which are used to \r\n * process atoms, residues, polymers and related functionality.\r\n */\r\n\r\nimport { Coordinate, Coord, DNAResidues, Polymer, Residue, ResidueMeta } from \"./types/atoms\";\r\n\r\n// Calculate centers for residues and returns same polymer with\r\n// calculated center coordinates\r\nexport function calculateCenters(p: Polymer): Polymer{\r\n    p.residues.forEach((residue, i)=>{\r\n        const coordinate: Coordinate = new Coord(0,0,0)\r\n        residue.atoms.forEach(atom=>{\r\n            coordinate.x += atom.coords.x;\r\n            coordinate.y += atom.coords.y;\r\n            coordinate.z += atom.coords.z;\r\n        });\r\n        coordinate.x = coordinate.x / residue.atoms.length;  \r\n        coordinate.y = coordinate.y / residue.atoms.length;  \r\n        coordinate.z = coordinate.z / residue.atoms.length;  \r\n\r\n        p.residues[i].center = coordinate;\r\n    });\r\n    return p;\r\n};\r\n\r\n// Calculates arithmetic distance between 2 coordinates\r\nexport function distanceBetween2Points(p1: Coordinate, p2: Coordinate): number{\r\n    return Math.sqrt(\r\n        Math.pow(p1.x - p2.x, 2) + \r\n        Math.pow(p1.y - p2.y, 2) + \r\n        Math.pow(p1.z - p2.z, 2) \r\n    );\r\n}\r\n\r\n// Helper function, since I could not find a Typescript'y way to do this\r\nexport function ResidueMetaFromResidue(r: Residue): ResidueMeta{\r\n    const {sequenceNumber, hash, name, polymerChainIdentifier}: ResidueMeta = r\r\n    return {sequenceNumber, hash, name, polymerChainIdentifier}\r\n}\r\n\r\n","import { PolymerKind, Residue, ResidueMeta } from \"./atoms\";\r\n\r\n// Defines the distance threshold value for Threshold interaction type\r\nexport const THRESHOLD_DISTANCE: number = 5;\r\n\r\nexport enum InteractionType{\r\n    // Threshold based interaction. Distance is the only factor\r\n    Threshold,\r\n\r\n    // Hydrogen bond interactions\r\n    HBond,\r\n\r\n    // Watson crick pair interactions, primarily between DNA, RNA\r\n    // nucleotides (Defined by VisualizationResidue.index)\r\n    // WatsonCrickPair,\r\n}\r\n\r\n// Interaction interface defines an interaction that the residue\r\n// containing the interaction object has.\r\nexport interface Interaction{\r\n    // The residue that Interaction holder interacts with\r\n    residue: ResidueMeta,\r\n    polymerKind: PolymerKind,\r\n    type: InteractionType,\r\n\r\n    // Any additional data\r\n    meta: any\r\n}\r\n\r\n","import { Atom, Coordinate, coordinateToArray, DNAResidues, Polymer, PolymerKind, Residue } from \"./types/atoms\"\r\nimport { Vector } from \"./Vector\";\r\n\r\n/**\r\n * A value that is used to check if watson crick pair is\r\n */\r\nexport const WATSON_CRICK_PAIR_CALCULATION_THRESHOLD = 1.42\r\n\r\n/**\r\n * Calculates and populates vectors v and o which define the plane of\r\n * single nucleotide.\r\n */\r\nexport const calculateNucleotidePlaneVectors:(p:Polymer)=> Polymer = (p) =>{\r\n    // Only DNA or RNA have nucleotides\r\n    if([PolymerKind.DNA, PolymerKind.RNA].indexOf(p.kind) != -1){\r\n        // Dna/Rna residue atoms containing these names will be selected as c2, c4, c6\r\n        // C's with single quote ' are of ribose so we only want specifically these.\r\n        let cNames = [\"C2\", \"C4\", \"C6\"];\r\n\r\n        p.residues.forEach(residue=>{\r\n            // Find C2, C4, C6 coordinates\r\n            let cAtoms: Coordinate[] = [];\r\n\r\n            const atoms = residue.findAtomsByNames(cNames);\r\n            atoms.forEach((a, i)=>{cAtoms[i] = a.coords});\r\n\r\n            // Calculate plane vector v and point o\r\n            if(cAtoms.length === 3){\r\n                const c2 = Vector.fromArray(coordinateToArray(cAtoms[0]));\r\n                const c4 = Vector.fromArray(coordinateToArray(cAtoms[1]));\r\n                const c6 = Vector.fromArray(coordinateToArray(cAtoms[2]));\r\n                const v = c4.subtract(c2).cross(\r\n                    c6.subtract(c2)\r\n                ).normalize();\r\n\r\n        \r\n                const o = c2.add(c4).add(c6).divide(3);\r\n                residue.v = v;\r\n                residue.o = o;\r\n            }\r\n        })\r\n    }\r\n    return p;\r\n}\r\n\r\n/**\r\n *  Only for DNA\r\n */\r\nexport function isWatsonCrickPair(r1: Residue, r2: Residue): boolean{\r\n    return (\r\n        (r1.name === DNAResidues[DNAResidues.DA] && r2.name === DNAResidues[DNAResidues.DT]) || \r\n        (r1.name === DNAResidues[DNAResidues.DT] && r2.name === DNAResidues[DNAResidues.DA]) || \r\n        (r1.name === DNAResidues[DNAResidues.DC] && r2.name === DNAResidues[DNAResidues.DG]) || \r\n        (r1.name === DNAResidues[DNAResidues.DG] && r2.name === DNAResidues[DNAResidues.DC])\r\n    );\r\n}","import {\r\n\tDNAResidues,\r\n\tPolymer,\r\n\tPolymerKind,\r\n\tResidue,\r\n\tResidueImplementation,\r\n\tResidueMeta,\r\n} from './types/atoms';\r\nimport { Action } from '../Store';\r\nimport {\r\n\tcalculateCenters,\r\n\tdistanceBetween2Points,\r\n\tResidueMetaFromResidue,\r\n} from './AtomsFunctions';\r\nimport { InteractionType, THRESHOLD_DISTANCE } from './types/interactions';\r\nimport { Visualization } from './types/visualization';\r\nimport { IndexKind } from 'typescript';\r\nimport {\r\n\tisWatsonCrickPair,\r\n\tWATSON_CRICK_PAIR_CALCULATION_THRESHOLD,\r\n} from './NucleicAcids';\r\nimport { pairs } from 'd3';\r\n\r\nexport class InteractionsFinder {\r\n\tnucleicAcids: Polymer[] = [];\r\n\tproteins: Polymer[] = [];\r\n\r\n\t// This will be used to generate visualization\r\n\tvisualization: Visualization = { chain1: null, chain2: null };\r\n\r\n\tconstructor(\r\n\t\tpublic polymers: Polymer[],\r\n\t\tpublic dispatch: React.Dispatch<Action>\r\n\t) {\r\n\t\tthis.prepareObjects();\r\n\t}\r\n\r\n\t// Returns unordered array of residue pairs\r\n\twatsonCrickPairs(): Array<Residue[]> {\r\n\t\tif (this.nucleicAcids.length <= 0) {\r\n\t\t\tthrow Error('Nucleic acids are not initialized');\r\n\t\t}\r\n\t\tif (\r\n\t\t\t!(\r\n\t\t\t\tthis.nucleicAcids.length >= 2 &&\r\n\t\t\t\tthis.nucleicAcids[0].kind === PolymerKind.DNA\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\tthrow Error('Nucleic acids are not initialized');\r\n\t\t}\r\n\r\n\t\tconst chain1 = this.nucleicAcids[0];\r\n\t\tconst chain2 = this.nucleicAcids[1];\r\n\r\n\t\t// Chain lengths can differ, so we calculate and diff on each\r\n\t\t// chain pairs. Pairs2 will have chain2 as first chain, so this\r\n\t\t// has to be reordered when generating complete pairs\r\n\t\tlet pairs1 = this.calculateWatsonCrickPairs(chain1, chain2);\r\n\r\n\t\t// pairs2 has chain2 as main chain, also it should be noted that\r\n\t\t// the chain2 residues most often must be in reverse order as they\r\n\t\t// are 3'->5' and chain1 is 5'->3'\r\n\t\tlet pairs2 = this.calculateWatsonCrickPairs(chain2, chain1);\r\n\t\tpairs2.reverse();\r\n\r\n\t\t// Result is an array of residue pairs that are unordered. Second\r\n\t\t// chain pairs are double checked for correctness and lone residues\r\n\t\t// are added too as pairs1 will not have any lone residues of\r\n\t\t// chain2\r\n\t\tlet completePairs: Array<Residue[]> = pairs1;\r\n\t\tpairs2.forEach((pair) => {\r\n\t\t\t// pairs2 pairs have chain2 residues first, so we have to use\r\n\t\t\t// chain1 first\r\n\t\t\tif (pair.length === 1) {\r\n\t\t\t\tcompletePairs.push(pair);\r\n\t\t\t} else if (pair.length === 2) {\r\n\t\t\t\t// Double check if calculations were done correctly on\r\n\t\t\t\t// first chain and such pair from pairs2 exists in pair1\r\n\t\t\t\tlet pairFoundIn1 = false;\r\n\t\t\t\tfor (let i = 0; i < pairs1.length; i++) {\r\n\t\t\t\t\tlet p1 = pairs1[i];\r\n\t\t\t\t\tif (p1.length === 2) {\r\n\t\t\t\t\t\tif (p1[0].hash === pair[1].hash && p1[1].hash === pair[0].hash) {\r\n\t\t\t\t\t\t\tpairFoundIn1 = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Currently we only log this info, but in future\r\n\t\t\t\t// something should be done about this\r\n\t\t\t\tif (!pairFoundIn1) {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t`watsonCrickPairs: matching pair was not found ${pair[1].polymerChainIdentifier}:${pair[1].sequenceNumber}${pair[1].name}---${pair[0].polymerChainIdentifier}:${pair[0].sequenceNumber}${pair[0].name}`,\r\n\t\t\t\t\t\tpair\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn completePairs;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates watson crick pairs for DNA\r\n\t * chain1 and chain2 must be DNA polymers.\r\n\t * Calculations are based on chain1 and not all chain2 residues might\r\n\t * be included. Most often, lone pairs of chain2 won't be included in\r\n\t * the result.\r\n\t */\r\n\tcalculateWatsonCrickPairs(\r\n\t\tchain1: Polymer,\r\n\t\tchain2: Polymer\r\n\t): Array<Residue[]> {\r\n\t\tlet pairs: Array<Residue[]> = [];\r\n\t\tchain1.residues.forEach((r1) => {\r\n\t\t\tlet smallestDistance = Infinity;\r\n\t\t\tlet bestR2: Residue | undefined;\r\n\r\n\t\t\tchain2.residues.forEach((r2) => {\r\n\t\t\t\t// r1 C2/C4/C6 atoms distance to r2 o,v vectors\r\n\t\t\t\tconst r1Cs = r1.findAtomsByNames(['C2', 'C4', 'C6']);\r\n\t\t\t\tconst r1DistToR2VO = [\r\n\t\t\t\t\tMath.abs(r1Cs[0].coords.toVec().subtract(r2.o).dot(r2.v)),\r\n\t\t\t\t\tMath.abs(r1Cs[1].coords.toVec().subtract(r2.o).dot(r2.v)),\r\n\t\t\t\t\tMath.abs(r1Cs[2].coords.toVec().subtract(r2.o).dot(r2.v)),\r\n\t\t\t\t];\r\n\t\t\t\t// r1 C2/C4/C6 atoms distance to r2 o,v vectors\r\n\t\t\t\tconst r2Cs = r2.findAtomsByNames(['C2', 'C4', 'C6']);\r\n\t\t\t\tconst r2DistToR1VO = [\r\n\t\t\t\t\tMath.abs(r2Cs[0].coords.toVec().subtract(r1.o).dot(r1.v)),\r\n\t\t\t\t\tMath.abs(r2Cs[1].coords.toVec().subtract(r1.o).dot(r1.v)),\r\n\t\t\t\t\tMath.abs(r2Cs[2].coords.toVec().subtract(r1.o).dot(r1.v)),\r\n\t\t\t\t];\r\n\r\n\t\t\t\tconst max = Math.max(...r2DistToR1VO, ...r1DistToR2VO);\r\n\r\n\t\t\t\tif (max < smallestDistance) {\r\n\t\t\t\t\tsmallestDistance = max;\r\n\t\t\t\t\tbestR2 = r2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (\r\n\t\t\t\tbestR2 !== undefined &&\r\n\t\t\t\t// Allow tiny bit of random error\r\n\t\t\t\tsmallestDistance <=\r\n\t\t\t\t\tWATSON_CRICK_PAIR_CALCULATION_THRESHOLD + Math.random() &&\r\n\t\t\t\tisWatsonCrickPair(bestR2, r1)\r\n\t\t\t) {\r\n\t\t\t\tconst r2 = bestR2;\r\n\t\t\t\tpairs.push([r1, bestR2]);\r\n\t\t\t\t// console.log(\r\n\t\t\t\t// \t'Smallest distance: ',\r\n\t\t\t\t// \tsmallestDistance,\r\n\t\t\t\t// \t`${r1.polymerChainIdentifier}:${r1.sequenceNumber}${r1.name}`,\r\n\t\t\t\t// \t`${r2.polymerChainIdentifier}:${r2.sequenceNumber}${r2.name}`\r\n\t\t\t\t// );\r\n\t\t\t} else {\r\n\t\t\t\tpairs.push([r1]);\r\n\t\t\t\t// console.log(\r\n\t\t\t\t// \t'No pair for: ',\r\n\t\t\t\t// \t`${r1.polymerChainIdentifier}:${r1.sequenceNumber}${r1.name}`\r\n\t\t\t\t// );\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn pairs;\r\n\t}\r\n\r\n\t// Finds polymers to work with, calculates centers for residues.\r\n\tprepareObjects() {\r\n\t\tthis.nucleicAcids = this.findNucleoAcids();\r\n\t\tthis.proteins = this.findProteins();\r\n\r\n\t\tthis.nucleicAcids.forEach((polymer) => calculateCenters(polymer));\r\n\t\tthis.proteins.forEach((polymer) => calculateCenters(polymer));\r\n\t}\r\n\r\n\tfindProteins(): Polymer[] {\r\n\t\treturn this.polymers.filter((p) => {\r\n\t\t\treturn [PolymerKind.Protein].indexOf(p.kind) !== -1;\r\n\t\t});\r\n\t}\r\n\r\n\tfindNucleoAcids(): Polymer[] {\r\n\t\treturn this.polymers.filter((p) => {\r\n\t\t\treturn [PolymerKind.DNA, PolymerKind.RNA].indexOf(p.kind) !== -1;\r\n\t\t});\r\n\t}\r\n\r\n\t// Generates visualization.chain1 and if possible visualization.chain2\r\n\t// This should be called once all required interactions are calculated\r\n\tgenerateVisualizationScaffold(): Visualization {\r\n\t\tif (this.nucleicAcids.length <= 0) {\r\n\t\t\tthrow Error('Nucleic acids are not initialized');\r\n\t\t}\r\n\r\n\t\t// DNA We assume that chains in source files (PDB, etc) appear in\r\n\t\t// order i.e. first and second chains are from the same DNA\r\n\t\t// strand.\r\n\t\tif (\r\n\t\t\tthis.nucleicAcids.length >= 2 &&\r\n\t\t\tthis.nucleicAcids[0].kind === PolymerKind.DNA\r\n\t\t) {\r\n\t\t\tthis.visualization.chain1 = [];\r\n\t\t\tthis.visualization.chain2 = [];\r\n\t\t\tconst first = this.nucleicAcids[0];\r\n\t\t\tconst second = this.nucleicAcids[1];\r\n\r\n\t\t\t// Smallest distances for first chain. Each item is for each\r\n\t\t\t// residue.\r\n\t\t\tconst distancesFirst = new Array(first.residues.length).fill(+Infinity);\r\n\t\t\tfirst.residues.forEach((r1, i1) => {\r\n\t\t\t\tsecond.residues.forEach((r2, i2) => {\r\n\t\t\t\t\tif (isWatsonCrickPair(r1, r2)) {\r\n\t\t\t\t\t\tdistancesFirst[i2] = Math.min(\r\n\t\t\t\t\t\t\tdistancesFirst[i2],\r\n\t\t\t\t\t\t\tdistanceBetween2Points(r1.center, r2.center)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\t// It looks like that usually the PDB files can contain up to\r\n\t\t\t// 1 nucleotide protrusion in DNA helix. Also, it seems that DNA's\r\n\t\t\t// second strand must be reversed (5'-3' -> 3'->5') when matching\r\n\t\t\t// with the first strand.\r\n\r\n\t\t\t// Tracks the next index for visualization residue index property\r\n\t\t\tlet currentIndex = 0;\r\n\r\n\t\t\t// Tracks the number of added residues from chain2, since we\r\n\t\t\t// don't want to include already included chain2 residues, as\r\n\t\t\t// this can happen in the inner loop\r\n\t\t\tlet secondChainIncludedAmount = 0;\r\n\r\n\t\t\tfor (let i = 0; i < first.residues.length; i++) {\r\n\t\t\t\tlet res1 = first.residues[i];\r\n\t\t\t\t// Second chain is reversed to 3'->5' to match first one\r\n\t\t\t\t// We assume that chain lengths are identical (hence -1-i)\r\n\t\t\t\tfor (\r\n\t\t\t\t\tlet j = second.residues.length - 1 - secondChainIncludedAmount;\r\n\t\t\t\t\tj > 0;\r\n\t\t\t\t\t--j\r\n\t\t\t\t) {\r\n\t\t\t\t\tlet res2 = second.residues[j];\r\n\r\n\t\t\t\t\t// First residue from first chain might be a\r\n\t\t\t\t\t// protrusion, so check if j-1 might match with i\r\n\t\t\t\t\t// (Which would mean j is protrusion)\r\n\t\t\t\t\tif (!isWatsonCrickPair(res1, res2) && j - 1 > 0 && i === 0) {\r\n\t\t\t\t\t\tlet newRes2 = second.residues[j - 1];\r\n\t\t\t\t\t\tif (isWatsonCrickPair(res1, newRes2)) {\r\n\t\t\t\t\t\t\t// This case means that j is protrusion, so we\r\n\t\t\t\t\t\t\t// add it as a lonely nucleotide to chain2\r\n\t\t\t\t\t\t\tthis.visualization.chain2.push({\r\n\t\t\t\t\t\t\t\tindex: currentIndex,\r\n\t\t\t\t\t\t\t\tresidue: ResidueMetaFromResidue(newRes2),\r\n\t\t\t\t\t\t\t\tinteractions: newRes2.interactions,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tsecondChainIncludedAmount++;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// i is protrusion\r\n\t\t\t\t\t\t\tthis.visualization.chain1.push({\r\n\t\t\t\t\t\t\t\tindex: currentIndex,\r\n\t\t\t\t\t\t\t\tresidue: ResidueMetaFromResidue(res1),\r\n\t\t\t\t\t\t\t\tinteractions: res1.interactions,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentIndex++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Valid watson crick pair\r\n\t\t\t\t\tif (isWatsonCrickPair(res1, res2)) {\r\n\t\t\t\t\t\tthis.visualization.chain1.push({\r\n\t\t\t\t\t\t\tindex: currentIndex,\r\n\t\t\t\t\t\t\tresidue: ResidueMetaFromResidue(res1),\r\n\t\t\t\t\t\t\tinteractions: res1.interactions,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (secondChainIncludedAmount <= second.residues.length) {\r\n\t\t\t\t\t\t\tthis.visualization.chain2.push({\r\n\t\t\t\t\t\t\t\tindex: currentIndex,\r\n\t\t\t\t\t\t\t\tresidue: ResidueMetaFromResidue(res2),\r\n\t\t\t\t\t\t\t\tinteractions: res2.interactions,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tsecondChainIncludedAmount++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcurrentIndex++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If chain1 is longer than chain2 - fill in the\r\n\t\t\t\t// leftover chain1 residues\r\n\t\t\t\tif (secondChainIncludedAmount > second.residues.length) {\r\n\t\t\t\t\tthis.visualization.chain1.push({\r\n\t\t\t\t\t\tindex: currentIndex,\r\n\t\t\t\t\t\tresidue: ResidueMetaFromResidue(res1),\r\n\t\t\t\t\t\tinteractions: res1.interactions,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tcurrentIndex++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// If chain1 is done, but chain2 is still not completely\r\n\t\t\t// included, then we need to include it.\r\n\t\t\tconsole.log(\r\n\t\t\t\t'secondChainIncludedAmount',\r\n\t\t\t\tsecondChainIncludedAmount,\r\n\t\t\t\tsecond.residues.length\r\n\t\t\t);\r\n\t\t\tif (secondChainIncludedAmount < second.residues.length) {\r\n\t\t\t\tfor (\r\n\t\t\t\t\tlet i = second.residues.length - secondChainIncludedAmount - 1;\r\n\t\t\t\t\ti >= 0;\r\n\t\t\t\t\t--i\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.visualization.chain2.push({\r\n\t\t\t\t\t\tindex: currentIndex,\r\n\t\t\t\t\t\tresidue: ResidueMetaFromResidue(second.residues[i]),\r\n\t\t\t\t\t\tinteractions: second.residues[i].interactions,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tcurrentIndex++;\r\n\t\t\t\t\tsecondChainIncludedAmount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// RNA\r\n\t\telse {\r\n\t\t\tthis.visualization.chain1 = [];\r\n\t\t\tthis.visualization.chain2 = null;\r\n\t\t\t// TODO\r\n\t\t}\r\n\r\n\t\treturn this.visualization;\r\n\t}\r\n\r\n\t// Compares residue centers of nucleic acid and proteins If distance\r\n\t// between centers is smaller than defined THRESHOLD_DISTANCE times 2,\r\n\t// we can try to search for THRESHOLD_DISTANCE distance between\r\n\t// nucleic acid and protein residue atoms\r\n\tthresholdInteractions() {\r\n\t\tthis.nucleicAcids.forEach((nacid, nacidI) => {\r\n\t\t\tnacid.residues.forEach((nacidResidue, nacidResidueI) => {\r\n\t\t\t\tthis.proteins.forEach((p) => {\r\n\t\t\t\t\tp.residues.forEach((pResidue) => {\r\n\t\t\t\t\t\tconst distanceResidues = distanceBetween2Points(\r\n\t\t\t\t\t\t\tnacidResidue.center,\r\n\t\t\t\t\t\t\tpResidue.center\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t// Residues might contain atoms that are less than\r\n\t\t\t\t\t\t// THRESHOLD_DISTANCE amount apart even if\r\n\t\t\t\t\t\t// residues themselves are 2 times further.\r\n\t\t\t\t\t\tif (distanceResidues <= THRESHOLD_DISTANCE * 2) {\r\n\t\t\t\t\t\t\tnacidResidue.atoms.forEach((nacidAtom) => {\r\n\t\t\t\t\t\t\t\tpResidue.atoms.forEach((pAtom) => {\r\n\t\t\t\t\t\t\t\t\tconst distanceAtoms = distanceBetween2Points(\r\n\t\t\t\t\t\t\t\t\t\tnacidAtom.coords,\r\n\t\t\t\t\t\t\t\t\t\tpAtom.coords\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\tif (distanceAtoms <= THRESHOLD_DISTANCE) {\r\n\t\t\t\t\t\t\t\t\t\tthis.nucleicAcids[nacidI].residues[\r\n\t\t\t\t\t\t\t\t\t\t\tnacidResidueI\r\n\t\t\t\t\t\t\t\t\t\t].interactions.push({\r\n\t\t\t\t\t\t\t\t\t\t\tresidue: ResidueMetaFromResidue(pResidue),\r\n\t\t\t\t\t\t\t\t\t\t\ttype: InteractionType.Threshold,\r\n\t\t\t\t\t\t\t\t\t\t\tpolymerKind: p.kind,\r\n\t\t\t\t\t\t\t\t\t\t\tmeta: { distance: distanceAtoms },\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n","import React, { useContext, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport {\r\n\tAtom,\r\n\tResidue,\r\n\tPolymerKind,\r\n\tResidueMeta,\r\n\tDNAResidues,\r\n} from '../lib/types/atoms';\r\nimport { context } from '../Store';\r\nimport { InteractionsFinder } from '../lib/InteractionsFinder';\r\nimport { VisualizationResidue } from '../lib/types/visualization';\r\nimport { ForceGraph } from './../lib/viz/ForceGraph';\r\nimport { useRef } from 'react';\r\n\r\ninterface D3Element {\r\n\tx: number;\r\n\ty: number;\r\n\tdata: ResidueMeta;\r\n\tchainId: string;\r\n\tvisualizationResidue: VisualizationResidue;\r\n}\r\n\r\nexport function Viewer() {\r\n\tconst [state, dispatch] = useContext(context);\r\n\tconst polymers = state.polymers;\r\n\r\n\tlet ref = React.createRef<SVGSVGElement>();\r\n\tlet tooltip = React.createRef<HTMLDivElement>();\r\n\r\n\tlet containerRef = useRef<HTMLDivElement>(null);\r\n\r\n\t// Construct atoms from polymers that are either DNA or RNA, as we only visualize these\r\n\tconst atoms: Atom[] = [];\r\n\tpolymers\r\n\t\t.filter((p) => [PolymerKind.DNA, PolymerKind.RNA].indexOf(p.kind) !== -1)\r\n\t\t.map(({ residues }) => {\r\n\t\t\tresidues.map((r) => atoms.push(...r.atoms));\r\n\t\t});\r\n\r\n\tfunction initD3() {\r\n\t\tif (!ref || polymers.length <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst iFinder = new InteractionsFinder(polymers, dispatch);\r\n\t\tconst pairs = iFinder.watsonCrickPairs();\r\n\t\tconst dna = iFinder.nucleicAcids;\r\n\r\n\t\tinterface Node {\r\n\t\t\tid: string;\r\n\t\t\tgroup: number;\r\n\t\t}\r\n\r\n\t\tinterface Link {\r\n\t\t\tsource: string;\r\n\t\t\ttarget: string;\r\n\t\t\tvalue: number;\r\n\t\t}\r\n\r\n\t\tlet nodes: Node[] = [];\r\n\t\tlet links: Link[] = [];\r\n\r\n\t\tconst chain1 = dna[0];\r\n\t\tconst chain2 = dna[1];\r\n\r\n\t\tconst resToId: (r: Residue) => string = (r) => {\r\n\t\t\treturn `${r.polymerChainIdentifier}:${r.name}${r.sequenceNumber}`;\r\n\t\t};\r\n\r\n\t\t// Collect nodes\r\n\t\tconst DNAResidueIndexes = Object.values(DNAResidues);\r\n\t\tchain1.residues.forEach((r, index) => {\r\n\t\t\tnodes.push({\r\n\t\t\t\tid: resToId(r),\r\n\t\t\t\tgroup: DNAResidueIndexes.indexOf(r.name as DNAResidues) + 1,\r\n\t\t\t});\r\n\r\n\t\t\t// Collect links for same chain residues\r\n\t\t\tlet residues = chain1.residues;\r\n\t\t\tif (index > 0 && index < residues.length) {\r\n\t\t\t\tlinks.push({\r\n\t\t\t\t\tsource: resToId(residues[index - 1]),\r\n\t\t\t\t\ttarget: resToId(r),\r\n\t\t\t\t\tvalue: 1,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\tchain2.residues.forEach((r, index) => {\r\n\t\t\tnodes.push({\r\n\t\t\t\tid: resToId(r),\r\n\t\t\t\tgroup: DNAResidueIndexes.indexOf(r.name as DNAResidues) + 1,\r\n\t\t\t});\r\n\r\n\t\t\t// Collect links for same chain residues\r\n\t\t\tlet residues = chain2.residues;\r\n\t\t\tif (index > 0 && index < residues.length) {\r\n\t\t\t\tlinks.push({\r\n\t\t\t\t\tsource: resToId(residues[index - 1]),\r\n\t\t\t\t\ttarget: resToId(r),\r\n\t\t\t\t\tvalue: 1,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Collect links for watson-crick pairs\r\n\t\tpairs.forEach((p) => {\r\n\t\t\tconst r1 = p[0];\r\n\t\t\tif (p.length === 2) {\r\n\t\t\t\tconst r2 = p[1];\r\n\r\n\t\t\t\tlinks.push({\r\n\t\t\t\t\tsource: resToId(r2),\r\n\t\t\t\t\ttarget: resToId(r1),\r\n\t\t\t\t\tvalue: 1,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconsole.log('Vizualization data:', nodes, links);\r\n\r\n\t\t// svg dimensions should fit the container\r\n\t\tlet [w, h] = [\r\n\t\t\t(containerRef.current as HTMLDivElement).offsetWidth,\r\n\t\t\t(containerRef.current as HTMLDivElement).offsetHeight,\r\n\t\t];\r\n\r\n\t\tForceGraph(\r\n\t\t\t{\r\n\t\t\t\tnodes,\r\n\t\t\t\tlinks,\r\n\t\t\t\tsvgRef: ref.current,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: w,\r\n\t\t\t\theight: h,\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\t// TODO Add RNA colors\r\n\t\t// type cmap = {\r\n\t\t// \t[key in DNAResidues]: string;\r\n\t\t// };\r\n\t\t// const ColorMap: cmap = {\r\n\t\t// \t[DNAResidues.DA]: '#00897b',\r\n\t\t// \t[DNAResidues.DT]: '#c2185b',\r\n\t\t// \t[DNAResidues.DG]: '#3949ab',\r\n\t\t// \t[DNAResidues.DC]: '#ffa000',\r\n\t\t// };\r\n\t\t// const GetColor = (r: ResidueMeta): string => {\r\n\t\t// \tif (r.name in DNAResidues) {\r\n\t\t// \t\treturn ColorMap[r.name as DNAResidues];\r\n\t\t// \t}\r\n\t\t// \treturn GetHoverColor(r);\r\n\t\t// };\r\n\t\t// const GetHoverColor = (r: ResidueMeta): string => {\r\n\t\t// \treturn '#95fe44';\r\n\t\t// };\r\n\r\n\t\t// // Clean up svg initially\r\n\t\t// d3.select(ref.current).selectAll('*').remove();\r\n\r\n\t\t// // Start generating new chart\r\n\r\n\t\t// // Width and height of svg\r\n\t\t// const [w, h] = [900, 500];\r\n\t\t// // Margins x and y\r\n\t\t// const [mX, mY] = [200, 40];\r\n\r\n\t\t// const iFinder = new InteractionsFinder(polymers, dispatch);\r\n\r\n\t\t// const pairs = iFinder.watsonCrickPairs();\r\n\r\n\t\t// const visualizationData = iFinder.generateVisualizationScaffold();\r\n\t\t// let nucleoAcidsData: D3Element[] = [];\r\n\r\n\t\t// // Visualization not initialized\r\n\t\t// if (visualizationData.chain1 === null) {\r\n\t\t// \treturn;\r\n\t\t// }\r\n\r\n\t\t// visualizationData?.chain1.forEach((r) => {\r\n\t\t// \tnucleoAcidsData.push({\r\n\t\t// \t\tx: 0,\r\n\t\t// \t\ty: r.index,\r\n\t\t// \t\tdata: r.residue,\r\n\t\t// \t\tchainId: r.residue.polymerChainIdentifier,\r\n\t\t// \t\tvisualizationResidue: r,\r\n\t\t// \t});\r\n\t\t// });\r\n\r\n\t\t// if (visualizationData.chain2 !== null) {\r\n\t\t// \tvisualizationData.chain2.forEach((r) => {\r\n\t\t// \t\tnucleoAcidsData.push({\r\n\t\t// \t\t\tx: 1,\r\n\t\t// \t\t\ty: r.index,\r\n\t\t// \t\t\tdata: r.residue,\r\n\t\t// \t\t\tchainId: r.residue.polymerChainIdentifier,\r\n\t\t// \t\t\tvisualizationResidue: r,\r\n\t\t// \t\t});\r\n\t\t// \t});\r\n\t\t// }\r\n\r\n\t\t// let maxResidues = Math.max(\r\n\t\t// \tvisualizationData.chain1.length,\r\n\t\t// \tvisualizationData.chain2 !== null ? visualizationData.chain2.length : 0\r\n\t\t// );\r\n\t\t// let numAcids = visualizationData.chain2 !== null ? 2 : 1;\r\n\r\n\t\t// let yScale = d3\r\n\t\t// \t.scaleLinear()\r\n\t\t// \t.domain([0, maxResidues])\r\n\t\t// \t.range([0 + mY, h - mY]);\r\n\r\n\t\t// let xScale = d3\r\n\t\t// \t.scaleLinear()\r\n\t\t// \t.domain([0, numAcids])\r\n\t\t// \t.range([0 + mX, w - mX]);\r\n\r\n\t\t// const rSize = 10;\r\n\r\n\t\t// const tooltipEl = d3.select(tooltip.current);\r\n\t\t// const svg = ref.current;\r\n\t\t// const chart = d3\r\n\t\t// \t.select(svg)\r\n\t\t// \t.attr('width', w)\r\n\t\t// \t.attr('height', h)\r\n\t\t// \t.selectAll()\r\n\t\t// \t.data(nucleoAcidsData)\r\n\t\t// \t.enter()\r\n\t\t// \t.append('circle')\r\n\t\t// \t.attr('cx', (a: any) => xScale(a.x))\r\n\t\t// \t.attr('cy', (a: any) => yScale(a.y))\r\n\t\t// \t.style('fill', function (residue: D3Element) {\r\n\t\t// \t\treturn GetColor(residue.data);\r\n\t\t// \t})\r\n\t\t// \t.attr('r', rSize)\r\n\t\t// \t.on('mouseover', async function (event: MouseEvent, residue: D3Element) {\r\n\t\t// \t\td3.select(this)\r\n\t\t// \t\t\t.attr('r', 15)\r\n\t\t// \t\t\t.style('fill', function () {\r\n\t\t// \t\t\t\treturn GetHoverColor(residue.data);\r\n\t\t// \t\t\t});\r\n\r\n\t\t// \t\tlet b = residue.data as Residue;\r\n\r\n\t\t// \t\ttry {\r\n\t\t// \t\t\tlet interactionsHtml =\r\n\t\t// \t\t\t\t'<div><b>Interactions are currently disabled</b></div>';\r\n\t\t// \t\t\t// residue.visualizationResidue.interactions.forEach((i:Interaction)=>{\r\n\t\t// \t\t\t//     interactionsHtml += `<div>${i.polymerKind}:${i.residue.name+\":\"+i.residue.sequenceNumber} ${i.meta?.distance}</div>`;\r\n\t\t// \t\t\t// });\r\n\r\n\t\t// \t\t\tawait tooltipEl\r\n\t\t// \t\t\t\t.html(\r\n\t\t// \t\t\t\t\t`<div>Residue: ${b.name} seqno: ${b.sequenceNumber} ChainID: ${residue.chainId}</div>${interactionsHtml}`\r\n\t\t// \t\t\t\t)\r\n\t\t// \t\t\t\t.transition()\r\n\t\t// \t\t\t\t.duration(50)\r\n\t\t// \t\t\t\t.style('left', event.pageX + 'px')\r\n\t\t// \t\t\t\t.style('top', event.pageY + 'px')\r\n\t\t// \t\t\t\t.end();\r\n\t\t// \t\t} catch (e) {\r\n\t\t// \t\t\tconsole.log('Something went wrong: ', e);\r\n\t\t// \t\t}\r\n\r\n\t\t// \t\ttooltipEl.style('opacity', 1);\r\n\t\t// \t})\r\n\t\t// \t.on('mouseout', function (event: MouseEvent, residue: D3Element) {\r\n\t\t// \t\ttooltipEl.style('opacity', 0);\r\n\t\t// \t\td3.select(this)\r\n\t\t// \t\t\t.attr('r', rSize)\r\n\t\t// \t\t\t.style('fill', function () {\r\n\t\t// \t\t\t\treturn GetColor(residue.data);\r\n\t\t// \t\t\t});\r\n\t\t// \t});\r\n\r\n\t\t// const x = atoms.map(a=>a.coords.x)\r\n\t\t// const y = atoms.map(a=>a.coords.y)\r\n\t\t// const z = atoms.map(a=>a.coords.z)\r\n\r\n\t\t// const tooltipEl = d3.select(tooltip.current)\r\n\r\n\t\t// const rSize = 3;\r\n\t\t// const chart = d3.select(ref.current)\r\n\t\t//     .attr('width', w)\r\n\t\t//     .attr('height', h)\r\n\t\t//     .selectAll('circle')\r\n\t\t//     .data(atoms)\r\n\t\t//     .enter()\r\n\t\t//         .append('circle')\r\n\t\t//         .attr('cx', (a:Atom)=>xScale(a.coords.x))\r\n\t\t//         .attr('cy', (a:Atom)=>yScale(a.coords.y))\r\n\t\t//         .style('fill', '#867')\r\n\t\t//         .on('mouseover', async function( event:MouseEvent, atom:Atom){\r\n\t\t//             d3.select(this).attr('r', 15)\r\n\t\t//                 .style('fill', '#5ef');\r\n\r\n\t\t//             try{\r\n\t\t//                 await tooltipEl\r\n\t\t//                 .html(`Residue: ${atom.residueName} Atom name: ${atom.name} Atom element: ${atom.element}`)\r\n\t\t//                 .transition()\r\n\t\t//                 .duration(50)\r\n\t\t//                 .style('left', event.pageX+\"px\")\r\n\t\t//                 .style('top', event.pageY+\"px\")\r\n\t\t//                 .end();\r\n\t\t//             }catch(e){\r\n\t\t//                 console.log(\"Something went wrong: \",e);\r\n\t\t//             }\r\n\r\n\t\t//             tooltipEl.style('opacity', 1)\r\n\t\t//         })\r\n\t\t//         .on('mouseout', function(d:Atom){\r\n\t\t//             tooltipEl.style('opacity', 0)\r\n\t\t//             d3.select(this).attr('r', rSize)\r\n\t\t//             .style('fill', '#867')\r\n\t\t//         });\r\n\r\n\t\t// chart.transition()\r\n\t\t//     .attr('r', rSize)\r\n\t\t//     .delay(function(a: Atom, i){\r\n\t\t//         return i * 5\r\n\t\t//     })\r\n\t\t//     .duration(500)\r\n\t}\r\n\r\n\tuseEffect(initD3, [polymers]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div>{state.simpleStuffy}</div>\r\n\t\t\t<div className=\"p-5 flex items-center flex-col h-full\" ref={containerRef}>\r\n\t\t\t\t<div className=\"min-w-full h-full\">\r\n\t\t\t\t\t<svg ref={ref}></svg>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tref={tooltip}\r\n\t\t\t\t\tstyle={{ position: 'absolute', opacity: 0, background: '#fff' }}\r\n\t\t\t\t></div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n","import * as d3 from 'd3';\r\n\r\n// Example taken from\r\n// https://observablehq.com/@d3/force-directed-graph\r\nexport function ForceGraph(\r\n\t{\r\n\t\tnodes, // an iterable of node objects (typically [{id}, …])\r\n\t\tlinks, // an iterable of link objects (typically [{source, target}, …])\r\n\t\tsvgRef, // d3 svg object\r\n\t},\r\n\topts\r\n) {\r\n\tlet {\r\n\t\tnodeId = (d) => d.id, // given d in nodes, returns a unique identifier (string)\r\n\t\tnodeGroup, // given d in nodes, returns an (ordinal) value for color\r\n\t\tnodeGroups, // an array of ordinal values representing the node groups\r\n\t\tnodeTitle, // given d in nodes, a title string\r\n\t\tnodeFill = 'currentColor', // node stroke fill (if not using a group color encoding)\r\n\t\tnodeStroke = '#fff', // node stroke color\r\n\t\tnodeStrokeWidth = 1.5, // node stroke width, in pixels\r\n\t\tnodeStrokeOpacity = 1, // node stroke opacity\r\n\t\tnodeRadius = 5, // node radius, in pixels\r\n\t\tnodeStrength,\r\n\t\tlinkSource = ({ source }) => source, // given d in links, returns a node identifier string\r\n\t\tlinkTarget = ({ target }) => target, // given d in links, returns a node identifier string\r\n\t\tlinkStroke = '#999', // link stroke color\r\n\t\tlinkStrokeOpacity = 0.6, // link stroke opacity\r\n\t\tlinkStrokeWidth = 1.5, // given d in links, returns a stroke width in pixels\r\n\t\tlinkStrokeLinecap = 'round', // link stroke linecap\r\n\t\tlinkStrength,\r\n\t\tcolors = d3.schemeTableau10, // an array of color strings, for the node groups\r\n\t\twidth = 640, // outer width, in pixels\r\n\t\theight = 400, // outer height, in pixels\r\n\t\tinvalidation, // when this promise resolves, stop the simulation\r\n\t} = opts;\r\n\r\n\t// Compute values.\r\n\tconst N = d3.map(nodes, nodeId).map(intern);\r\n\tconst LS = d3.map(links, linkSource).map(intern);\r\n\tconst LT = d3.map(links, linkTarget).map(intern);\r\n\tif (nodeTitle === undefined) nodeTitle = (_, i) => N[i];\r\n\tconst T = nodeTitle == null ? null : d3.map(nodes, nodeTitle);\r\n\tconst G = nodeGroup == null ? null : d3.map(nodes, nodeGroup).map(intern);\r\n\tconst W =\r\n\t\ttypeof linkStrokeWidth !== 'function'\r\n\t\t\t? null\r\n\t\t\t: d3.map(links, linkStrokeWidth);\r\n\r\n\t// Replace the input nodes and links with mutable objects for the simulation.\r\n\tnodes = d3.map(nodes, (_, i) => ({ id: N[i] }));\r\n\tlinks = d3.map(links, (_, i) => ({ source: LS[i], target: LT[i] }));\r\n\r\n\t// Compute default domains.\r\n\tif (G && nodeGroups === undefined) nodeGroups = d3.sort(G);\r\n\r\n\t// Construct the scales.\r\n\tconst color = nodeGroup == null ? null : d3.scaleOrdinal(nodeGroups, colors);\r\n\r\n\t// Construct the forces.\r\n\tconst forceNode = d3.forceManyBody();\r\n\tconst forceLink = d3.forceLink(links).id(({ index: i }) => N[i]);\r\n\tif (nodeStrength !== undefined) forceNode.strength(nodeStrength);\r\n\tif (linkStrength !== undefined) forceLink.strength(linkStrength);\r\n\r\n\tconst simulation = d3\r\n\t\t.forceSimulation(nodes)\r\n\t\t.force('link', forceLink)\r\n\t\t.force('charge', forceNode)\r\n\t\t.force('center', d3.forceCenter())\r\n\t\t.on('tick', ticked);\r\n\r\n\tconst svg = d3\r\n\t\t.select(svgRef)\r\n\t\t.attr('width', width)\r\n\t\t.attr('height', height)\r\n\t\t.attr('viewBox', [-width / 2, -height / 2, width, height])\r\n\t\t.attr('style', 'max-width: 100%; height: auto; height: intrinsic;');\r\n\tconst g = svg.append('g');\r\n\r\n\tconst link = g\r\n\t\t.append('g')\r\n\t\t.attr('stroke', linkStroke)\r\n\t\t.attr('stroke-opacity', linkStrokeOpacity)\r\n\t\t.attr(\r\n\t\t\t'stroke-width',\r\n\t\t\ttypeof linkStrokeWidth !== 'function' ? linkStrokeWidth : null\r\n\t\t)\r\n\t\t.attr('stroke-linecap', linkStrokeLinecap)\r\n\t\t.selectAll('line')\r\n\t\t.data(links)\r\n\t\t.join('line');\r\n\r\n\tconst node = g\r\n\t\t.append('g')\r\n\t\t.attr('fill', nodeFill)\r\n\t\t.attr('stroke', nodeStroke)\r\n\t\t.attr('stroke-opacity', nodeStrokeOpacity)\r\n\t\t.attr('stroke-width', nodeStrokeWidth)\r\n\t\t.selectAll('circle')\r\n\t\t.data(nodes)\r\n\t\t.join('circle')\r\n\t\t.attr('r', nodeRadius)\r\n\t\t.call(drag(simulation));\r\n\r\n\tif (W) link.attr('stroke-width', ({ index: i }) => W[i]);\r\n\tif (G) node.attr('fill', ({ index: i }) => color(G[i]));\r\n\tif (T) node.append('title').text(({ index: i }) => T[i]);\r\n\tif (invalidation != null) invalidation.then(() => simulation.stop());\r\n\r\n\tfunction intern(value) {\r\n\t\treturn value !== null && typeof value === 'object'\r\n\t\t\t? value.valueOf()\r\n\t\t\t: value;\r\n\t}\r\n\r\n\tfunction ticked() {\r\n\t\tlink\r\n\t\t\t.attr('x1', (d) => d.source.x)\r\n\t\t\t.attr('y1', (d) => d.source.y)\r\n\t\t\t.attr('x2', (d) => d.target.x)\r\n\t\t\t.attr('y2', (d) => d.target.y);\r\n\r\n\t\tnode.attr('cx', (d) => d.x).attr('cy', (d) => d.y);\r\n\t}\r\n\r\n\tfunction drag(simulation) {\r\n\t\tfunction dragstarted(event) {\r\n\t\t\tif (!event.active) simulation.alphaTarget(0.3).restart();\r\n\t\t\tevent.subject.fx = event.subject.x;\r\n\t\t\tevent.subject.fy = event.subject.y;\r\n\t\t}\r\n\r\n\t\tfunction dragged(event) {\r\n\t\t\tevent.subject.fx = event.x;\r\n\t\t\tevent.subject.fy = event.y;\r\n\t\t}\r\n\r\n\t\tfunction dragended(event) {\r\n\t\t\tif (!event.active) simulation.alphaTarget(0);\r\n\t\t\tevent.subject.fx = null;\r\n\t\t\tevent.subject.fy = null;\r\n\t\t}\r\n\r\n\t\treturn d3\r\n\t\t\t.drag()\r\n\t\t\t.on('start', dragstarted)\r\n\t\t\t.on('drag', dragged)\r\n\t\t\t.on('end', dragended);\r\n\t}\r\n\r\n\tlet transform;\r\n\tconst zoom = d3.zoom().on('zoom', (e) => {\r\n\t\tg.attr('transform', (transform = e.transform));\r\n\t\tg.style('stroke-width', 3 / Math.sqrt(transform.k));\r\n\t\tnode.attr('r', 3 / Math.sqrt(transform.k));\r\n\t});\r\n\r\n\tsvg.call(zoom).call(zoom.transform, d3.zoomIdentity);\r\n\r\n\treturn Object.assign(svg.node(), { scales: { color } });\r\n}\r\n","import { Atom, DNAResidues, PDBFile, Polymer, PolymerKind, polymerKindFromAtom, Residue, ResidueImplementation, RNAResidues, Coord } from \"./types/atoms\"\r\nimport hash from 'object-hash';\r\nimport {calculateNucleotidePlaneVectors} from \"./NucleicAcids\";\r\nimport { Vector } from \"./Vector\";\r\n\r\nexport class PDBHandler{\r\n    file?: File\r\n\r\n    constructor(file?: File){\r\n        if (file !== undefined){\r\n            this.file = file\r\n        }\r\n    }\r\n\r\n    async readData(): Promise<PDBFile>{\r\n        if(this.file == undefined){\r\n            throw Error(\"file not provided\");\r\n        }\r\n        let text = await this.file.text()\r\n        return this.format(text)\r\n    }\r\n\r\n    format(text: string): PDBFile{\r\n        return {\r\n            raw: this.formatText(text),\r\n            polymers: this.formatPolymers(text)\r\n        }\r\n    }\r\n\r\n    formatText(text: string): string{\r\n        return text.split('\\n')\r\n            .map((line, index)=>index.toString()+\". \"+line)\r\n            .join(\"\\n\")\r\n    }\r\n\r\n    /**\r\n     * formatAtoms parses PDB strting into Polymer[] data structure\r\n     * \r\n     * PDB File keywords:\r\n     * ATOM - atom information\r\n     * TER - terminates sequence of previously provided ATOMs\r\n     * \r\n     * @param text \r\n     * @returns \r\n     */\r\n    formatPolymers(text: string): Polymer[]{\r\n        let result: Polymer[] = [];\r\n\r\n        // Helper functions to quickly create objects\r\n        const newPolymer = ():Polymer=>{\r\n            return {\r\n                chainIdentifier: '',\r\n                residues: [],\r\n                kind:PolymerKind.Unknown,\r\n            }\r\n        }\r\n        const newResidue = ():Residue=>{\r\n            return new ResidueImplementation();\r\n        }\r\n        // Helper to push currentResidue to currentPolymer\r\n        const pushResidue = ():void=>{\r\n            // hash will be useful to uniquely identify each residue.\r\n            currentResidue.hash = hash(currentResidue);\r\n            currentPolymer.residues.push(currentResidue);\r\n        }\r\n        \r\n        let currentPolymer = newPolymer()\r\n        let currentResidue = newResidue()\r\n\r\n        // Polymer kind determination functionality\r\n        type currentPolymerKind = {\r\n            [key in PolymerKind|number|string]:number\r\n        };\r\n        // Realistically - there should be only 1 PolymerKind for given polymer, but in case it is not, we can\r\n        // check which kind appears more often than others to determine true PolymerKind.\r\n        const determinePolymerKindAndReset = (c?:currentPolymerKind): [currentPolymerKind, PolymerKind] | currentPolymerKind=>{\r\n            let obj = {\r\n                [PolymerKind.DNA]:0,\r\n                [PolymerKind.RNA]:0,\r\n                [PolymerKind.Protein]:0           \r\n            }\r\n            if(c===undefined){\r\n                return obj;\r\n            }\r\n            return [\r\n                obj, // reset obj\r\n                // Get the PolymerKind that has the largest number of occurrences\r\n                Object.keys(c).reduce((a:any,b:any)=>c[a]>c[b]?a:b) as unknown as PolymerKind\r\n            ]\r\n        }\r\n        let currentPolymerKindCounter = determinePolymerKindAndReset() as currentPolymerKind;\r\n\r\n        // Here we will process the pdb text\r\n        text.split(\"\\n\").forEach(line=>{\r\n            // Parse ATOM lines\r\n            if(line.startsWith(\"ATOM\") || line.startsWith(\"HETATM\")){\r\n                // https://www.cgl.ucsf.edu/chimera/docs/UsersGuide/tutorials/pdbintro.html\r\n                let x = parseFloat(line.slice(30, 38).trim());\r\n                let y = parseFloat(line.slice(38, 46).trim());\r\n                let z = parseFloat(line.slice(46, 54).trim());\r\n\r\n                let name = line.slice(12,16).trim();\r\n                let residueName = line.slice(17, 20).trim()\r\n                let element = line.slice(76,78).trim();\r\n                let residueSequenceNumber = parseInt(line.slice(22,26).trim());\r\n\r\n                // Chain identifier for current polymer is 1 letter\r\n                let chainIdentifier = line.slice(21,22);\r\n                currentPolymer.chainIdentifier = chainIdentifier;\r\n\r\n                // Construct new atom entry\r\n                const atom: Atom = {\r\n                    coords:new Coord(x,y,z),\r\n                    name,\r\n                    element,\r\n                    residueName,\r\n                    residueSequenceNumber,\r\n                }\r\n                \r\n                // Increment probable polymer kind from residue\r\n                currentPolymerKindCounter[polymerKindFromAtom(atom)]++\r\n\r\n                // Set residue sequence number and residue name for first time\r\n                if (currentResidue.sequenceNumber === -1){\r\n                    currentResidue.name = atom.residueName;\r\n                    currentResidue.sequenceNumber = residueSequenceNumber;\r\n                    currentResidue.polymerChainIdentifier = chainIdentifier;\r\n                }\r\n\r\n                // If residue sequence number does not match with current atom's - add residue to polymer and reset currentResidue to a new one\r\n                if (residueSequenceNumber !== currentResidue.sequenceNumber){\r\n                    pushResidue();\r\n                    currentResidue = newResidue();\r\n                    currentResidue.name = atom.residueName;\r\n                    currentResidue.sequenceNumber = residueSequenceNumber;\r\n                    currentResidue.polymerChainIdentifier = chainIdentifier;\r\n                }\r\n\r\n                currentResidue.atoms.push(atom)\r\n            }   \r\n            // TER indicates the end of current polymer (chain of residues)\r\n            if(line.startsWith(\"TER\")){\r\n                // Don't forget to push residue\r\n                pushResidue();\r\n\r\n                // Get polymer kind and reset counter\r\n                let [c, kind] = determinePolymerKindAndReset(currentPolymerKindCounter) as [currentPolymerKind, PolymerKind]\r\n                currentPolymerKindCounter = c;\r\n                currentPolymer.kind = kind;\r\n\r\n                // This must be calculated beforehand. As these values will be used in watson crick search later.\r\n                currentPolymer = calculateNucleotidePlaneVectors(currentPolymer);\r\n\r\n                // Save polymer\r\n                result.push(currentPolymer);\r\n\r\n                // Reset current polymer and residue\r\n                currentPolymer = newPolymer();\r\n                currentResidue = newResidue();\r\n            }\r\n        });\r\n        \r\n        return result;\r\n    }\r\n\r\n}","import React, {\r\n\tuseState,\r\n\tChangeEventHandler,\r\n\tChangeEvent,\r\n\tuseEffect,\r\n\tuseContext,\r\n} from 'react';\r\nimport { InteractionsFinder } from '../lib/InteractionsFinder';\r\nimport { PDBHandler } from '../lib/PDBHandler';\r\nimport { PDBFile, Polymer } from '../lib/types/atoms';\r\nimport { context, Action } from '../Store';\r\n\r\n// Fetch PDB text for given id (if valid)\r\nconst fetchPDBFile = async (id: string): Promise<string> => {\r\n\tconst response = await fetch(`https://files.rcsb.org/download/${id}.pdb`);\r\n\tconst pdbText = await response.text();\r\n\treturn pdbText;\r\n};\r\n\r\nexport function DataFetcher() {\r\n\tconst [state, dispatch] = useContext(context);\r\n\r\n\tconst startLoading = () => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'isLoading',\r\n\t\t\tpayload: true,\r\n\t\t});\r\n\t};\r\n\tconst stopLoading = () => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'isLoading',\r\n\t\t\tpayload: false,\r\n\t\t});\r\n\t};\r\n\tconst updatePDBState = (pdb: PDBFile) => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'pdb',\r\n\t\t\tpayload: pdb,\r\n\t\t});\r\n\t};\r\n\t// Update polymers in store, generate visualization data structure\r\n\tconst updatePolymers = (polymers: Polymer[]) => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'polymers',\r\n\t\t\tpayload: polymers,\r\n\t\t});\r\n\r\n\t\tconst iFinder = new InteractionsFinder(polymers, dispatch);\r\n\r\n\t\t// Load all needed interactions\r\n\t\tiFinder.thresholdInteractions();\r\n\r\n\t\t// Generate visualization data structure\r\n\t\t// dispatch({\r\n\t\t//     type:'viz',\r\n\t\t//     payload: iFinder.generateVisualizationScaffold()\r\n\t\t// })\r\n\t};\r\n\r\n\t// Fetch PDB file by given id parameter. Must run only once\r\n\tuseEffect(() => {\r\n\t\tconst url = new URLSearchParams(window.location.search);\r\n\t\tconst id = url.get('id');\r\n\t\tconsole.log('ID', id);\r\n\t\tif (id !== null) {\r\n\t\t\t(async () => {\r\n\t\t\t\tstartLoading();\r\n\t\t\t\tconst pdb = new PDBHandler().format(await fetchPDBFile(id));\r\n\t\t\t\tupdatePDBState(pdb);\r\n\t\t\t\tupdatePolymers(pdb.polymers);\r\n\t\t\t\tstopLoading();\r\n\t\t\t})();\r\n\t\t}\r\n\t}, []);\r\n\r\n\t// Updates pbd file information from uploaded file, parses pdb data and performs interaction calculations\r\n\tconst handleFileChange: ChangeEventHandler<HTMLInputElement> = async (\r\n\t\tevent: ChangeEvent\r\n\t) => {\r\n\t\tlet f = (event.target as HTMLInputElement).files?.item(0);\r\n\t\tif (f !== null) {\r\n\t\t\t// Show spinner while loading\r\n\t\t\tstartLoading();\r\n\r\n\t\t\t// Read and parse the file\r\n\t\t\tconsole.time('TIME_TO_PARSE_EVERYTHING');\r\n\t\t\tconsole.time('TIME_TO_PARSE_PDB');\r\n\t\t\tconst pdb = await new PDBHandler(f as File).readData();\r\n\t\t\tconsole.timeEnd('TIME_TO_PARSE_PDB');\r\n\r\n\t\t\t// Update state with parsed values\r\n\t\t\tupdatePDBState(pdb);\r\n\t\t\tupdatePolymers(pdb.polymers);\r\n\r\n\t\t\t// Some fake loading time, so we get to see the spinner :)\r\n\t\t\tconsole.timeEnd('TIME_TO_PARSE_EVERYTHING');\r\n\t\t\tsetTimeout(stopLoading, 2000);\r\n\t\t}\r\n\t};\r\n\r\n\tlet pdbText: JSX.Element | undefined;\r\n\tif (state.polymers.length > 0) {\r\n\t\tpdbText = (\r\n\t\t\t<div className=\"mt-5\">\r\n\t\t\t\t<div className=\"mb-1\">Provided input file</div>\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tclassName=\"text-sm w-full border h-96 border-blue-100\"\r\n\t\t\t\t\tvalue={state.pdb?.raw}\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\t// Render data fetcher box\r\n\treturn (\r\n\t\t<div className=\"p-5 max-h-screen overflow-auto break-words\">\r\n\t\t\t{!state.isLoading && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{state.pdb === undefined && (\r\n\t\t\t\t\t\t<div className=\"text-sm text-gray-600 mb-4 bg-red-200 p-2\">\r\n\t\t\t\t\t\t\tChoose a PDB file which contains DNA/RNA with Proteins\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input type=\"file\" onChange={handleFileChange} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{pdbText}\r\n\t\t\t{state.pdb && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\tPolymers from input:\r\n\t\t\t\t\t{state.polymers.map(({ residues, chainIdentifier, kind }, k) => (\r\n\t\t\t\t\t\t<div className=\"ml-2\" key={k}>\r\n\t\t\t\t\t\t\tChain:{' '}\r\n\t\t\t\t\t\t\t<b>\r\n\t\t\t\t\t\t\t\t{chainIdentifier} ({kind})\r\n\t\t\t\t\t\t\t</b>\r\n\t\t\t\t\t\t\t<div className=\"ml-2\">\r\n\t\t\t\t\t\t\t\t{residues.map((residue, key) => {\r\n\t\t\t\t\t\t\t\t\treturn <span key={key}>{residue.name} &nbsp;</span>;\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n","import \"./../css/spinner.css\"\r\n\r\nconst Spinner = ()=>{\r\n    return (\r\n        <div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n    );\r\n}\r\n\r\nexport default Spinner;\r\n\r\n","import React, {\r\n\tuseEffect,\r\n\tuseState,\r\n\tuseContext,\r\n\tReactElement,\r\n\tChildren,\r\n} from 'react';\r\nimport { Viewer } from './components/Viewer';\r\nimport { DataFetcher } from './components/DataFetcher';\r\nimport Spinner from './components/Spinner';\r\nimport { StoreComponent, context } from './Store';\r\n\r\nexport function App() {\r\n\tconst state = useContext(context)[0];\r\n\r\n\treturn (\r\n\t\t<div className=\"w-full flex flex-row\">\r\n\t\t\t{state.isLoading === true && (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"fixed w-screen min-h-screen top-0 left-0 flex items-center justify-center z-50  h-full\"\r\n\t\t\t\t\tstyle={{ backgroundColor: 'rgba(0,0,0,0.35)' }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Spinner />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t<div className=\"z-10 w-9/12 bg-indigo-300 min-h-full h-screen\">\r\n\t\t\t\t<Viewer />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"z-10 w-3/12\">\r\n\t\t\t\t<DataFetcher />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\ninterface Props {\r\n\tchildren: ReactElement;\r\n}\r\n\r\n// We want to provide nice loading animation at the top level.\r\n// So this wrapper simply allows App to use context state.\r\nexport function AppWrapper({ children }: Props) {\r\n\treturn <StoreComponent>{children}</StoreComponent>;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App, AppWrapper} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppWrapper>\r\n      <App/>\r\n    </AppWrapper>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}